
spi_test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000038b0  0800018c  0800018c  0001018c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000078  08003a3c  08003a3c  00013a3c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003ab4  08003ab4  00020078  2**0
                  CONTENTS
  4 .ARM          00000000  08003ab4  08003ab4  00020078  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003ab4  08003ab4  00020078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003ab4  08003ab4  00013ab4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003ab8  08003ab8  00013ab8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000078  20000000  08003abc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000a8  20000078  08003b34  00020078  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000120  08003b34  00020120  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
 12 .debug_info   00009a0e  00000000  00000000  000200a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000016dd  00000000  00000000  00029ab6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000780  00000000  00000000  0002b198  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000006c8  00000000  00000000  0002b918  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001f5e0  00000000  00000000  0002bfe0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000084f3  00000000  00000000  0004b5c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000bd768  00000000  00000000  00053ab3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0011121b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002008  00000000  00000000  00111270  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800018c <__do_global_dtors_aux>:
 800018c:	b510      	push	{r4, lr}
 800018e:	4c05      	ldr	r4, [pc, #20]	; (80001a4 <__do_global_dtors_aux+0x18>)
 8000190:	7823      	ldrb	r3, [r4, #0]
 8000192:	b933      	cbnz	r3, 80001a2 <__do_global_dtors_aux+0x16>
 8000194:	4b04      	ldr	r3, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x1c>)
 8000196:	b113      	cbz	r3, 800019e <__do_global_dtors_aux+0x12>
 8000198:	4804      	ldr	r0, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x20>)
 800019a:	f3af 8000 	nop.w
 800019e:	2301      	movs	r3, #1
 80001a0:	7023      	strb	r3, [r4, #0]
 80001a2:	bd10      	pop	{r4, pc}
 80001a4:	20000078 	.word	0x20000078
 80001a8:	00000000 	.word	0x00000000
 80001ac:	08003a24 	.word	0x08003a24

080001b0 <frame_dummy>:
 80001b0:	b508      	push	{r3, lr}
 80001b2:	4b03      	ldr	r3, [pc, #12]	; (80001c0 <frame_dummy+0x10>)
 80001b4:	b11b      	cbz	r3, 80001be <frame_dummy+0xe>
 80001b6:	4903      	ldr	r1, [pc, #12]	; (80001c4 <frame_dummy+0x14>)
 80001b8:	4803      	ldr	r0, [pc, #12]	; (80001c8 <frame_dummy+0x18>)
 80001ba:	f3af 8000 	nop.w
 80001be:	bd08      	pop	{r3, pc}
 80001c0:	00000000 	.word	0x00000000
 80001c4:	2000007c 	.word	0x2000007c
 80001c8:	08003a24 	.word	0x08003a24

080001cc <__aeabi_drsub>:
 80001cc:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001d0:	e002      	b.n	80001d8 <__adddf3>
 80001d2:	bf00      	nop

080001d4 <__aeabi_dsub>:
 80001d4:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001d8 <__adddf3>:
 80001d8:	b530      	push	{r4, r5, lr}
 80001da:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001de:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001e2:	ea94 0f05 	teq	r4, r5
 80001e6:	bf08      	it	eq
 80001e8:	ea90 0f02 	teqeq	r0, r2
 80001ec:	bf1f      	itttt	ne
 80001ee:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001f2:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001f6:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001fa:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001fe:	f000 80e2 	beq.w	80003c6 <__adddf3+0x1ee>
 8000202:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000206:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800020a:	bfb8      	it	lt
 800020c:	426d      	neglt	r5, r5
 800020e:	dd0c      	ble.n	800022a <__adddf3+0x52>
 8000210:	442c      	add	r4, r5
 8000212:	ea80 0202 	eor.w	r2, r0, r2
 8000216:	ea81 0303 	eor.w	r3, r1, r3
 800021a:	ea82 0000 	eor.w	r0, r2, r0
 800021e:	ea83 0101 	eor.w	r1, r3, r1
 8000222:	ea80 0202 	eor.w	r2, r0, r2
 8000226:	ea81 0303 	eor.w	r3, r1, r3
 800022a:	2d36      	cmp	r5, #54	; 0x36
 800022c:	bf88      	it	hi
 800022e:	bd30      	pophi	{r4, r5, pc}
 8000230:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000234:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000238:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 800023c:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000240:	d002      	beq.n	8000248 <__adddf3+0x70>
 8000242:	4240      	negs	r0, r0
 8000244:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000248:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 800024c:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000250:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000254:	d002      	beq.n	800025c <__adddf3+0x84>
 8000256:	4252      	negs	r2, r2
 8000258:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800025c:	ea94 0f05 	teq	r4, r5
 8000260:	f000 80a7 	beq.w	80003b2 <__adddf3+0x1da>
 8000264:	f1a4 0401 	sub.w	r4, r4, #1
 8000268:	f1d5 0e20 	rsbs	lr, r5, #32
 800026c:	db0d      	blt.n	800028a <__adddf3+0xb2>
 800026e:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000272:	fa22 f205 	lsr.w	r2, r2, r5
 8000276:	1880      	adds	r0, r0, r2
 8000278:	f141 0100 	adc.w	r1, r1, #0
 800027c:	fa03 f20e 	lsl.w	r2, r3, lr
 8000280:	1880      	adds	r0, r0, r2
 8000282:	fa43 f305 	asr.w	r3, r3, r5
 8000286:	4159      	adcs	r1, r3
 8000288:	e00e      	b.n	80002a8 <__adddf3+0xd0>
 800028a:	f1a5 0520 	sub.w	r5, r5, #32
 800028e:	f10e 0e20 	add.w	lr, lr, #32
 8000292:	2a01      	cmp	r2, #1
 8000294:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000298:	bf28      	it	cs
 800029a:	f04c 0c02 	orrcs.w	ip, ip, #2
 800029e:	fa43 f305 	asr.w	r3, r3, r5
 80002a2:	18c0      	adds	r0, r0, r3
 80002a4:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002ac:	d507      	bpl.n	80002be <__adddf3+0xe6>
 80002ae:	f04f 0e00 	mov.w	lr, #0
 80002b2:	f1dc 0c00 	rsbs	ip, ip, #0
 80002b6:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002ba:	eb6e 0101 	sbc.w	r1, lr, r1
 80002be:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002c2:	d31b      	bcc.n	80002fc <__adddf3+0x124>
 80002c4:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002c8:	d30c      	bcc.n	80002e4 <__adddf3+0x10c>
 80002ca:	0849      	lsrs	r1, r1, #1
 80002cc:	ea5f 0030 	movs.w	r0, r0, rrx
 80002d0:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002d4:	f104 0401 	add.w	r4, r4, #1
 80002d8:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002dc:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002e0:	f080 809a 	bcs.w	8000418 <__adddf3+0x240>
 80002e4:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002e8:	bf08      	it	eq
 80002ea:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002ee:	f150 0000 	adcs.w	r0, r0, #0
 80002f2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002f6:	ea41 0105 	orr.w	r1, r1, r5
 80002fa:	bd30      	pop	{r4, r5, pc}
 80002fc:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000300:	4140      	adcs	r0, r0
 8000302:	eb41 0101 	adc.w	r1, r1, r1
 8000306:	3c01      	subs	r4, #1
 8000308:	bf28      	it	cs
 800030a:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800030e:	d2e9      	bcs.n	80002e4 <__adddf3+0x10c>
 8000310:	f091 0f00 	teq	r1, #0
 8000314:	bf04      	itt	eq
 8000316:	4601      	moveq	r1, r0
 8000318:	2000      	moveq	r0, #0
 800031a:	fab1 f381 	clz	r3, r1
 800031e:	bf08      	it	eq
 8000320:	3320      	addeq	r3, #32
 8000322:	f1a3 030b 	sub.w	r3, r3, #11
 8000326:	f1b3 0220 	subs.w	r2, r3, #32
 800032a:	da0c      	bge.n	8000346 <__adddf3+0x16e>
 800032c:	320c      	adds	r2, #12
 800032e:	dd08      	ble.n	8000342 <__adddf3+0x16a>
 8000330:	f102 0c14 	add.w	ip, r2, #20
 8000334:	f1c2 020c 	rsb	r2, r2, #12
 8000338:	fa01 f00c 	lsl.w	r0, r1, ip
 800033c:	fa21 f102 	lsr.w	r1, r1, r2
 8000340:	e00c      	b.n	800035c <__adddf3+0x184>
 8000342:	f102 0214 	add.w	r2, r2, #20
 8000346:	bfd8      	it	le
 8000348:	f1c2 0c20 	rsble	ip, r2, #32
 800034c:	fa01 f102 	lsl.w	r1, r1, r2
 8000350:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000354:	bfdc      	itt	le
 8000356:	ea41 010c 	orrle.w	r1, r1, ip
 800035a:	4090      	lslle	r0, r2
 800035c:	1ae4      	subs	r4, r4, r3
 800035e:	bfa2      	ittt	ge
 8000360:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000364:	4329      	orrge	r1, r5
 8000366:	bd30      	popge	{r4, r5, pc}
 8000368:	ea6f 0404 	mvn.w	r4, r4
 800036c:	3c1f      	subs	r4, #31
 800036e:	da1c      	bge.n	80003aa <__adddf3+0x1d2>
 8000370:	340c      	adds	r4, #12
 8000372:	dc0e      	bgt.n	8000392 <__adddf3+0x1ba>
 8000374:	f104 0414 	add.w	r4, r4, #20
 8000378:	f1c4 0220 	rsb	r2, r4, #32
 800037c:	fa20 f004 	lsr.w	r0, r0, r4
 8000380:	fa01 f302 	lsl.w	r3, r1, r2
 8000384:	ea40 0003 	orr.w	r0, r0, r3
 8000388:	fa21 f304 	lsr.w	r3, r1, r4
 800038c:	ea45 0103 	orr.w	r1, r5, r3
 8000390:	bd30      	pop	{r4, r5, pc}
 8000392:	f1c4 040c 	rsb	r4, r4, #12
 8000396:	f1c4 0220 	rsb	r2, r4, #32
 800039a:	fa20 f002 	lsr.w	r0, r0, r2
 800039e:	fa01 f304 	lsl.w	r3, r1, r4
 80003a2:	ea40 0003 	orr.w	r0, r0, r3
 80003a6:	4629      	mov	r1, r5
 80003a8:	bd30      	pop	{r4, r5, pc}
 80003aa:	fa21 f004 	lsr.w	r0, r1, r4
 80003ae:	4629      	mov	r1, r5
 80003b0:	bd30      	pop	{r4, r5, pc}
 80003b2:	f094 0f00 	teq	r4, #0
 80003b6:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003ba:	bf06      	itte	eq
 80003bc:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003c0:	3401      	addeq	r4, #1
 80003c2:	3d01      	subne	r5, #1
 80003c4:	e74e      	b.n	8000264 <__adddf3+0x8c>
 80003c6:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ca:	bf18      	it	ne
 80003cc:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003d0:	d029      	beq.n	8000426 <__adddf3+0x24e>
 80003d2:	ea94 0f05 	teq	r4, r5
 80003d6:	bf08      	it	eq
 80003d8:	ea90 0f02 	teqeq	r0, r2
 80003dc:	d005      	beq.n	80003ea <__adddf3+0x212>
 80003de:	ea54 0c00 	orrs.w	ip, r4, r0
 80003e2:	bf04      	itt	eq
 80003e4:	4619      	moveq	r1, r3
 80003e6:	4610      	moveq	r0, r2
 80003e8:	bd30      	pop	{r4, r5, pc}
 80003ea:	ea91 0f03 	teq	r1, r3
 80003ee:	bf1e      	ittt	ne
 80003f0:	2100      	movne	r1, #0
 80003f2:	2000      	movne	r0, #0
 80003f4:	bd30      	popne	{r4, r5, pc}
 80003f6:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003fa:	d105      	bne.n	8000408 <__adddf3+0x230>
 80003fc:	0040      	lsls	r0, r0, #1
 80003fe:	4149      	adcs	r1, r1
 8000400:	bf28      	it	cs
 8000402:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000406:	bd30      	pop	{r4, r5, pc}
 8000408:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 800040c:	bf3c      	itt	cc
 800040e:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000412:	bd30      	popcc	{r4, r5, pc}
 8000414:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000418:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 800041c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000420:	f04f 0000 	mov.w	r0, #0
 8000424:	bd30      	pop	{r4, r5, pc}
 8000426:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800042a:	bf1a      	itte	ne
 800042c:	4619      	movne	r1, r3
 800042e:	4610      	movne	r0, r2
 8000430:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000434:	bf1c      	itt	ne
 8000436:	460b      	movne	r3, r1
 8000438:	4602      	movne	r2, r0
 800043a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800043e:	bf06      	itte	eq
 8000440:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000444:	ea91 0f03 	teqeq	r1, r3
 8000448:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 800044c:	bd30      	pop	{r4, r5, pc}
 800044e:	bf00      	nop

08000450 <__aeabi_ui2d>:
 8000450:	f090 0f00 	teq	r0, #0
 8000454:	bf04      	itt	eq
 8000456:	2100      	moveq	r1, #0
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000460:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000464:	f04f 0500 	mov.w	r5, #0
 8000468:	f04f 0100 	mov.w	r1, #0
 800046c:	e750      	b.n	8000310 <__adddf3+0x138>
 800046e:	bf00      	nop

08000470 <__aeabi_i2d>:
 8000470:	f090 0f00 	teq	r0, #0
 8000474:	bf04      	itt	eq
 8000476:	2100      	moveq	r1, #0
 8000478:	4770      	bxeq	lr
 800047a:	b530      	push	{r4, r5, lr}
 800047c:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000480:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000484:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000488:	bf48      	it	mi
 800048a:	4240      	negmi	r0, r0
 800048c:	f04f 0100 	mov.w	r1, #0
 8000490:	e73e      	b.n	8000310 <__adddf3+0x138>
 8000492:	bf00      	nop

08000494 <__aeabi_f2d>:
 8000494:	0042      	lsls	r2, r0, #1
 8000496:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800049a:	ea4f 0131 	mov.w	r1, r1, rrx
 800049e:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004a2:	bf1f      	itttt	ne
 80004a4:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004a8:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004ac:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004b0:	4770      	bxne	lr
 80004b2:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004b6:	bf08      	it	eq
 80004b8:	4770      	bxeq	lr
 80004ba:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004be:	bf04      	itt	eq
 80004c0:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004c4:	4770      	bxeq	lr
 80004c6:	b530      	push	{r4, r5, lr}
 80004c8:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004cc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004d0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004d4:	e71c      	b.n	8000310 <__adddf3+0x138>
 80004d6:	bf00      	nop

080004d8 <__aeabi_ul2d>:
 80004d8:	ea50 0201 	orrs.w	r2, r0, r1
 80004dc:	bf08      	it	eq
 80004de:	4770      	bxeq	lr
 80004e0:	b530      	push	{r4, r5, lr}
 80004e2:	f04f 0500 	mov.w	r5, #0
 80004e6:	e00a      	b.n	80004fe <__aeabi_l2d+0x16>

080004e8 <__aeabi_l2d>:
 80004e8:	ea50 0201 	orrs.w	r2, r0, r1
 80004ec:	bf08      	it	eq
 80004ee:	4770      	bxeq	lr
 80004f0:	b530      	push	{r4, r5, lr}
 80004f2:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80004f6:	d502      	bpl.n	80004fe <__aeabi_l2d+0x16>
 80004f8:	4240      	negs	r0, r0
 80004fa:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004fe:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000502:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000506:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800050a:	f43f aed8 	beq.w	80002be <__adddf3+0xe6>
 800050e:	f04f 0203 	mov.w	r2, #3
 8000512:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000516:	bf18      	it	ne
 8000518:	3203      	addne	r2, #3
 800051a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800051e:	bf18      	it	ne
 8000520:	3203      	addne	r2, #3
 8000522:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000526:	f1c2 0320 	rsb	r3, r2, #32
 800052a:	fa00 fc03 	lsl.w	ip, r0, r3
 800052e:	fa20 f002 	lsr.w	r0, r0, r2
 8000532:	fa01 fe03 	lsl.w	lr, r1, r3
 8000536:	ea40 000e 	orr.w	r0, r0, lr
 800053a:	fa21 f102 	lsr.w	r1, r1, r2
 800053e:	4414      	add	r4, r2
 8000540:	e6bd      	b.n	80002be <__adddf3+0xe6>
 8000542:	bf00      	nop

08000544 <__aeabi_dmul>:
 8000544:	b570      	push	{r4, r5, r6, lr}
 8000546:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800054a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800054e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000552:	bf1d      	ittte	ne
 8000554:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000558:	ea94 0f0c 	teqne	r4, ip
 800055c:	ea95 0f0c 	teqne	r5, ip
 8000560:	f000 f8de 	bleq	8000720 <__aeabi_dmul+0x1dc>
 8000564:	442c      	add	r4, r5
 8000566:	ea81 0603 	eor.w	r6, r1, r3
 800056a:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800056e:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000572:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000576:	bf18      	it	ne
 8000578:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 800057c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000580:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000584:	d038      	beq.n	80005f8 <__aeabi_dmul+0xb4>
 8000586:	fba0 ce02 	umull	ip, lr, r0, r2
 800058a:	f04f 0500 	mov.w	r5, #0
 800058e:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000592:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000596:	fbe0 e503 	umlal	lr, r5, r0, r3
 800059a:	f04f 0600 	mov.w	r6, #0
 800059e:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005a2:	f09c 0f00 	teq	ip, #0
 80005a6:	bf18      	it	ne
 80005a8:	f04e 0e01 	orrne.w	lr, lr, #1
 80005ac:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005b0:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005b4:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005b8:	d204      	bcs.n	80005c4 <__aeabi_dmul+0x80>
 80005ba:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005be:	416d      	adcs	r5, r5
 80005c0:	eb46 0606 	adc.w	r6, r6, r6
 80005c4:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005c8:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005cc:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005d0:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005d4:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005d8:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005dc:	bf88      	it	hi
 80005de:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005e2:	d81e      	bhi.n	8000622 <__aeabi_dmul+0xde>
 80005e4:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005e8:	bf08      	it	eq
 80005ea:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005ee:	f150 0000 	adcs.w	r0, r0, #0
 80005f2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005f6:	bd70      	pop	{r4, r5, r6, pc}
 80005f8:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80005fc:	ea46 0101 	orr.w	r1, r6, r1
 8000600:	ea40 0002 	orr.w	r0, r0, r2
 8000604:	ea81 0103 	eor.w	r1, r1, r3
 8000608:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 800060c:	bfc2      	ittt	gt
 800060e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000612:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000616:	bd70      	popgt	{r4, r5, r6, pc}
 8000618:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800061c:	f04f 0e00 	mov.w	lr, #0
 8000620:	3c01      	subs	r4, #1
 8000622:	f300 80ab 	bgt.w	800077c <__aeabi_dmul+0x238>
 8000626:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800062a:	bfde      	ittt	le
 800062c:	2000      	movle	r0, #0
 800062e:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000632:	bd70      	pople	{r4, r5, r6, pc}
 8000634:	f1c4 0400 	rsb	r4, r4, #0
 8000638:	3c20      	subs	r4, #32
 800063a:	da35      	bge.n	80006a8 <__aeabi_dmul+0x164>
 800063c:	340c      	adds	r4, #12
 800063e:	dc1b      	bgt.n	8000678 <__aeabi_dmul+0x134>
 8000640:	f104 0414 	add.w	r4, r4, #20
 8000644:	f1c4 0520 	rsb	r5, r4, #32
 8000648:	fa00 f305 	lsl.w	r3, r0, r5
 800064c:	fa20 f004 	lsr.w	r0, r0, r4
 8000650:	fa01 f205 	lsl.w	r2, r1, r5
 8000654:	ea40 0002 	orr.w	r0, r0, r2
 8000658:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 800065c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000660:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000664:	fa21 f604 	lsr.w	r6, r1, r4
 8000668:	eb42 0106 	adc.w	r1, r2, r6
 800066c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000670:	bf08      	it	eq
 8000672:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000676:	bd70      	pop	{r4, r5, r6, pc}
 8000678:	f1c4 040c 	rsb	r4, r4, #12
 800067c:	f1c4 0520 	rsb	r5, r4, #32
 8000680:	fa00 f304 	lsl.w	r3, r0, r4
 8000684:	fa20 f005 	lsr.w	r0, r0, r5
 8000688:	fa01 f204 	lsl.w	r2, r1, r4
 800068c:	ea40 0002 	orr.w	r0, r0, r2
 8000690:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000694:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000698:	f141 0100 	adc.w	r1, r1, #0
 800069c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006a0:	bf08      	it	eq
 80006a2:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006a6:	bd70      	pop	{r4, r5, r6, pc}
 80006a8:	f1c4 0520 	rsb	r5, r4, #32
 80006ac:	fa00 f205 	lsl.w	r2, r0, r5
 80006b0:	ea4e 0e02 	orr.w	lr, lr, r2
 80006b4:	fa20 f304 	lsr.w	r3, r0, r4
 80006b8:	fa01 f205 	lsl.w	r2, r1, r5
 80006bc:	ea43 0302 	orr.w	r3, r3, r2
 80006c0:	fa21 f004 	lsr.w	r0, r1, r4
 80006c4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006c8:	fa21 f204 	lsr.w	r2, r1, r4
 80006cc:	ea20 0002 	bic.w	r0, r0, r2
 80006d0:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006d4:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006d8:	bf08      	it	eq
 80006da:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006de:	bd70      	pop	{r4, r5, r6, pc}
 80006e0:	f094 0f00 	teq	r4, #0
 80006e4:	d10f      	bne.n	8000706 <__aeabi_dmul+0x1c2>
 80006e6:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006ea:	0040      	lsls	r0, r0, #1
 80006ec:	eb41 0101 	adc.w	r1, r1, r1
 80006f0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80006f4:	bf08      	it	eq
 80006f6:	3c01      	subeq	r4, #1
 80006f8:	d0f7      	beq.n	80006ea <__aeabi_dmul+0x1a6>
 80006fa:	ea41 0106 	orr.w	r1, r1, r6
 80006fe:	f095 0f00 	teq	r5, #0
 8000702:	bf18      	it	ne
 8000704:	4770      	bxne	lr
 8000706:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800070a:	0052      	lsls	r2, r2, #1
 800070c:	eb43 0303 	adc.w	r3, r3, r3
 8000710:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000714:	bf08      	it	eq
 8000716:	3d01      	subeq	r5, #1
 8000718:	d0f7      	beq.n	800070a <__aeabi_dmul+0x1c6>
 800071a:	ea43 0306 	orr.w	r3, r3, r6
 800071e:	4770      	bx	lr
 8000720:	ea94 0f0c 	teq	r4, ip
 8000724:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000728:	bf18      	it	ne
 800072a:	ea95 0f0c 	teqne	r5, ip
 800072e:	d00c      	beq.n	800074a <__aeabi_dmul+0x206>
 8000730:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000734:	bf18      	it	ne
 8000736:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800073a:	d1d1      	bne.n	80006e0 <__aeabi_dmul+0x19c>
 800073c:	ea81 0103 	eor.w	r1, r1, r3
 8000740:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000744:	f04f 0000 	mov.w	r0, #0
 8000748:	bd70      	pop	{r4, r5, r6, pc}
 800074a:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800074e:	bf06      	itte	eq
 8000750:	4610      	moveq	r0, r2
 8000752:	4619      	moveq	r1, r3
 8000754:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000758:	d019      	beq.n	800078e <__aeabi_dmul+0x24a>
 800075a:	ea94 0f0c 	teq	r4, ip
 800075e:	d102      	bne.n	8000766 <__aeabi_dmul+0x222>
 8000760:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000764:	d113      	bne.n	800078e <__aeabi_dmul+0x24a>
 8000766:	ea95 0f0c 	teq	r5, ip
 800076a:	d105      	bne.n	8000778 <__aeabi_dmul+0x234>
 800076c:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000770:	bf1c      	itt	ne
 8000772:	4610      	movne	r0, r2
 8000774:	4619      	movne	r1, r3
 8000776:	d10a      	bne.n	800078e <__aeabi_dmul+0x24a>
 8000778:	ea81 0103 	eor.w	r1, r1, r3
 800077c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000780:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000784:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000788:	f04f 0000 	mov.w	r0, #0
 800078c:	bd70      	pop	{r4, r5, r6, pc}
 800078e:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000792:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000796:	bd70      	pop	{r4, r5, r6, pc}

08000798 <__aeabi_ddiv>:
 8000798:	b570      	push	{r4, r5, r6, lr}
 800079a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800079e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007a2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007a6:	bf1d      	ittte	ne
 80007a8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007ac:	ea94 0f0c 	teqne	r4, ip
 80007b0:	ea95 0f0c 	teqne	r5, ip
 80007b4:	f000 f8a7 	bleq	8000906 <__aeabi_ddiv+0x16e>
 80007b8:	eba4 0405 	sub.w	r4, r4, r5
 80007bc:	ea81 0e03 	eor.w	lr, r1, r3
 80007c0:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007c4:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007c8:	f000 8088 	beq.w	80008dc <__aeabi_ddiv+0x144>
 80007cc:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007d0:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007d4:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007d8:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007dc:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007e0:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007e4:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007e8:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007ec:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007f0:	429d      	cmp	r5, r3
 80007f2:	bf08      	it	eq
 80007f4:	4296      	cmpeq	r6, r2
 80007f6:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80007fa:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80007fe:	d202      	bcs.n	8000806 <__aeabi_ddiv+0x6e>
 8000800:	085b      	lsrs	r3, r3, #1
 8000802:	ea4f 0232 	mov.w	r2, r2, rrx
 8000806:	1ab6      	subs	r6, r6, r2
 8000808:	eb65 0503 	sbc.w	r5, r5, r3
 800080c:	085b      	lsrs	r3, r3, #1
 800080e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000812:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000816:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800081a:	ebb6 0e02 	subs.w	lr, r6, r2
 800081e:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000822:	bf22      	ittt	cs
 8000824:	1ab6      	subcs	r6, r6, r2
 8000826:	4675      	movcs	r5, lr
 8000828:	ea40 000c 	orrcs.w	r0, r0, ip
 800082c:	085b      	lsrs	r3, r3, #1
 800082e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000832:	ebb6 0e02 	subs.w	lr, r6, r2
 8000836:	eb75 0e03 	sbcs.w	lr, r5, r3
 800083a:	bf22      	ittt	cs
 800083c:	1ab6      	subcs	r6, r6, r2
 800083e:	4675      	movcs	r5, lr
 8000840:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000844:	085b      	lsrs	r3, r3, #1
 8000846:	ea4f 0232 	mov.w	r2, r2, rrx
 800084a:	ebb6 0e02 	subs.w	lr, r6, r2
 800084e:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000852:	bf22      	ittt	cs
 8000854:	1ab6      	subcs	r6, r6, r2
 8000856:	4675      	movcs	r5, lr
 8000858:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 800085c:	085b      	lsrs	r3, r3, #1
 800085e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000862:	ebb6 0e02 	subs.w	lr, r6, r2
 8000866:	eb75 0e03 	sbcs.w	lr, r5, r3
 800086a:	bf22      	ittt	cs
 800086c:	1ab6      	subcs	r6, r6, r2
 800086e:	4675      	movcs	r5, lr
 8000870:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000874:	ea55 0e06 	orrs.w	lr, r5, r6
 8000878:	d018      	beq.n	80008ac <__aeabi_ddiv+0x114>
 800087a:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800087e:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000882:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000886:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800088a:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800088e:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000892:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000896:	d1c0      	bne.n	800081a <__aeabi_ddiv+0x82>
 8000898:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800089c:	d10b      	bne.n	80008b6 <__aeabi_ddiv+0x11e>
 800089e:	ea41 0100 	orr.w	r1, r1, r0
 80008a2:	f04f 0000 	mov.w	r0, #0
 80008a6:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008aa:	e7b6      	b.n	800081a <__aeabi_ddiv+0x82>
 80008ac:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008b0:	bf04      	itt	eq
 80008b2:	4301      	orreq	r1, r0
 80008b4:	2000      	moveq	r0, #0
 80008b6:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008ba:	bf88      	it	hi
 80008bc:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008c0:	f63f aeaf 	bhi.w	8000622 <__aeabi_dmul+0xde>
 80008c4:	ebb5 0c03 	subs.w	ip, r5, r3
 80008c8:	bf04      	itt	eq
 80008ca:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008ce:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008d2:	f150 0000 	adcs.w	r0, r0, #0
 80008d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008da:	bd70      	pop	{r4, r5, r6, pc}
 80008dc:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008e0:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008e4:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008e8:	bfc2      	ittt	gt
 80008ea:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008ee:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008f2:	bd70      	popgt	{r4, r5, r6, pc}
 80008f4:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80008f8:	f04f 0e00 	mov.w	lr, #0
 80008fc:	3c01      	subs	r4, #1
 80008fe:	e690      	b.n	8000622 <__aeabi_dmul+0xde>
 8000900:	ea45 0e06 	orr.w	lr, r5, r6
 8000904:	e68d      	b.n	8000622 <__aeabi_dmul+0xde>
 8000906:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800090a:	ea94 0f0c 	teq	r4, ip
 800090e:	bf08      	it	eq
 8000910:	ea95 0f0c 	teqeq	r5, ip
 8000914:	f43f af3b 	beq.w	800078e <__aeabi_dmul+0x24a>
 8000918:	ea94 0f0c 	teq	r4, ip
 800091c:	d10a      	bne.n	8000934 <__aeabi_ddiv+0x19c>
 800091e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000922:	f47f af34 	bne.w	800078e <__aeabi_dmul+0x24a>
 8000926:	ea95 0f0c 	teq	r5, ip
 800092a:	f47f af25 	bne.w	8000778 <__aeabi_dmul+0x234>
 800092e:	4610      	mov	r0, r2
 8000930:	4619      	mov	r1, r3
 8000932:	e72c      	b.n	800078e <__aeabi_dmul+0x24a>
 8000934:	ea95 0f0c 	teq	r5, ip
 8000938:	d106      	bne.n	8000948 <__aeabi_ddiv+0x1b0>
 800093a:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800093e:	f43f aefd 	beq.w	800073c <__aeabi_dmul+0x1f8>
 8000942:	4610      	mov	r0, r2
 8000944:	4619      	mov	r1, r3
 8000946:	e722      	b.n	800078e <__aeabi_dmul+0x24a>
 8000948:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800094c:	bf18      	it	ne
 800094e:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000952:	f47f aec5 	bne.w	80006e0 <__aeabi_dmul+0x19c>
 8000956:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 800095a:	f47f af0d 	bne.w	8000778 <__aeabi_dmul+0x234>
 800095e:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000962:	f47f aeeb 	bne.w	800073c <__aeabi_dmul+0x1f8>
 8000966:	e712      	b.n	800078e <__aeabi_dmul+0x24a>

08000968 <__gedf2>:
 8000968:	f04f 3cff 	mov.w	ip, #4294967295
 800096c:	e006      	b.n	800097c <__cmpdf2+0x4>
 800096e:	bf00      	nop

08000970 <__ledf2>:
 8000970:	f04f 0c01 	mov.w	ip, #1
 8000974:	e002      	b.n	800097c <__cmpdf2+0x4>
 8000976:	bf00      	nop

08000978 <__cmpdf2>:
 8000978:	f04f 0c01 	mov.w	ip, #1
 800097c:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000980:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000984:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000988:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 800098c:	bf18      	it	ne
 800098e:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000992:	d01b      	beq.n	80009cc <__cmpdf2+0x54>
 8000994:	b001      	add	sp, #4
 8000996:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800099a:	bf0c      	ite	eq
 800099c:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009a0:	ea91 0f03 	teqne	r1, r3
 80009a4:	bf02      	ittt	eq
 80009a6:	ea90 0f02 	teqeq	r0, r2
 80009aa:	2000      	moveq	r0, #0
 80009ac:	4770      	bxeq	lr
 80009ae:	f110 0f00 	cmn.w	r0, #0
 80009b2:	ea91 0f03 	teq	r1, r3
 80009b6:	bf58      	it	pl
 80009b8:	4299      	cmppl	r1, r3
 80009ba:	bf08      	it	eq
 80009bc:	4290      	cmpeq	r0, r2
 80009be:	bf2c      	ite	cs
 80009c0:	17d8      	asrcs	r0, r3, #31
 80009c2:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009c6:	f040 0001 	orr.w	r0, r0, #1
 80009ca:	4770      	bx	lr
 80009cc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009d0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009d4:	d102      	bne.n	80009dc <__cmpdf2+0x64>
 80009d6:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009da:	d107      	bne.n	80009ec <__cmpdf2+0x74>
 80009dc:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009e0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009e4:	d1d6      	bne.n	8000994 <__cmpdf2+0x1c>
 80009e6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009ea:	d0d3      	beq.n	8000994 <__cmpdf2+0x1c>
 80009ec:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009f0:	4770      	bx	lr
 80009f2:	bf00      	nop

080009f4 <__aeabi_cdrcmple>:
 80009f4:	4684      	mov	ip, r0
 80009f6:	4610      	mov	r0, r2
 80009f8:	4662      	mov	r2, ip
 80009fa:	468c      	mov	ip, r1
 80009fc:	4619      	mov	r1, r3
 80009fe:	4663      	mov	r3, ip
 8000a00:	e000      	b.n	8000a04 <__aeabi_cdcmpeq>
 8000a02:	bf00      	nop

08000a04 <__aeabi_cdcmpeq>:
 8000a04:	b501      	push	{r0, lr}
 8000a06:	f7ff ffb7 	bl	8000978 <__cmpdf2>
 8000a0a:	2800      	cmp	r0, #0
 8000a0c:	bf48      	it	mi
 8000a0e:	f110 0f00 	cmnmi.w	r0, #0
 8000a12:	bd01      	pop	{r0, pc}

08000a14 <__aeabi_dcmpeq>:
 8000a14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a18:	f7ff fff4 	bl	8000a04 <__aeabi_cdcmpeq>
 8000a1c:	bf0c      	ite	eq
 8000a1e:	2001      	moveq	r0, #1
 8000a20:	2000      	movne	r0, #0
 8000a22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a26:	bf00      	nop

08000a28 <__aeabi_dcmplt>:
 8000a28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a2c:	f7ff ffea 	bl	8000a04 <__aeabi_cdcmpeq>
 8000a30:	bf34      	ite	cc
 8000a32:	2001      	movcc	r0, #1
 8000a34:	2000      	movcs	r0, #0
 8000a36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a3a:	bf00      	nop

08000a3c <__aeabi_dcmple>:
 8000a3c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a40:	f7ff ffe0 	bl	8000a04 <__aeabi_cdcmpeq>
 8000a44:	bf94      	ite	ls
 8000a46:	2001      	movls	r0, #1
 8000a48:	2000      	movhi	r0, #0
 8000a4a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a4e:	bf00      	nop

08000a50 <__aeabi_dcmpge>:
 8000a50:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a54:	f7ff ffce 	bl	80009f4 <__aeabi_cdrcmple>
 8000a58:	bf94      	ite	ls
 8000a5a:	2001      	movls	r0, #1
 8000a5c:	2000      	movhi	r0, #0
 8000a5e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a62:	bf00      	nop

08000a64 <__aeabi_dcmpgt>:
 8000a64:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a68:	f7ff ffc4 	bl	80009f4 <__aeabi_cdrcmple>
 8000a6c:	bf34      	ite	cc
 8000a6e:	2001      	movcc	r0, #1
 8000a70:	2000      	movcs	r0, #0
 8000a72:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a76:	bf00      	nop

08000a78 <__aeabi_dcmpun>:
 8000a78:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a7c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a80:	d102      	bne.n	8000a88 <__aeabi_dcmpun+0x10>
 8000a82:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a86:	d10a      	bne.n	8000a9e <__aeabi_dcmpun+0x26>
 8000a88:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a8c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a90:	d102      	bne.n	8000a98 <__aeabi_dcmpun+0x20>
 8000a92:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a96:	d102      	bne.n	8000a9e <__aeabi_dcmpun+0x26>
 8000a98:	f04f 0000 	mov.w	r0, #0
 8000a9c:	4770      	bx	lr
 8000a9e:	f04f 0001 	mov.w	r0, #1
 8000aa2:	4770      	bx	lr

08000aa4 <__aeabi_d2f>:
 8000aa4:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000aa8:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000aac:	bf24      	itt	cs
 8000aae:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000ab2:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000ab6:	d90d      	bls.n	8000ad4 <__aeabi_d2f+0x30>
 8000ab8:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000abc:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000ac0:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000ac4:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000ac8:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000acc:	bf08      	it	eq
 8000ace:	f020 0001 	biceq.w	r0, r0, #1
 8000ad2:	4770      	bx	lr
 8000ad4:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000ad8:	d121      	bne.n	8000b1e <__aeabi_d2f+0x7a>
 8000ada:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000ade:	bfbc      	itt	lt
 8000ae0:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000ae4:	4770      	bxlt	lr
 8000ae6:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000aea:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000aee:	f1c2 0218 	rsb	r2, r2, #24
 8000af2:	f1c2 0c20 	rsb	ip, r2, #32
 8000af6:	fa10 f30c 	lsls.w	r3, r0, ip
 8000afa:	fa20 f002 	lsr.w	r0, r0, r2
 8000afe:	bf18      	it	ne
 8000b00:	f040 0001 	orrne.w	r0, r0, #1
 8000b04:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b08:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b0c:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b10:	ea40 000c 	orr.w	r0, r0, ip
 8000b14:	fa23 f302 	lsr.w	r3, r3, r2
 8000b18:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b1c:	e7cc      	b.n	8000ab8 <__aeabi_d2f+0x14>
 8000b1e:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b22:	d107      	bne.n	8000b34 <__aeabi_d2f+0x90>
 8000b24:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b28:	bf1e      	ittt	ne
 8000b2a:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b2e:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b32:	4770      	bxne	lr
 8000b34:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b38:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b3c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b40:	4770      	bx	lr
 8000b42:	bf00      	nop

08000b44 <MMA7455_Init_8G>:
SPI_HandleTypeDef *spi_handler = &hspi1;
//I2C_HandleTypeDef *i2c_instance = &hi2c1;			//Change this to the I2C bus that you are using


void MMA7455_Init_8G()
{
 8000b44:	b580      	push	{r7, lr}
 8000b46:	af00      	add	r7, sp, #0
	//uint8_t init_byte = MMA7455_8g_init_byte;

	tx_buff20[0] = 0x9a; //adress<<1
 8000b48:	4b1e      	ldr	r3, [pc, #120]	; (8000bc4 <MMA7455_Init_8G+0x80>)
 8000b4a:	229a      	movs	r2, #154	; 0x9a
 8000b4c:	701a      	strb	r2, [r3, #0]
	tx_buff21[0] = 0x9d; //value
 8000b4e:	4b1e      	ldr	r3, [pc, #120]	; (8000bc8 <MMA7455_Init_8G+0x84>)
 8000b50:	229d      	movs	r2, #157	; 0x9d
 8000b52:	701a      	strb	r2, [r3, #0]
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4,  GPIO_PIN_RESET);
 8000b54:	2200      	movs	r2, #0
 8000b56:	2110      	movs	r1, #16
 8000b58:	481c      	ldr	r0, [pc, #112]	; (8000bcc <MMA7455_Init_8G+0x88>)
 8000b5a:	f000 ff3b 	bl	80019d4 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, tx_buff20, 1, 10000);
 8000b5e:	f242 7310 	movw	r3, #10000	; 0x2710
 8000b62:	2201      	movs	r2, #1
 8000b64:	4917      	ldr	r1, [pc, #92]	; (8000bc4 <MMA7455_Init_8G+0x80>)
 8000b66:	481a      	ldr	r0, [pc, #104]	; (8000bd0 <MMA7455_Init_8G+0x8c>)
 8000b68:	f001 fe5b 	bl	8002822 <HAL_SPI_Transmit>
	HAL_SPI_Transmit(&hspi1, tx_buff21, 1, 10000);
 8000b6c:	f242 7310 	movw	r3, #10000	; 0x2710
 8000b70:	2201      	movs	r2, #1
 8000b72:	4915      	ldr	r1, [pc, #84]	; (8000bc8 <MMA7455_Init_8G+0x84>)
 8000b74:	4816      	ldr	r0, [pc, #88]	; (8000bd0 <MMA7455_Init_8G+0x8c>)
 8000b76:	f001 fe54 	bl	8002822 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4,  GPIO_PIN_SET);
 8000b7a:	2201      	movs	r2, #1
 8000b7c:	2110      	movs	r1, #16
 8000b7e:	4813      	ldr	r0, [pc, #76]	; (8000bcc <MMA7455_Init_8G+0x88>)
 8000b80:	f000 ff28 	bl	80019d4 <HAL_GPIO_WritePin>

	tx_buff20[0] = 0xac; //adress<<1
 8000b84:	4b0f      	ldr	r3, [pc, #60]	; (8000bc4 <MMA7455_Init_8G+0x80>)
 8000b86:	22ac      	movs	r2, #172	; 0xac
 8000b88:	701a      	strb	r2, [r3, #0]
	tx_buff21[0] = 0x01; //value
 8000b8a:	4b0f      	ldr	r3, [pc, #60]	; (8000bc8 <MMA7455_Init_8G+0x84>)
 8000b8c:	2201      	movs	r2, #1
 8000b8e:	701a      	strb	r2, [r3, #0]
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4,  GPIO_PIN_RESET);
 8000b90:	2200      	movs	r2, #0
 8000b92:	2110      	movs	r1, #16
 8000b94:	480d      	ldr	r0, [pc, #52]	; (8000bcc <MMA7455_Init_8G+0x88>)
 8000b96:	f000 ff1d 	bl	80019d4 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, tx_buff20, 1, 10000);
 8000b9a:	f242 7310 	movw	r3, #10000	; 0x2710
 8000b9e:	2201      	movs	r2, #1
 8000ba0:	4908      	ldr	r1, [pc, #32]	; (8000bc4 <MMA7455_Init_8G+0x80>)
 8000ba2:	480b      	ldr	r0, [pc, #44]	; (8000bd0 <MMA7455_Init_8G+0x8c>)
 8000ba4:	f001 fe3d 	bl	8002822 <HAL_SPI_Transmit>
	HAL_SPI_Transmit(&hspi1, tx_buff21, 1, 10000);
 8000ba8:	f242 7310 	movw	r3, #10000	; 0x2710
 8000bac:	2201      	movs	r2, #1
 8000bae:	4906      	ldr	r1, [pc, #24]	; (8000bc8 <MMA7455_Init_8G+0x84>)
 8000bb0:	4807      	ldr	r0, [pc, #28]	; (8000bd0 <MMA7455_Init_8G+0x8c>)
 8000bb2:	f001 fe36 	bl	8002822 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4,  GPIO_PIN_SET);
 8000bb6:	2201      	movs	r2, #1
 8000bb8:	2110      	movs	r1, #16
 8000bba:	4804      	ldr	r0, [pc, #16]	; (8000bcc <MMA7455_Init_8G+0x88>)
 8000bbc:	f000 ff0a 	bl	80019d4 <HAL_GPIO_WritePin>

	//HAL_I2C_Mem_Write(&hspi1, MMA7455_I2C_ADDRESS, MMA7455_init_reg, 1, &init_byte, 1, 10000);
}
 8000bc0:	bf00      	nop
 8000bc2:	bd80      	pop	{r7, pc}
 8000bc4:	20000094 	.word	0x20000094
 8000bc8:	20000098 	.word	0x20000098
 8000bcc:	48000400 	.word	0x48000400
 8000bd0:	200000b0 	.word	0x200000b0

08000bd4 <MMA7455_Read_10Bit_X>:
	return signed_zval;
}


int16_t MMA7455_Read_10Bit_X(void)
{
 8000bd4:	b580      	push	{r7, lr}
 8000bd6:	b082      	sub	sp, #8
 8000bd8:	af00      	add	r7, sp, #0


	tx_buff20[0] = 0x00; //LSB BITS
 8000bda:	4b2a      	ldr	r3, [pc, #168]	; (8000c84 <MMA7455_Read_10Bit_X+0xb0>)
 8000bdc:	2200      	movs	r2, #0
 8000bde:	701a      	strb	r2, [r3, #0]
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4,  GPIO_PIN_RESET);
 8000be0:	2200      	movs	r2, #0
 8000be2:	2110      	movs	r1, #16
 8000be4:	4828      	ldr	r0, [pc, #160]	; (8000c88 <MMA7455_Read_10Bit_X+0xb4>)
 8000be6:	f000 fef5 	bl	80019d4 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, tx_buff20, 1, 10000);
 8000bea:	f242 7310 	movw	r3, #10000	; 0x2710
 8000bee:	2201      	movs	r2, #1
 8000bf0:	4924      	ldr	r1, [pc, #144]	; (8000c84 <MMA7455_Read_10Bit_X+0xb0>)
 8000bf2:	4826      	ldr	r0, [pc, #152]	; (8000c8c <MMA7455_Read_10Bit_X+0xb8>)
 8000bf4:	f001 fe15 	bl	8002822 <HAL_SPI_Transmit>
	HAL_SPI_Receive(spi_handler, rx_buff2, 1, 1000);
 8000bf8:	4b25      	ldr	r3, [pc, #148]	; (8000c90 <MMA7455_Read_10Bit_X+0xbc>)
 8000bfa:	6818      	ldr	r0, [r3, #0]
 8000bfc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000c00:	2201      	movs	r2, #1
 8000c02:	4924      	ldr	r1, [pc, #144]	; (8000c94 <MMA7455_Read_10Bit_X+0xc0>)
 8000c04:	f001 ff7b 	bl	8002afe <HAL_SPI_Receive>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4,  GPIO_PIN_SET);
 8000c08:	2201      	movs	r2, #1
 8000c0a:	2110      	movs	r1, #16
 8000c0c:	481e      	ldr	r0, [pc, #120]	; (8000c88 <MMA7455_Read_10Bit_X+0xb4>)
 8000c0e:	f000 fee1 	bl	80019d4 <HAL_GPIO_WritePin>
	uint8_t temp_msb = rx_buff2[0];
 8000c12:	4b20      	ldr	r3, [pc, #128]	; (8000c94 <MMA7455_Read_10Bit_X+0xc0>)
 8000c14:	781b      	ldrb	r3, [r3, #0]
 8000c16:	717b      	strb	r3, [r7, #5]
	tx_buff20[0] = 0x02; //MSB BITS
 8000c18:	4b1a      	ldr	r3, [pc, #104]	; (8000c84 <MMA7455_Read_10Bit_X+0xb0>)
 8000c1a:	2202      	movs	r2, #2
 8000c1c:	701a      	strb	r2, [r3, #0]
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4,  GPIO_PIN_RESET);
 8000c1e:	2200      	movs	r2, #0
 8000c20:	2110      	movs	r1, #16
 8000c22:	4819      	ldr	r0, [pc, #100]	; (8000c88 <MMA7455_Read_10Bit_X+0xb4>)
 8000c24:	f000 fed6 	bl	80019d4 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, tx_buff20, 1, 10000);
 8000c28:	f242 7310 	movw	r3, #10000	; 0x2710
 8000c2c:	2201      	movs	r2, #1
 8000c2e:	4915      	ldr	r1, [pc, #84]	; (8000c84 <MMA7455_Read_10Bit_X+0xb0>)
 8000c30:	4816      	ldr	r0, [pc, #88]	; (8000c8c <MMA7455_Read_10Bit_X+0xb8>)
 8000c32:	f001 fdf6 	bl	8002822 <HAL_SPI_Transmit>
	HAL_SPI_Receive(spi_handler, rx_buff2, 1, 1000);
 8000c36:	4b16      	ldr	r3, [pc, #88]	; (8000c90 <MMA7455_Read_10Bit_X+0xbc>)
 8000c38:	6818      	ldr	r0, [r3, #0]
 8000c3a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000c3e:	2201      	movs	r2, #1
 8000c40:	4914      	ldr	r1, [pc, #80]	; (8000c94 <MMA7455_Read_10Bit_X+0xc0>)
 8000c42:	f001 ff5c 	bl	8002afe <HAL_SPI_Receive>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4,  GPIO_PIN_SET);
 8000c46:	2201      	movs	r2, #1
 8000c48:	2110      	movs	r1, #16
 8000c4a:	480f      	ldr	r0, [pc, #60]	; (8000c88 <MMA7455_Read_10Bit_X+0xb4>)
 8000c4c:	f000 fec2 	bl	80019d4 <HAL_GPIO_WritePin>

	uint16_t temp = (rx_buff2[0]<<8) | temp_msb;
 8000c50:	4b10      	ldr	r3, [pc, #64]	; (8000c94 <MMA7455_Read_10Bit_X+0xc0>)
 8000c52:	781b      	ldrb	r3, [r3, #0]
 8000c54:	021b      	lsls	r3, r3, #8
 8000c56:	b21a      	sxth	r2, r3
 8000c58:	797b      	ldrb	r3, [r7, #5]
 8000c5a:	b21b      	sxth	r3, r3
 8000c5c:	4313      	orrs	r3, r2
 8000c5e:	b21b      	sxth	r3, r3
 8000c60:	807b      	strh	r3, [r7, #2]
	int16_t ret_val = (int16_t)temp;
 8000c62:	887b      	ldrh	r3, [r7, #2]
 8000c64:	80fb      	strh	r3, [r7, #6]
	if(temp>511){
 8000c66:	887b      	ldrh	r3, [r7, #2]
 8000c68:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000c6c:	d304      	bcc.n	8000c78 <MMA7455_Read_10Bit_X+0xa4>
		ret_val = (int16_t)temp-1024;
 8000c6e:	887b      	ldrh	r3, [r7, #2]
 8000c70:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
 8000c74:	b29b      	uxth	r3, r3
 8000c76:	80fb      	strh	r3, [r7, #6]
	}
	return ret_val;
 8000c78:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
}
 8000c7c:	4618      	mov	r0, r3
 8000c7e:	3708      	adds	r7, #8
 8000c80:	46bd      	mov	sp, r7
 8000c82:	bd80      	pop	{r7, pc}
 8000c84:	20000094 	.word	0x20000094
 8000c88:	48000400 	.word	0x48000400
 8000c8c:	200000b0 	.word	0x200000b0
 8000c90:	20000000 	.word	0x20000000
 8000c94:	2000009c 	.word	0x2000009c

08000c98 <MMA7455_Read_10Bit_Y>:
int16_t MMA7455_Read_10Bit_Y(void)
{
 8000c98:	b580      	push	{r7, lr}
 8000c9a:	b082      	sub	sp, #8
 8000c9c:	af00      	add	r7, sp, #0
	tx_buff20[0] = 0x04; //MSB BITS
 8000c9e:	4b2a      	ldr	r3, [pc, #168]	; (8000d48 <MMA7455_Read_10Bit_Y+0xb0>)
 8000ca0:	2204      	movs	r2, #4
 8000ca2:	701a      	strb	r2, [r3, #0]
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4,  GPIO_PIN_RESET);
 8000ca4:	2200      	movs	r2, #0
 8000ca6:	2110      	movs	r1, #16
 8000ca8:	4828      	ldr	r0, [pc, #160]	; (8000d4c <MMA7455_Read_10Bit_Y+0xb4>)
 8000caa:	f000 fe93 	bl	80019d4 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, tx_buff20, 1, 10000);
 8000cae:	f242 7310 	movw	r3, #10000	; 0x2710
 8000cb2:	2201      	movs	r2, #1
 8000cb4:	4924      	ldr	r1, [pc, #144]	; (8000d48 <MMA7455_Read_10Bit_Y+0xb0>)
 8000cb6:	4826      	ldr	r0, [pc, #152]	; (8000d50 <MMA7455_Read_10Bit_Y+0xb8>)
 8000cb8:	f001 fdb3 	bl	8002822 <HAL_SPI_Transmit>
	HAL_SPI_Receive(spi_handler, rx_buff2, 1, 1000);
 8000cbc:	4b25      	ldr	r3, [pc, #148]	; (8000d54 <MMA7455_Read_10Bit_Y+0xbc>)
 8000cbe:	6818      	ldr	r0, [r3, #0]
 8000cc0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000cc4:	2201      	movs	r2, #1
 8000cc6:	4924      	ldr	r1, [pc, #144]	; (8000d58 <MMA7455_Read_10Bit_Y+0xc0>)
 8000cc8:	f001 ff19 	bl	8002afe <HAL_SPI_Receive>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4,  GPIO_PIN_SET);
 8000ccc:	2201      	movs	r2, #1
 8000cce:	2110      	movs	r1, #16
 8000cd0:	481e      	ldr	r0, [pc, #120]	; (8000d4c <MMA7455_Read_10Bit_Y+0xb4>)
 8000cd2:	f000 fe7f 	bl	80019d4 <HAL_GPIO_WritePin>
	uint8_t temp_msb = rx_buff2[0];
 8000cd6:	4b20      	ldr	r3, [pc, #128]	; (8000d58 <MMA7455_Read_10Bit_Y+0xc0>)
 8000cd8:	781b      	ldrb	r3, [r3, #0]
 8000cda:	717b      	strb	r3, [r7, #5]
	tx_buff20[0] = 0x06; //LSB BITS
 8000cdc:	4b1a      	ldr	r3, [pc, #104]	; (8000d48 <MMA7455_Read_10Bit_Y+0xb0>)
 8000cde:	2206      	movs	r2, #6
 8000ce0:	701a      	strb	r2, [r3, #0]
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4,  GPIO_PIN_RESET);
 8000ce2:	2200      	movs	r2, #0
 8000ce4:	2110      	movs	r1, #16
 8000ce6:	4819      	ldr	r0, [pc, #100]	; (8000d4c <MMA7455_Read_10Bit_Y+0xb4>)
 8000ce8:	f000 fe74 	bl	80019d4 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, tx_buff20, 1, 10000);
 8000cec:	f242 7310 	movw	r3, #10000	; 0x2710
 8000cf0:	2201      	movs	r2, #1
 8000cf2:	4915      	ldr	r1, [pc, #84]	; (8000d48 <MMA7455_Read_10Bit_Y+0xb0>)
 8000cf4:	4816      	ldr	r0, [pc, #88]	; (8000d50 <MMA7455_Read_10Bit_Y+0xb8>)
 8000cf6:	f001 fd94 	bl	8002822 <HAL_SPI_Transmit>
	HAL_SPI_Receive(spi_handler, rx_buff2, 1, 1000);
 8000cfa:	4b16      	ldr	r3, [pc, #88]	; (8000d54 <MMA7455_Read_10Bit_Y+0xbc>)
 8000cfc:	6818      	ldr	r0, [r3, #0]
 8000cfe:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000d02:	2201      	movs	r2, #1
 8000d04:	4914      	ldr	r1, [pc, #80]	; (8000d58 <MMA7455_Read_10Bit_Y+0xc0>)
 8000d06:	f001 fefa 	bl	8002afe <HAL_SPI_Receive>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4,  GPIO_PIN_SET);
 8000d0a:	2201      	movs	r2, #1
 8000d0c:	2110      	movs	r1, #16
 8000d0e:	480f      	ldr	r0, [pc, #60]	; (8000d4c <MMA7455_Read_10Bit_Y+0xb4>)
 8000d10:	f000 fe60 	bl	80019d4 <HAL_GPIO_WritePin>

	uint16_t temp = (rx_buff2[0]<<8) | temp_msb;
 8000d14:	4b10      	ldr	r3, [pc, #64]	; (8000d58 <MMA7455_Read_10Bit_Y+0xc0>)
 8000d16:	781b      	ldrb	r3, [r3, #0]
 8000d18:	021b      	lsls	r3, r3, #8
 8000d1a:	b21a      	sxth	r2, r3
 8000d1c:	797b      	ldrb	r3, [r7, #5]
 8000d1e:	b21b      	sxth	r3, r3
 8000d20:	4313      	orrs	r3, r2
 8000d22:	b21b      	sxth	r3, r3
 8000d24:	807b      	strh	r3, [r7, #2]
	int16_t ret_val = (int16_t)temp;
 8000d26:	887b      	ldrh	r3, [r7, #2]
 8000d28:	80fb      	strh	r3, [r7, #6]
	if(temp>511){
 8000d2a:	887b      	ldrh	r3, [r7, #2]
 8000d2c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000d30:	d304      	bcc.n	8000d3c <MMA7455_Read_10Bit_Y+0xa4>
		ret_val = (int16_t)temp-1024;
 8000d32:	887b      	ldrh	r3, [r7, #2]
 8000d34:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
 8000d38:	b29b      	uxth	r3, r3
 8000d3a:	80fb      	strh	r3, [r7, #6]
	}
	return ret_val;
 8000d3c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
}
 8000d40:	4618      	mov	r0, r3
 8000d42:	3708      	adds	r7, #8
 8000d44:	46bd      	mov	sp, r7
 8000d46:	bd80      	pop	{r7, pc}
 8000d48:	20000094 	.word	0x20000094
 8000d4c:	48000400 	.word	0x48000400
 8000d50:	200000b0 	.word	0x200000b0
 8000d54:	20000000 	.word	0x20000000
 8000d58:	2000009c 	.word	0x2000009c

08000d5c <MMA7455_Read_10Bit_Z>:
int16_t MMA7455_Read_10Bit_Z(void)
{
 8000d5c:	b580      	push	{r7, lr}
 8000d5e:	b082      	sub	sp, #8
 8000d60:	af00      	add	r7, sp, #0
	tx_buff20[0] = 0x08; //MSB BITS
 8000d62:	4b2a      	ldr	r3, [pc, #168]	; (8000e0c <MMA7455_Read_10Bit_Z+0xb0>)
 8000d64:	2208      	movs	r2, #8
 8000d66:	701a      	strb	r2, [r3, #0]
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4,  GPIO_PIN_RESET);
 8000d68:	2200      	movs	r2, #0
 8000d6a:	2110      	movs	r1, #16
 8000d6c:	4828      	ldr	r0, [pc, #160]	; (8000e10 <MMA7455_Read_10Bit_Z+0xb4>)
 8000d6e:	f000 fe31 	bl	80019d4 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, tx_buff20, 1, 10000);
 8000d72:	f242 7310 	movw	r3, #10000	; 0x2710
 8000d76:	2201      	movs	r2, #1
 8000d78:	4924      	ldr	r1, [pc, #144]	; (8000e0c <MMA7455_Read_10Bit_Z+0xb0>)
 8000d7a:	4826      	ldr	r0, [pc, #152]	; (8000e14 <MMA7455_Read_10Bit_Z+0xb8>)
 8000d7c:	f001 fd51 	bl	8002822 <HAL_SPI_Transmit>
	HAL_SPI_Receive(spi_handler, rx_buff2, 1, 1000);
 8000d80:	4b25      	ldr	r3, [pc, #148]	; (8000e18 <MMA7455_Read_10Bit_Z+0xbc>)
 8000d82:	6818      	ldr	r0, [r3, #0]
 8000d84:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000d88:	2201      	movs	r2, #1
 8000d8a:	4924      	ldr	r1, [pc, #144]	; (8000e1c <MMA7455_Read_10Bit_Z+0xc0>)
 8000d8c:	f001 feb7 	bl	8002afe <HAL_SPI_Receive>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4,  GPIO_PIN_SET);
 8000d90:	2201      	movs	r2, #1
 8000d92:	2110      	movs	r1, #16
 8000d94:	481e      	ldr	r0, [pc, #120]	; (8000e10 <MMA7455_Read_10Bit_Z+0xb4>)
 8000d96:	f000 fe1d 	bl	80019d4 <HAL_GPIO_WritePin>
	uint8_t temp_msb = rx_buff2[0];
 8000d9a:	4b20      	ldr	r3, [pc, #128]	; (8000e1c <MMA7455_Read_10Bit_Z+0xc0>)
 8000d9c:	781b      	ldrb	r3, [r3, #0]
 8000d9e:	717b      	strb	r3, [r7, #5]
	tx_buff20[0] = 0x0A; //LSB BITS
 8000da0:	4b1a      	ldr	r3, [pc, #104]	; (8000e0c <MMA7455_Read_10Bit_Z+0xb0>)
 8000da2:	220a      	movs	r2, #10
 8000da4:	701a      	strb	r2, [r3, #0]
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4,  GPIO_PIN_RESET);
 8000da6:	2200      	movs	r2, #0
 8000da8:	2110      	movs	r1, #16
 8000daa:	4819      	ldr	r0, [pc, #100]	; (8000e10 <MMA7455_Read_10Bit_Z+0xb4>)
 8000dac:	f000 fe12 	bl	80019d4 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, tx_buff20, 1, 10000);
 8000db0:	f242 7310 	movw	r3, #10000	; 0x2710
 8000db4:	2201      	movs	r2, #1
 8000db6:	4915      	ldr	r1, [pc, #84]	; (8000e0c <MMA7455_Read_10Bit_Z+0xb0>)
 8000db8:	4816      	ldr	r0, [pc, #88]	; (8000e14 <MMA7455_Read_10Bit_Z+0xb8>)
 8000dba:	f001 fd32 	bl	8002822 <HAL_SPI_Transmit>
	HAL_SPI_Receive(spi_handler, rx_buff2, 1, 1000);
 8000dbe:	4b16      	ldr	r3, [pc, #88]	; (8000e18 <MMA7455_Read_10Bit_Z+0xbc>)
 8000dc0:	6818      	ldr	r0, [r3, #0]
 8000dc2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000dc6:	2201      	movs	r2, #1
 8000dc8:	4914      	ldr	r1, [pc, #80]	; (8000e1c <MMA7455_Read_10Bit_Z+0xc0>)
 8000dca:	f001 fe98 	bl	8002afe <HAL_SPI_Receive>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4,  GPIO_PIN_SET);
 8000dce:	2201      	movs	r2, #1
 8000dd0:	2110      	movs	r1, #16
 8000dd2:	480f      	ldr	r0, [pc, #60]	; (8000e10 <MMA7455_Read_10Bit_Z+0xb4>)
 8000dd4:	f000 fdfe 	bl	80019d4 <HAL_GPIO_WritePin>

	uint16_t temp = (rx_buff2[0]<<8) | temp_msb;
 8000dd8:	4b10      	ldr	r3, [pc, #64]	; (8000e1c <MMA7455_Read_10Bit_Z+0xc0>)
 8000dda:	781b      	ldrb	r3, [r3, #0]
 8000ddc:	021b      	lsls	r3, r3, #8
 8000dde:	b21a      	sxth	r2, r3
 8000de0:	797b      	ldrb	r3, [r7, #5]
 8000de2:	b21b      	sxth	r3, r3
 8000de4:	4313      	orrs	r3, r2
 8000de6:	b21b      	sxth	r3, r3
 8000de8:	807b      	strh	r3, [r7, #2]
	int16_t ret_val = (int16_t)temp;
 8000dea:	887b      	ldrh	r3, [r7, #2]
 8000dec:	80fb      	strh	r3, [r7, #6]
	if(temp>511){
 8000dee:	887b      	ldrh	r3, [r7, #2]
 8000df0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000df4:	d304      	bcc.n	8000e00 <MMA7455_Read_10Bit_Z+0xa4>
		ret_val = (int16_t)temp-1024;
 8000df6:	887b      	ldrh	r3, [r7, #2]
 8000df8:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
 8000dfc:	b29b      	uxth	r3, r3
 8000dfe:	80fb      	strh	r3, [r7, #6]
	}
	return ret_val;
 8000e00:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
}
 8000e04:	4618      	mov	r0, r3
 8000e06:	3708      	adds	r7, #8
 8000e08:	46bd      	mov	sp, r7
 8000e0a:	bd80      	pop	{r7, pc}
 8000e0c:	20000094 	.word	0x20000094
 8000e10:	48000400 	.word	0x48000400
 8000e14:	200000b0 	.word	0x200000b0
 8000e18:	20000000 	.word	0x20000000
 8000e1c:	2000009c 	.word	0x2000009c

08000e20 <MMA7455_Read_Pitch>:


// The pitch and roll functions are based off of the 8-bit reads.

float MMA7455_Read_Pitch(void)
{
 8000e20:	b5b0      	push	{r4, r5, r7, lr}
 8000e22:	b086      	sub	sp, #24
 8000e24:	af00      	add	r7, sp, #0
	float MMA7455_pitch_denom;
	float MMA7455_pitch_sqrt;
	float MMA7455_pitch;
	float MMA7455_pitch_num;
	int8_t MMA7455_sign = 1;
 8000e26:	2301      	movs	r3, #1
 8000e28:	75fb      	strb	r3, [r7, #23]
	if (MMA7455_Read_10Bit_Z() < 0)
 8000e2a:	f7ff ff97 	bl	8000d5c <MMA7455_Read_10Bit_Z>
 8000e2e:	4603      	mov	r3, r0
 8000e30:	2b00      	cmp	r3, #0
 8000e32:	da01      	bge.n	8000e38 <MMA7455_Read_Pitch+0x18>
	{
		MMA7455_sign = -1;
 8000e34:	23ff      	movs	r3, #255	; 0xff
 8000e36:	75fb      	strb	r3, [r7, #23]
	}
	MMA7455_pitch_denom = MMA7455_Read_10Bit_Y() * MMA7455_Read_10Bit_Y() + MMA7455_Read_10Bit_Z() * MMA7455_Read_10Bit_Z();
 8000e38:	f7ff ff2e 	bl	8000c98 <MMA7455_Read_10Bit_Y>
 8000e3c:	4603      	mov	r3, r0
 8000e3e:	461c      	mov	r4, r3
 8000e40:	f7ff ff2a 	bl	8000c98 <MMA7455_Read_10Bit_Y>
 8000e44:	4603      	mov	r3, r0
 8000e46:	fb03 f404 	mul.w	r4, r3, r4
 8000e4a:	f7ff ff87 	bl	8000d5c <MMA7455_Read_10Bit_Z>
 8000e4e:	4603      	mov	r3, r0
 8000e50:	461d      	mov	r5, r3
 8000e52:	f7ff ff83 	bl	8000d5c <MMA7455_Read_10Bit_Z>
 8000e56:	4603      	mov	r3, r0
 8000e58:	fb03 f305 	mul.w	r3, r3, r5
 8000e5c:	4423      	add	r3, r4
 8000e5e:	ee07 3a90 	vmov	s15, r3
 8000e62:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000e66:	edc7 7a04 	vstr	s15, [r7, #16]
	MMA7455_pitch_sqrt = sqrt(MMA7455_pitch_denom);
 8000e6a:	6938      	ldr	r0, [r7, #16]
 8000e6c:	f7ff fb12 	bl	8000494 <__aeabi_f2d>
 8000e70:	4602      	mov	r2, r0
 8000e72:	460b      	mov	r3, r1
 8000e74:	ec43 2b10 	vmov	d0, r2, r3
 8000e78:	f002 fb6e 	bl	8003558 <sqrt>
 8000e7c:	ec53 2b10 	vmov	r2, r3, d0
 8000e80:	4610      	mov	r0, r2
 8000e82:	4619      	mov	r1, r3
 8000e84:	f7ff fe0e 	bl	8000aa4 <__aeabi_d2f>
 8000e88:	4603      	mov	r3, r0
 8000e8a:	60fb      	str	r3, [r7, #12]
	MMA7455_pitch_num = MMA7455_Read_10Bit_X();
 8000e8c:	f7ff fea2 	bl	8000bd4 <MMA7455_Read_10Bit_X>
 8000e90:	4603      	mov	r3, r0
 8000e92:	ee07 3a90 	vmov	s15, r3
 8000e96:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000e9a:	edc7 7a02 	vstr	s15, [r7, #8]
	MMA7455_pitch = (atan2f(MMA7455_pitch_num, MMA7455_sign * MMA7455_pitch_sqrt) * 180) / PI;
 8000e9e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8000ea2:	ee07 3a90 	vmov	s15, r3
 8000ea6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000eaa:	edd7 7a03 	vldr	s15, [r7, #12]
 8000eae:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000eb2:	eef0 0a67 	vmov.f32	s1, s15
 8000eb6:	ed97 0a02 	vldr	s0, [r7, #8]
 8000eba:	f002 fb81 	bl	80035c0 <atan2f>
 8000ebe:	eef0 7a40 	vmov.f32	s15, s0
 8000ec2:	ed9f 7a09 	vldr	s14, [pc, #36]	; 8000ee8 <MMA7455_Read_Pitch+0xc8>
 8000ec6:	ee27 7a87 	vmul.f32	s14, s15, s14
 8000eca:	eddf 6a08 	vldr	s13, [pc, #32]	; 8000eec <MMA7455_Read_Pitch+0xcc>
 8000ece:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000ed2:	edc7 7a01 	vstr	s15, [r7, #4]
	return MMA7455_pitch;
 8000ed6:	687b      	ldr	r3, [r7, #4]
 8000ed8:	ee07 3a90 	vmov	s15, r3

}
 8000edc:	eeb0 0a67 	vmov.f32	s0, s15
 8000ee0:	3718      	adds	r7, #24
 8000ee2:	46bd      	mov	sp, r7
 8000ee4:	bdb0      	pop	{r4, r5, r7, pc}
 8000ee6:	bf00      	nop
 8000ee8:	43340000 	.word	0x43340000
 8000eec:	40490fdb 	.word	0x40490fdb

08000ef0 <MMA7455_Read_Roll>:
float MMA7455_Read_Roll(void)
{
 8000ef0:	b5b0      	push	{r4, r5, r7, lr}
 8000ef2:	b086      	sub	sp, #24
 8000ef4:	af00      	add	r7, sp, #0
	float MMA7455_roll_denom;
	float MMA7455_roll_sqrt;
	float MMA7455_roll;
	float MMA7455_roll_num;
	int8_t MMA7455_sign = 1;
 8000ef6:	2301      	movs	r3, #1
 8000ef8:	75fb      	strb	r3, [r7, #23]
	if (MMA7455_Read_10Bit_Z() < 0)
 8000efa:	f7ff ff2f 	bl	8000d5c <MMA7455_Read_10Bit_Z>
 8000efe:	4603      	mov	r3, r0
 8000f00:	2b00      	cmp	r3, #0
 8000f02:	da01      	bge.n	8000f08 <MMA7455_Read_Roll+0x18>
	{
		MMA7455_sign = -1;
 8000f04:	23ff      	movs	r3, #255	; 0xff
 8000f06:	75fb      	strb	r3, [r7, #23]
	}
	MMA7455_roll_denom = MMA7455_Read_10Bit_X() * MMA7455_Read_10Bit_X() + MMA7455_Read_10Bit_Z() * MMA7455_Read_10Bit_Z();
 8000f08:	f7ff fe64 	bl	8000bd4 <MMA7455_Read_10Bit_X>
 8000f0c:	4603      	mov	r3, r0
 8000f0e:	461c      	mov	r4, r3
 8000f10:	f7ff fe60 	bl	8000bd4 <MMA7455_Read_10Bit_X>
 8000f14:	4603      	mov	r3, r0
 8000f16:	fb03 f404 	mul.w	r4, r3, r4
 8000f1a:	f7ff ff1f 	bl	8000d5c <MMA7455_Read_10Bit_Z>
 8000f1e:	4603      	mov	r3, r0
 8000f20:	461d      	mov	r5, r3
 8000f22:	f7ff ff1b 	bl	8000d5c <MMA7455_Read_10Bit_Z>
 8000f26:	4603      	mov	r3, r0
 8000f28:	fb03 f305 	mul.w	r3, r3, r5
 8000f2c:	4423      	add	r3, r4
 8000f2e:	ee07 3a90 	vmov	s15, r3
 8000f32:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000f36:	edc7 7a04 	vstr	s15, [r7, #16]
	MMA7455_roll_sqrt = sqrt(MMA7455_roll_denom);
 8000f3a:	6938      	ldr	r0, [r7, #16]
 8000f3c:	f7ff faaa 	bl	8000494 <__aeabi_f2d>
 8000f40:	4602      	mov	r2, r0
 8000f42:	460b      	mov	r3, r1
 8000f44:	ec43 2b10 	vmov	d0, r2, r3
 8000f48:	f002 fb06 	bl	8003558 <sqrt>
 8000f4c:	ec53 2b10 	vmov	r2, r3, d0
 8000f50:	4610      	mov	r0, r2
 8000f52:	4619      	mov	r1, r3
 8000f54:	f7ff fda6 	bl	8000aa4 <__aeabi_d2f>
 8000f58:	4603      	mov	r3, r0
 8000f5a:	60fb      	str	r3, [r7, #12]
	MMA7455_roll_num = MMA7455_Read_10Bit_Y();
 8000f5c:	f7ff fe9c 	bl	8000c98 <MMA7455_Read_10Bit_Y>
 8000f60:	4603      	mov	r3, r0
 8000f62:	ee07 3a90 	vmov	s15, r3
 8000f66:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000f6a:	edc7 7a02 	vstr	s15, [r7, #8]
	MMA7455_roll = (atan2f(MMA7455_roll_num, MMA7455_sign * MMA7455_roll_sqrt) * 180) / PI;
 8000f6e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8000f72:	ee07 3a90 	vmov	s15, r3
 8000f76:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000f7a:	edd7 7a03 	vldr	s15, [r7, #12]
 8000f7e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000f82:	eef0 0a67 	vmov.f32	s1, s15
 8000f86:	ed97 0a02 	vldr	s0, [r7, #8]
 8000f8a:	f002 fb19 	bl	80035c0 <atan2f>
 8000f8e:	eef0 7a40 	vmov.f32	s15, s0
 8000f92:	ed9f 7a09 	vldr	s14, [pc, #36]	; 8000fb8 <MMA7455_Read_Roll+0xc8>
 8000f96:	ee27 7a87 	vmul.f32	s14, s15, s14
 8000f9a:	eddf 6a08 	vldr	s13, [pc, #32]	; 8000fbc <MMA7455_Read_Roll+0xcc>
 8000f9e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000fa2:	edc7 7a01 	vstr	s15, [r7, #4]
	return MMA7455_roll;
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	ee07 3a90 	vmov	s15, r3
}
 8000fac:	eeb0 0a67 	vmov.f32	s0, s15
 8000fb0:	3718      	adds	r7, #24
 8000fb2:	46bd      	mov	sp, r7
 8000fb4:	bdb0      	pop	{r4, r5, r7, pc}
 8000fb6:	bf00      	nop
 8000fb8:	43340000 	.word	0x43340000
 8000fbc:	40490fdb 	.word	0x40490fdb

08000fc0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000fc0:	b580      	push	{r7, lr}
 8000fc2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000fc4:	f000 fa1d 	bl	8001402 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000fc8:	f000 f85c 	bl	8001084 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000fcc:	f000 f8ea 	bl	80011a4 <MX_GPIO_Init>
  MX_SPI1_Init();
 8000fd0:	f000 f8aa 	bl	8001128 <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4,  GPIO_PIN_SET);
 8000fd4:	2201      	movs	r2, #1
 8000fd6:	2110      	movs	r1, #16
 8000fd8:	4821      	ldr	r0, [pc, #132]	; (8001060 <main+0xa0>)
 8000fda:	f000 fcfb 	bl	80019d4 <HAL_GPIO_WritePin>

  MMA7455_Init_8G();
 8000fde:	f7ff fdb1 	bl	8000b44 <MMA7455_Init_8G>
  HAL_Delay(1000);
 8000fe2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000fe6:	f000 fa81 	bl	80014ec <HAL_Delay>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  x_axis_8 = MMA7455_Read_10Bit_X();
 8000fea:	f7ff fdf3 	bl	8000bd4 <MMA7455_Read_10Bit_X>
 8000fee:	4603      	mov	r3, r0
 8000ff0:	b25a      	sxtb	r2, r3
 8000ff2:	4b1c      	ldr	r3, [pc, #112]	; (8001064 <main+0xa4>)
 8000ff4:	701a      	strb	r2, [r3, #0]
	  y_axis_8 = MMA7455_Read_10Bit_Y();
 8000ff6:	f7ff fe4f 	bl	8000c98 <MMA7455_Read_10Bit_Y>
 8000ffa:	4603      	mov	r3, r0
 8000ffc:	b25a      	sxtb	r2, r3
 8000ffe:	4b1a      	ldr	r3, [pc, #104]	; (8001068 <main+0xa8>)
 8001000:	701a      	strb	r2, [r3, #0]
	  z_axis_8 = MMA7455_Read_10Bit_Z();
 8001002:	f7ff feab 	bl	8000d5c <MMA7455_Read_10Bit_Z>
 8001006:	4603      	mov	r3, r0
 8001008:	b25a      	sxtb	r2, r3
 800100a:	4b18      	ldr	r3, [pc, #96]	; (800106c <main+0xac>)
 800100c:	701a      	strb	r2, [r3, #0]


	  x_axis_10 = MMA7455_Read_10Bit_X();
 800100e:	f7ff fde1 	bl	8000bd4 <MMA7455_Read_10Bit_X>
 8001012:	4603      	mov	r3, r0
 8001014:	461a      	mov	r2, r3
 8001016:	4b16      	ldr	r3, [pc, #88]	; (8001070 <main+0xb0>)
 8001018:	801a      	strh	r2, [r3, #0]
	  y_axis_10 = MMA7455_Read_10Bit_Y();
 800101a:	f7ff fe3d 	bl	8000c98 <MMA7455_Read_10Bit_Y>
 800101e:	4603      	mov	r3, r0
 8001020:	461a      	mov	r2, r3
 8001022:	4b14      	ldr	r3, [pc, #80]	; (8001074 <main+0xb4>)
 8001024:	801a      	strh	r2, [r3, #0]
	  z_axis_10 = MMA7455_Read_10Bit_Z();
 8001026:	f7ff fe99 	bl	8000d5c <MMA7455_Read_10Bit_Z>
 800102a:	4603      	mov	r3, r0
 800102c:	461a      	mov	r2, r3
 800102e:	4b12      	ldr	r3, [pc, #72]	; (8001078 <main+0xb8>)
 8001030:	801a      	strh	r2, [r3, #0]

	  pitch = MMA7455_Read_Pitch();
 8001032:	f7ff fef5 	bl	8000e20 <MMA7455_Read_Pitch>
 8001036:	eef0 7a40 	vmov.f32	s15, s0
 800103a:	4b10      	ldr	r3, [pc, #64]	; (800107c <main+0xbc>)
 800103c:	edc3 7a00 	vstr	s15, [r3]
	  roll = MMA7455_Read_Roll();
 8001040:	f7ff ff56 	bl	8000ef0 <MMA7455_Read_Roll>
 8001044:	eef0 7a40 	vmov.f32	s15, s0
 8001048:	4b0d      	ldr	r3, [pc, #52]	; (8001080 <main+0xc0>)
 800104a:	edc3 7a00 	vstr	s15, [r3]

	  HAL_GPIO_TogglePin (GPIOB, GPIO_PIN_5);
 800104e:	2120      	movs	r1, #32
 8001050:	4803      	ldr	r0, [pc, #12]	; (8001060 <main+0xa0>)
 8001052:	f000 fcd7 	bl	8001a04 <HAL_GPIO_TogglePin>
	  HAL_Delay(10);
 8001056:	200a      	movs	r0, #10
 8001058:	f000 fa48 	bl	80014ec <HAL_Delay>
	  x_axis_8 = MMA7455_Read_10Bit_X();
 800105c:	e7c5      	b.n	8000fea <main+0x2a>
 800105e:	bf00      	nop
 8001060:	48000400 	.word	0x48000400
 8001064:	200000ae 	.word	0x200000ae
 8001068:	200000a4 	.word	0x200000a4
 800106c:	200000aa 	.word	0x200000aa
 8001070:	200000a8 	.word	0x200000a8
 8001074:	200000a6 	.word	0x200000a6
 8001078:	200000ac 	.word	0x200000ac
 800107c:	20000114 	.word	0x20000114
 8001080:	20000118 	.word	0x20000118

08001084 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001084:	b580      	push	{r7, lr}
 8001086:	b096      	sub	sp, #88	; 0x58
 8001088:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800108a:	f107 0314 	add.w	r3, r7, #20
 800108e:	2244      	movs	r2, #68	; 0x44
 8001090:	2100      	movs	r1, #0
 8001092:	4618      	mov	r0, r3
 8001094:	f002 fa58 	bl	8003548 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001098:	463b      	mov	r3, r7
 800109a:	2200      	movs	r2, #0
 800109c:	601a      	str	r2, [r3, #0]
 800109e:	605a      	str	r2, [r3, #4]
 80010a0:	609a      	str	r2, [r3, #8]
 80010a2:	60da      	str	r2, [r3, #12]
 80010a4:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 80010a6:	2310      	movs	r3, #16
 80010a8:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80010aa:	2301      	movs	r3, #1
 80010ac:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 80010ae:	2300      	movs	r3, #0
 80010b0:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 80010b2:	2360      	movs	r3, #96	; 0x60
 80010b4:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80010b6:	2302      	movs	r3, #2
 80010b8:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 80010ba:	2301      	movs	r3, #1
 80010bc:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 80010be:	2301      	movs	r3, #1
 80010c0:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 16;
 80010c2:	2310      	movs	r3, #16
 80010c4:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 80010c6:	2307      	movs	r3, #7
 80010c8:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80010ca:	2302      	movs	r3, #2
 80010cc:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80010ce:	2302      	movs	r3, #2
 80010d0:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80010d2:	f107 0314 	add.w	r3, r7, #20
 80010d6:	4618      	mov	r0, r3
 80010d8:	f000 fd12 	bl	8001b00 <HAL_RCC_OscConfig>
 80010dc:	4603      	mov	r3, r0
 80010de:	2b00      	cmp	r3, #0
 80010e0:	d001      	beq.n	80010e6 <SystemClock_Config+0x62>
  {
    Error_Handler();
 80010e2:	f000 f89d 	bl	8001220 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80010e6:	230f      	movs	r3, #15
 80010e8:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80010ea:	2303      	movs	r3, #3
 80010ec:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80010ee:	2300      	movs	r3, #0
 80010f0:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80010f2:	2300      	movs	r3, #0
 80010f4:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80010f6:	2300      	movs	r3, #0
 80010f8:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80010fa:	463b      	mov	r3, r7
 80010fc:	2101      	movs	r1, #1
 80010fe:	4618      	mov	r0, r3
 8001100:	f001 f91e 	bl	8002340 <HAL_RCC_ClockConfig>
 8001104:	4603      	mov	r3, r0
 8001106:	2b00      	cmp	r3, #0
 8001108:	d001      	beq.n	800110e <SystemClock_Config+0x8a>
  {
    Error_Handler();
 800110a:	f000 f889 	bl	8001220 <Error_Handler>
  }
  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800110e:	f44f 7000 	mov.w	r0, #512	; 0x200
 8001112:	f000 fc9f 	bl	8001a54 <HAL_PWREx_ControlVoltageScaling>
 8001116:	4603      	mov	r3, r0
 8001118:	2b00      	cmp	r3, #0
 800111a:	d001      	beq.n	8001120 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 800111c:	f000 f880 	bl	8001220 <Error_Handler>
  }
}
 8001120:	bf00      	nop
 8001122:	3758      	adds	r7, #88	; 0x58
 8001124:	46bd      	mov	sp, r7
 8001126:	bd80      	pop	{r7, pc}

08001128 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001128:	b580      	push	{r7, lr}
 800112a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 800112c:	4b1b      	ldr	r3, [pc, #108]	; (800119c <MX_SPI1_Init+0x74>)
 800112e:	4a1c      	ldr	r2, [pc, #112]	; (80011a0 <MX_SPI1_Init+0x78>)
 8001130:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001132:	4b1a      	ldr	r3, [pc, #104]	; (800119c <MX_SPI1_Init+0x74>)
 8001134:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001138:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800113a:	4b18      	ldr	r3, [pc, #96]	; (800119c <MX_SPI1_Init+0x74>)
 800113c:	2200      	movs	r2, #0
 800113e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001140:	4b16      	ldr	r3, [pc, #88]	; (800119c <MX_SPI1_Init+0x74>)
 8001142:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8001146:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001148:	4b14      	ldr	r3, [pc, #80]	; (800119c <MX_SPI1_Init+0x74>)
 800114a:	2200      	movs	r2, #0
 800114c:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800114e:	4b13      	ldr	r3, [pc, #76]	; (800119c <MX_SPI1_Init+0x74>)
 8001150:	2200      	movs	r2, #0
 8001152:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001154:	4b11      	ldr	r3, [pc, #68]	; (800119c <MX_SPI1_Init+0x74>)
 8001156:	f44f 7200 	mov.w	r2, #512	; 0x200
 800115a:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 800115c:	4b0f      	ldr	r3, [pc, #60]	; (800119c <MX_SPI1_Init+0x74>)
 800115e:	2208      	movs	r2, #8
 8001160:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001162:	4b0e      	ldr	r3, [pc, #56]	; (800119c <MX_SPI1_Init+0x74>)
 8001164:	2200      	movs	r2, #0
 8001166:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001168:	4b0c      	ldr	r3, [pc, #48]	; (800119c <MX_SPI1_Init+0x74>)
 800116a:	2200      	movs	r2, #0
 800116c:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800116e:	4b0b      	ldr	r3, [pc, #44]	; (800119c <MX_SPI1_Init+0x74>)
 8001170:	2200      	movs	r2, #0
 8001172:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8001174:	4b09      	ldr	r3, [pc, #36]	; (800119c <MX_SPI1_Init+0x74>)
 8001176:	2207      	movs	r2, #7
 8001178:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800117a:	4b08      	ldr	r3, [pc, #32]	; (800119c <MX_SPI1_Init+0x74>)
 800117c:	2200      	movs	r2, #0
 800117e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001180:	4b06      	ldr	r3, [pc, #24]	; (800119c <MX_SPI1_Init+0x74>)
 8001182:	2208      	movs	r2, #8
 8001184:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001186:	4805      	ldr	r0, [pc, #20]	; (800119c <MX_SPI1_Init+0x74>)
 8001188:	f001 faa8 	bl	80026dc <HAL_SPI_Init>
 800118c:	4603      	mov	r3, r0
 800118e:	2b00      	cmp	r3, #0
 8001190:	d001      	beq.n	8001196 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8001192:	f000 f845 	bl	8001220 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001196:	bf00      	nop
 8001198:	bd80      	pop	{r7, pc}
 800119a:	bf00      	nop
 800119c:	200000b0 	.word	0x200000b0
 80011a0:	40013000 	.word	0x40013000

080011a4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80011a4:	b580      	push	{r7, lr}
 80011a6:	b088      	sub	sp, #32
 80011a8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011aa:	f107 030c 	add.w	r3, r7, #12
 80011ae:	2200      	movs	r2, #0
 80011b0:	601a      	str	r2, [r3, #0]
 80011b2:	605a      	str	r2, [r3, #4]
 80011b4:	609a      	str	r2, [r3, #8]
 80011b6:	60da      	str	r2, [r3, #12]
 80011b8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80011ba:	4b17      	ldr	r3, [pc, #92]	; (8001218 <MX_GPIO_Init+0x74>)
 80011bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80011be:	4a16      	ldr	r2, [pc, #88]	; (8001218 <MX_GPIO_Init+0x74>)
 80011c0:	f043 0301 	orr.w	r3, r3, #1
 80011c4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80011c6:	4b14      	ldr	r3, [pc, #80]	; (8001218 <MX_GPIO_Init+0x74>)
 80011c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80011ca:	f003 0301 	and.w	r3, r3, #1
 80011ce:	60bb      	str	r3, [r7, #8]
 80011d0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80011d2:	4b11      	ldr	r3, [pc, #68]	; (8001218 <MX_GPIO_Init+0x74>)
 80011d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80011d6:	4a10      	ldr	r2, [pc, #64]	; (8001218 <MX_GPIO_Init+0x74>)
 80011d8:	f043 0302 	orr.w	r3, r3, #2
 80011dc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80011de:	4b0e      	ldr	r3, [pc, #56]	; (8001218 <MX_GPIO_Init+0x74>)
 80011e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80011e2:	f003 0302 	and.w	r3, r3, #2
 80011e6:	607b      	str	r3, [r7, #4]
 80011e8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4|GPIO_PIN_5, GPIO_PIN_RESET);
 80011ea:	2200      	movs	r2, #0
 80011ec:	2130      	movs	r1, #48	; 0x30
 80011ee:	480b      	ldr	r0, [pc, #44]	; (800121c <MX_GPIO_Init+0x78>)
 80011f0:	f000 fbf0 	bl	80019d4 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PB4 PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 80011f4:	2330      	movs	r3, #48	; 0x30
 80011f6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011f8:	2301      	movs	r3, #1
 80011fa:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011fc:	2300      	movs	r3, #0
 80011fe:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001200:	2300      	movs	r3, #0
 8001202:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001204:	f107 030c 	add.w	r3, r7, #12
 8001208:	4619      	mov	r1, r3
 800120a:	4804      	ldr	r0, [pc, #16]	; (800121c <MX_GPIO_Init+0x78>)
 800120c:	f000 fa78 	bl	8001700 <HAL_GPIO_Init>

}
 8001210:	bf00      	nop
 8001212:	3720      	adds	r7, #32
 8001214:	46bd      	mov	sp, r7
 8001216:	bd80      	pop	{r7, pc}
 8001218:	40021000 	.word	0x40021000
 800121c:	48000400 	.word	0x48000400

08001220 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001220:	b480      	push	{r7}
 8001222:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001224:	b672      	cpsid	i
}
 8001226:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001228:	e7fe      	b.n	8001228 <Error_Handler+0x8>
	...

0800122c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800122c:	b480      	push	{r7}
 800122e:	b083      	sub	sp, #12
 8001230:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001232:	4b0f      	ldr	r3, [pc, #60]	; (8001270 <HAL_MspInit+0x44>)
 8001234:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001236:	4a0e      	ldr	r2, [pc, #56]	; (8001270 <HAL_MspInit+0x44>)
 8001238:	f043 0301 	orr.w	r3, r3, #1
 800123c:	6613      	str	r3, [r2, #96]	; 0x60
 800123e:	4b0c      	ldr	r3, [pc, #48]	; (8001270 <HAL_MspInit+0x44>)
 8001240:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001242:	f003 0301 	and.w	r3, r3, #1
 8001246:	607b      	str	r3, [r7, #4]
 8001248:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800124a:	4b09      	ldr	r3, [pc, #36]	; (8001270 <HAL_MspInit+0x44>)
 800124c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800124e:	4a08      	ldr	r2, [pc, #32]	; (8001270 <HAL_MspInit+0x44>)
 8001250:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001254:	6593      	str	r3, [r2, #88]	; 0x58
 8001256:	4b06      	ldr	r3, [pc, #24]	; (8001270 <HAL_MspInit+0x44>)
 8001258:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800125a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800125e:	603b      	str	r3, [r7, #0]
 8001260:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001262:	bf00      	nop
 8001264:	370c      	adds	r7, #12
 8001266:	46bd      	mov	sp, r7
 8001268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800126c:	4770      	bx	lr
 800126e:	bf00      	nop
 8001270:	40021000 	.word	0x40021000

08001274 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001274:	b580      	push	{r7, lr}
 8001276:	b08a      	sub	sp, #40	; 0x28
 8001278:	af00      	add	r7, sp, #0
 800127a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800127c:	f107 0314 	add.w	r3, r7, #20
 8001280:	2200      	movs	r2, #0
 8001282:	601a      	str	r2, [r3, #0]
 8001284:	605a      	str	r2, [r3, #4]
 8001286:	609a      	str	r2, [r3, #8]
 8001288:	60da      	str	r2, [r3, #12]
 800128a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	681b      	ldr	r3, [r3, #0]
 8001290:	4a17      	ldr	r2, [pc, #92]	; (80012f0 <HAL_SPI_MspInit+0x7c>)
 8001292:	4293      	cmp	r3, r2
 8001294:	d128      	bne.n	80012e8 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001296:	4b17      	ldr	r3, [pc, #92]	; (80012f4 <HAL_SPI_MspInit+0x80>)
 8001298:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800129a:	4a16      	ldr	r2, [pc, #88]	; (80012f4 <HAL_SPI_MspInit+0x80>)
 800129c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80012a0:	6613      	str	r3, [r2, #96]	; 0x60
 80012a2:	4b14      	ldr	r3, [pc, #80]	; (80012f4 <HAL_SPI_MspInit+0x80>)
 80012a4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80012a6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80012aa:	613b      	str	r3, [r7, #16]
 80012ac:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80012ae:	4b11      	ldr	r3, [pc, #68]	; (80012f4 <HAL_SPI_MspInit+0x80>)
 80012b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80012b2:	4a10      	ldr	r2, [pc, #64]	; (80012f4 <HAL_SPI_MspInit+0x80>)
 80012b4:	f043 0301 	orr.w	r3, r3, #1
 80012b8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80012ba:	4b0e      	ldr	r3, [pc, #56]	; (80012f4 <HAL_SPI_MspInit+0x80>)
 80012bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80012be:	f003 0301 	and.w	r3, r3, #1
 80012c2:	60fb      	str	r3, [r7, #12]
 80012c4:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA1     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_6|GPIO_PIN_7;
 80012c6:	23c2      	movs	r3, #194	; 0xc2
 80012c8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012ca:	2302      	movs	r3, #2
 80012cc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012ce:	2300      	movs	r3, #0
 80012d0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80012d2:	2303      	movs	r3, #3
 80012d4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80012d6:	2305      	movs	r3, #5
 80012d8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012da:	f107 0314 	add.w	r3, r7, #20
 80012de:	4619      	mov	r1, r3
 80012e0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80012e4:	f000 fa0c 	bl	8001700 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 80012e8:	bf00      	nop
 80012ea:	3728      	adds	r7, #40	; 0x28
 80012ec:	46bd      	mov	sp, r7
 80012ee:	bd80      	pop	{r7, pc}
 80012f0:	40013000 	.word	0x40013000
 80012f4:	40021000 	.word	0x40021000

080012f8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80012f8:	b480      	push	{r7}
 80012fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80012fc:	e7fe      	b.n	80012fc <NMI_Handler+0x4>

080012fe <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80012fe:	b480      	push	{r7}
 8001300:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001302:	e7fe      	b.n	8001302 <HardFault_Handler+0x4>

08001304 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001304:	b480      	push	{r7}
 8001306:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001308:	e7fe      	b.n	8001308 <MemManage_Handler+0x4>

0800130a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800130a:	b480      	push	{r7}
 800130c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800130e:	e7fe      	b.n	800130e <BusFault_Handler+0x4>

08001310 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001310:	b480      	push	{r7}
 8001312:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001314:	e7fe      	b.n	8001314 <UsageFault_Handler+0x4>

08001316 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001316:	b480      	push	{r7}
 8001318:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800131a:	bf00      	nop
 800131c:	46bd      	mov	sp, r7
 800131e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001322:	4770      	bx	lr

08001324 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001324:	b480      	push	{r7}
 8001326:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001328:	bf00      	nop
 800132a:	46bd      	mov	sp, r7
 800132c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001330:	4770      	bx	lr

08001332 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001332:	b480      	push	{r7}
 8001334:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001336:	bf00      	nop
 8001338:	46bd      	mov	sp, r7
 800133a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800133e:	4770      	bx	lr

08001340 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001340:	b580      	push	{r7, lr}
 8001342:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001344:	f000 f8b2 	bl	80014ac <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001348:	bf00      	nop
 800134a:	bd80      	pop	{r7, pc}

0800134c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 800134c:	b480      	push	{r7}
 800134e:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001350:	4b15      	ldr	r3, [pc, #84]	; (80013a8 <SystemInit+0x5c>)
 8001352:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001356:	4a14      	ldr	r2, [pc, #80]	; (80013a8 <SystemInit+0x5c>)
 8001358:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800135c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8001360:	4b12      	ldr	r3, [pc, #72]	; (80013ac <SystemInit+0x60>)
 8001362:	681b      	ldr	r3, [r3, #0]
 8001364:	4a11      	ldr	r2, [pc, #68]	; (80013ac <SystemInit+0x60>)
 8001366:	f043 0301 	orr.w	r3, r3, #1
 800136a:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 800136c:	4b0f      	ldr	r3, [pc, #60]	; (80013ac <SystemInit+0x60>)
 800136e:	2200      	movs	r2, #0
 8001370:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 8001372:	4b0e      	ldr	r3, [pc, #56]	; (80013ac <SystemInit+0x60>)
 8001374:	681b      	ldr	r3, [r3, #0]
 8001376:	4a0d      	ldr	r2, [pc, #52]	; (80013ac <SystemInit+0x60>)
 8001378:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 800137c:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 8001380:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 8001382:	4b0a      	ldr	r3, [pc, #40]	; (80013ac <SystemInit+0x60>)
 8001384:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001388:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800138a:	4b08      	ldr	r3, [pc, #32]	; (80013ac <SystemInit+0x60>)
 800138c:	681b      	ldr	r3, [r3, #0]
 800138e:	4a07      	ldr	r2, [pc, #28]	; (80013ac <SystemInit+0x60>)
 8001390:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001394:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 8001396:	4b05      	ldr	r3, [pc, #20]	; (80013ac <SystemInit+0x60>)
 8001398:	2200      	movs	r2, #0
 800139a:	619a      	str	r2, [r3, #24]
}
 800139c:	bf00      	nop
 800139e:	46bd      	mov	sp, r7
 80013a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013a4:	4770      	bx	lr
 80013a6:	bf00      	nop
 80013a8:	e000ed00 	.word	0xe000ed00
 80013ac:	40021000 	.word	0x40021000

080013b0 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80013b0:	f8df d034 	ldr.w	sp, [pc, #52]	; 80013e8 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80013b4:	f7ff ffca 	bl	800134c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 80013b8:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 80013ba:	e003      	b.n	80013c4 <LoopCopyDataInit>

080013bc <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 80013bc:	4b0b      	ldr	r3, [pc, #44]	; (80013ec <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 80013be:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 80013c0:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 80013c2:	3104      	adds	r1, #4

080013c4 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 80013c4:	480a      	ldr	r0, [pc, #40]	; (80013f0 <LoopForever+0xa>)
	ldr	r3, =_edata
 80013c6:	4b0b      	ldr	r3, [pc, #44]	; (80013f4 <LoopForever+0xe>)
	adds	r2, r0, r1
 80013c8:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 80013ca:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 80013cc:	d3f6      	bcc.n	80013bc <CopyDataInit>
	ldr	r2, =_sbss
 80013ce:	4a0a      	ldr	r2, [pc, #40]	; (80013f8 <LoopForever+0x12>)
	b	LoopFillZerobss
 80013d0:	e002      	b.n	80013d8 <LoopFillZerobss>

080013d2 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 80013d2:	2300      	movs	r3, #0
	str	r3, [r2], #4
 80013d4:	f842 3b04 	str.w	r3, [r2], #4

080013d8 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 80013d8:	4b08      	ldr	r3, [pc, #32]	; (80013fc <LoopForever+0x16>)
	cmp	r2, r3
 80013da:	429a      	cmp	r2, r3
	bcc	FillZerobss
 80013dc:	d3f9      	bcc.n	80013d2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80013de:	f002 f88f 	bl	8003500 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80013e2:	f7ff fded 	bl	8000fc0 <main>

080013e6 <LoopForever>:

LoopForever:
    b LoopForever
 80013e6:	e7fe      	b.n	80013e6 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80013e8:	20010000 	.word	0x20010000
	ldr	r3, =_sidata
 80013ec:	08003abc 	.word	0x08003abc
	ldr	r0, =_sdata
 80013f0:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 80013f4:	20000078 	.word	0x20000078
	ldr	r2, =_sbss
 80013f8:	20000078 	.word	0x20000078
	ldr	r3, = _ebss
 80013fc:	20000120 	.word	0x20000120

08001400 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001400:	e7fe      	b.n	8001400 <ADC1_IRQHandler>

08001402 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001402:	b580      	push	{r7, lr}
 8001404:	b082      	sub	sp, #8
 8001406:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001408:	2300      	movs	r3, #0
 800140a:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800140c:	2003      	movs	r0, #3
 800140e:	f000 f943 	bl	8001698 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001412:	2000      	movs	r0, #0
 8001414:	f000 f80e 	bl	8001434 <HAL_InitTick>
 8001418:	4603      	mov	r3, r0
 800141a:	2b00      	cmp	r3, #0
 800141c:	d002      	beq.n	8001424 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800141e:	2301      	movs	r3, #1
 8001420:	71fb      	strb	r3, [r7, #7]
 8001422:	e001      	b.n	8001428 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001424:	f7ff ff02 	bl	800122c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001428:	79fb      	ldrb	r3, [r7, #7]
}
 800142a:	4618      	mov	r0, r3
 800142c:	3708      	adds	r7, #8
 800142e:	46bd      	mov	sp, r7
 8001430:	bd80      	pop	{r7, pc}
	...

08001434 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001434:	b580      	push	{r7, lr}
 8001436:	b084      	sub	sp, #16
 8001438:	af00      	add	r7, sp, #0
 800143a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 800143c:	2300      	movs	r3, #0
 800143e:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8001440:	4b17      	ldr	r3, [pc, #92]	; (80014a0 <HAL_InitTick+0x6c>)
 8001442:	781b      	ldrb	r3, [r3, #0]
 8001444:	2b00      	cmp	r3, #0
 8001446:	d023      	beq.n	8001490 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001448:	4b16      	ldr	r3, [pc, #88]	; (80014a4 <HAL_InitTick+0x70>)
 800144a:	681a      	ldr	r2, [r3, #0]
 800144c:	4b14      	ldr	r3, [pc, #80]	; (80014a0 <HAL_InitTick+0x6c>)
 800144e:	781b      	ldrb	r3, [r3, #0]
 8001450:	4619      	mov	r1, r3
 8001452:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001456:	fbb3 f3f1 	udiv	r3, r3, r1
 800145a:	fbb2 f3f3 	udiv	r3, r2, r3
 800145e:	4618      	mov	r0, r3
 8001460:	f000 f941 	bl	80016e6 <HAL_SYSTICK_Config>
 8001464:	4603      	mov	r3, r0
 8001466:	2b00      	cmp	r3, #0
 8001468:	d10f      	bne.n	800148a <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	2b0f      	cmp	r3, #15
 800146e:	d809      	bhi.n	8001484 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001470:	2200      	movs	r2, #0
 8001472:	6879      	ldr	r1, [r7, #4]
 8001474:	f04f 30ff 	mov.w	r0, #4294967295
 8001478:	f000 f919 	bl	80016ae <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800147c:	4a0a      	ldr	r2, [pc, #40]	; (80014a8 <HAL_InitTick+0x74>)
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	6013      	str	r3, [r2, #0]
 8001482:	e007      	b.n	8001494 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8001484:	2301      	movs	r3, #1
 8001486:	73fb      	strb	r3, [r7, #15]
 8001488:	e004      	b.n	8001494 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 800148a:	2301      	movs	r3, #1
 800148c:	73fb      	strb	r3, [r7, #15]
 800148e:	e001      	b.n	8001494 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001490:	2301      	movs	r3, #1
 8001492:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001494:	7bfb      	ldrb	r3, [r7, #15]
}
 8001496:	4618      	mov	r0, r3
 8001498:	3710      	adds	r7, #16
 800149a:	46bd      	mov	sp, r7
 800149c:	bd80      	pop	{r7, pc}
 800149e:	bf00      	nop
 80014a0:	2000000c 	.word	0x2000000c
 80014a4:	20000004 	.word	0x20000004
 80014a8:	20000008 	.word	0x20000008

080014ac <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80014ac:	b480      	push	{r7}
 80014ae:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80014b0:	4b06      	ldr	r3, [pc, #24]	; (80014cc <HAL_IncTick+0x20>)
 80014b2:	781b      	ldrb	r3, [r3, #0]
 80014b4:	461a      	mov	r2, r3
 80014b6:	4b06      	ldr	r3, [pc, #24]	; (80014d0 <HAL_IncTick+0x24>)
 80014b8:	681b      	ldr	r3, [r3, #0]
 80014ba:	4413      	add	r3, r2
 80014bc:	4a04      	ldr	r2, [pc, #16]	; (80014d0 <HAL_IncTick+0x24>)
 80014be:	6013      	str	r3, [r2, #0]
}
 80014c0:	bf00      	nop
 80014c2:	46bd      	mov	sp, r7
 80014c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014c8:	4770      	bx	lr
 80014ca:	bf00      	nop
 80014cc:	2000000c 	.word	0x2000000c
 80014d0:	2000011c 	.word	0x2000011c

080014d4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80014d4:	b480      	push	{r7}
 80014d6:	af00      	add	r7, sp, #0
  return uwTick;
 80014d8:	4b03      	ldr	r3, [pc, #12]	; (80014e8 <HAL_GetTick+0x14>)
 80014da:	681b      	ldr	r3, [r3, #0]
}
 80014dc:	4618      	mov	r0, r3
 80014de:	46bd      	mov	sp, r7
 80014e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014e4:	4770      	bx	lr
 80014e6:	bf00      	nop
 80014e8:	2000011c 	.word	0x2000011c

080014ec <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80014ec:	b580      	push	{r7, lr}
 80014ee:	b084      	sub	sp, #16
 80014f0:	af00      	add	r7, sp, #0
 80014f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80014f4:	f7ff ffee 	bl	80014d4 <HAL_GetTick>
 80014f8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 80014fe:	68fb      	ldr	r3, [r7, #12]
 8001500:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001504:	d005      	beq.n	8001512 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8001506:	4b0a      	ldr	r3, [pc, #40]	; (8001530 <HAL_Delay+0x44>)
 8001508:	781b      	ldrb	r3, [r3, #0]
 800150a:	461a      	mov	r2, r3
 800150c:	68fb      	ldr	r3, [r7, #12]
 800150e:	4413      	add	r3, r2
 8001510:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001512:	bf00      	nop
 8001514:	f7ff ffde 	bl	80014d4 <HAL_GetTick>
 8001518:	4602      	mov	r2, r0
 800151a:	68bb      	ldr	r3, [r7, #8]
 800151c:	1ad3      	subs	r3, r2, r3
 800151e:	68fa      	ldr	r2, [r7, #12]
 8001520:	429a      	cmp	r2, r3
 8001522:	d8f7      	bhi.n	8001514 <HAL_Delay+0x28>
  {
  }
}
 8001524:	bf00      	nop
 8001526:	bf00      	nop
 8001528:	3710      	adds	r7, #16
 800152a:	46bd      	mov	sp, r7
 800152c:	bd80      	pop	{r7, pc}
 800152e:	bf00      	nop
 8001530:	2000000c 	.word	0x2000000c

08001534 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001534:	b480      	push	{r7}
 8001536:	b085      	sub	sp, #20
 8001538:	af00      	add	r7, sp, #0
 800153a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	f003 0307 	and.w	r3, r3, #7
 8001542:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001544:	4b0c      	ldr	r3, [pc, #48]	; (8001578 <__NVIC_SetPriorityGrouping+0x44>)
 8001546:	68db      	ldr	r3, [r3, #12]
 8001548:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800154a:	68ba      	ldr	r2, [r7, #8]
 800154c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001550:	4013      	ands	r3, r2
 8001552:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001554:	68fb      	ldr	r3, [r7, #12]
 8001556:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001558:	68bb      	ldr	r3, [r7, #8]
 800155a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800155c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001560:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001564:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001566:	4a04      	ldr	r2, [pc, #16]	; (8001578 <__NVIC_SetPriorityGrouping+0x44>)
 8001568:	68bb      	ldr	r3, [r7, #8]
 800156a:	60d3      	str	r3, [r2, #12]
}
 800156c:	bf00      	nop
 800156e:	3714      	adds	r7, #20
 8001570:	46bd      	mov	sp, r7
 8001572:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001576:	4770      	bx	lr
 8001578:	e000ed00 	.word	0xe000ed00

0800157c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800157c:	b480      	push	{r7}
 800157e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001580:	4b04      	ldr	r3, [pc, #16]	; (8001594 <__NVIC_GetPriorityGrouping+0x18>)
 8001582:	68db      	ldr	r3, [r3, #12]
 8001584:	0a1b      	lsrs	r3, r3, #8
 8001586:	f003 0307 	and.w	r3, r3, #7
}
 800158a:	4618      	mov	r0, r3
 800158c:	46bd      	mov	sp, r7
 800158e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001592:	4770      	bx	lr
 8001594:	e000ed00 	.word	0xe000ed00

08001598 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001598:	b480      	push	{r7}
 800159a:	b083      	sub	sp, #12
 800159c:	af00      	add	r7, sp, #0
 800159e:	4603      	mov	r3, r0
 80015a0:	6039      	str	r1, [r7, #0]
 80015a2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80015a4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015a8:	2b00      	cmp	r3, #0
 80015aa:	db0a      	blt.n	80015c2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80015ac:	683b      	ldr	r3, [r7, #0]
 80015ae:	b2da      	uxtb	r2, r3
 80015b0:	490c      	ldr	r1, [pc, #48]	; (80015e4 <__NVIC_SetPriority+0x4c>)
 80015b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015b6:	0112      	lsls	r2, r2, #4
 80015b8:	b2d2      	uxtb	r2, r2
 80015ba:	440b      	add	r3, r1
 80015bc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80015c0:	e00a      	b.n	80015d8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80015c2:	683b      	ldr	r3, [r7, #0]
 80015c4:	b2da      	uxtb	r2, r3
 80015c6:	4908      	ldr	r1, [pc, #32]	; (80015e8 <__NVIC_SetPriority+0x50>)
 80015c8:	79fb      	ldrb	r3, [r7, #7]
 80015ca:	f003 030f 	and.w	r3, r3, #15
 80015ce:	3b04      	subs	r3, #4
 80015d0:	0112      	lsls	r2, r2, #4
 80015d2:	b2d2      	uxtb	r2, r2
 80015d4:	440b      	add	r3, r1
 80015d6:	761a      	strb	r2, [r3, #24]
}
 80015d8:	bf00      	nop
 80015da:	370c      	adds	r7, #12
 80015dc:	46bd      	mov	sp, r7
 80015de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015e2:	4770      	bx	lr
 80015e4:	e000e100 	.word	0xe000e100
 80015e8:	e000ed00 	.word	0xe000ed00

080015ec <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80015ec:	b480      	push	{r7}
 80015ee:	b089      	sub	sp, #36	; 0x24
 80015f0:	af00      	add	r7, sp, #0
 80015f2:	60f8      	str	r0, [r7, #12]
 80015f4:	60b9      	str	r1, [r7, #8]
 80015f6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80015f8:	68fb      	ldr	r3, [r7, #12]
 80015fa:	f003 0307 	and.w	r3, r3, #7
 80015fe:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001600:	69fb      	ldr	r3, [r7, #28]
 8001602:	f1c3 0307 	rsb	r3, r3, #7
 8001606:	2b04      	cmp	r3, #4
 8001608:	bf28      	it	cs
 800160a:	2304      	movcs	r3, #4
 800160c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800160e:	69fb      	ldr	r3, [r7, #28]
 8001610:	3304      	adds	r3, #4
 8001612:	2b06      	cmp	r3, #6
 8001614:	d902      	bls.n	800161c <NVIC_EncodePriority+0x30>
 8001616:	69fb      	ldr	r3, [r7, #28]
 8001618:	3b03      	subs	r3, #3
 800161a:	e000      	b.n	800161e <NVIC_EncodePriority+0x32>
 800161c:	2300      	movs	r3, #0
 800161e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001620:	f04f 32ff 	mov.w	r2, #4294967295
 8001624:	69bb      	ldr	r3, [r7, #24]
 8001626:	fa02 f303 	lsl.w	r3, r2, r3
 800162a:	43da      	mvns	r2, r3
 800162c:	68bb      	ldr	r3, [r7, #8]
 800162e:	401a      	ands	r2, r3
 8001630:	697b      	ldr	r3, [r7, #20]
 8001632:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001634:	f04f 31ff 	mov.w	r1, #4294967295
 8001638:	697b      	ldr	r3, [r7, #20]
 800163a:	fa01 f303 	lsl.w	r3, r1, r3
 800163e:	43d9      	mvns	r1, r3
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001644:	4313      	orrs	r3, r2
         );
}
 8001646:	4618      	mov	r0, r3
 8001648:	3724      	adds	r7, #36	; 0x24
 800164a:	46bd      	mov	sp, r7
 800164c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001650:	4770      	bx	lr
	...

08001654 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001654:	b580      	push	{r7, lr}
 8001656:	b082      	sub	sp, #8
 8001658:	af00      	add	r7, sp, #0
 800165a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	3b01      	subs	r3, #1
 8001660:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001664:	d301      	bcc.n	800166a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001666:	2301      	movs	r3, #1
 8001668:	e00f      	b.n	800168a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800166a:	4a0a      	ldr	r2, [pc, #40]	; (8001694 <SysTick_Config+0x40>)
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	3b01      	subs	r3, #1
 8001670:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001672:	210f      	movs	r1, #15
 8001674:	f04f 30ff 	mov.w	r0, #4294967295
 8001678:	f7ff ff8e 	bl	8001598 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800167c:	4b05      	ldr	r3, [pc, #20]	; (8001694 <SysTick_Config+0x40>)
 800167e:	2200      	movs	r2, #0
 8001680:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001682:	4b04      	ldr	r3, [pc, #16]	; (8001694 <SysTick_Config+0x40>)
 8001684:	2207      	movs	r2, #7
 8001686:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001688:	2300      	movs	r3, #0
}
 800168a:	4618      	mov	r0, r3
 800168c:	3708      	adds	r7, #8
 800168e:	46bd      	mov	sp, r7
 8001690:	bd80      	pop	{r7, pc}
 8001692:	bf00      	nop
 8001694:	e000e010 	.word	0xe000e010

08001698 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001698:	b580      	push	{r7, lr}
 800169a:	b082      	sub	sp, #8
 800169c:	af00      	add	r7, sp, #0
 800169e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80016a0:	6878      	ldr	r0, [r7, #4]
 80016a2:	f7ff ff47 	bl	8001534 <__NVIC_SetPriorityGrouping>
}
 80016a6:	bf00      	nop
 80016a8:	3708      	adds	r7, #8
 80016aa:	46bd      	mov	sp, r7
 80016ac:	bd80      	pop	{r7, pc}

080016ae <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80016ae:	b580      	push	{r7, lr}
 80016b0:	b086      	sub	sp, #24
 80016b2:	af00      	add	r7, sp, #0
 80016b4:	4603      	mov	r3, r0
 80016b6:	60b9      	str	r1, [r7, #8]
 80016b8:	607a      	str	r2, [r7, #4]
 80016ba:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80016bc:	2300      	movs	r3, #0
 80016be:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80016c0:	f7ff ff5c 	bl	800157c <__NVIC_GetPriorityGrouping>
 80016c4:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80016c6:	687a      	ldr	r2, [r7, #4]
 80016c8:	68b9      	ldr	r1, [r7, #8]
 80016ca:	6978      	ldr	r0, [r7, #20]
 80016cc:	f7ff ff8e 	bl	80015ec <NVIC_EncodePriority>
 80016d0:	4602      	mov	r2, r0
 80016d2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80016d6:	4611      	mov	r1, r2
 80016d8:	4618      	mov	r0, r3
 80016da:	f7ff ff5d 	bl	8001598 <__NVIC_SetPriority>
}
 80016de:	bf00      	nop
 80016e0:	3718      	adds	r7, #24
 80016e2:	46bd      	mov	sp, r7
 80016e4:	bd80      	pop	{r7, pc}

080016e6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80016e6:	b580      	push	{r7, lr}
 80016e8:	b082      	sub	sp, #8
 80016ea:	af00      	add	r7, sp, #0
 80016ec:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80016ee:	6878      	ldr	r0, [r7, #4]
 80016f0:	f7ff ffb0 	bl	8001654 <SysTick_Config>
 80016f4:	4603      	mov	r3, r0
}
 80016f6:	4618      	mov	r0, r3
 80016f8:	3708      	adds	r7, #8
 80016fa:	46bd      	mov	sp, r7
 80016fc:	bd80      	pop	{r7, pc}
	...

08001700 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001700:	b480      	push	{r7}
 8001702:	b087      	sub	sp, #28
 8001704:	af00      	add	r7, sp, #0
 8001706:	6078      	str	r0, [r7, #4]
 8001708:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800170a:	2300      	movs	r3, #0
 800170c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800170e:	e148      	b.n	80019a2 <HAL_GPIO_Init+0x2a2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001710:	683b      	ldr	r3, [r7, #0]
 8001712:	681a      	ldr	r2, [r3, #0]
 8001714:	2101      	movs	r1, #1
 8001716:	697b      	ldr	r3, [r7, #20]
 8001718:	fa01 f303 	lsl.w	r3, r1, r3
 800171c:	4013      	ands	r3, r2
 800171e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001720:	68fb      	ldr	r3, [r7, #12]
 8001722:	2b00      	cmp	r3, #0
 8001724:	f000 813a 	beq.w	800199c <HAL_GPIO_Init+0x29c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001728:	683b      	ldr	r3, [r7, #0]
 800172a:	685b      	ldr	r3, [r3, #4]
 800172c:	2b01      	cmp	r3, #1
 800172e:	d00b      	beq.n	8001748 <HAL_GPIO_Init+0x48>
 8001730:	683b      	ldr	r3, [r7, #0]
 8001732:	685b      	ldr	r3, [r3, #4]
 8001734:	2b02      	cmp	r3, #2
 8001736:	d007      	beq.n	8001748 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001738:	683b      	ldr	r3, [r7, #0]
 800173a:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800173c:	2b11      	cmp	r3, #17
 800173e:	d003      	beq.n	8001748 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001740:	683b      	ldr	r3, [r7, #0]
 8001742:	685b      	ldr	r3, [r3, #4]
 8001744:	2b12      	cmp	r3, #18
 8001746:	d130      	bne.n	80017aa <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	689b      	ldr	r3, [r3, #8]
 800174c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800174e:	697b      	ldr	r3, [r7, #20]
 8001750:	005b      	lsls	r3, r3, #1
 8001752:	2203      	movs	r2, #3
 8001754:	fa02 f303 	lsl.w	r3, r2, r3
 8001758:	43db      	mvns	r3, r3
 800175a:	693a      	ldr	r2, [r7, #16]
 800175c:	4013      	ands	r3, r2
 800175e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001760:	683b      	ldr	r3, [r7, #0]
 8001762:	68da      	ldr	r2, [r3, #12]
 8001764:	697b      	ldr	r3, [r7, #20]
 8001766:	005b      	lsls	r3, r3, #1
 8001768:	fa02 f303 	lsl.w	r3, r2, r3
 800176c:	693a      	ldr	r2, [r7, #16]
 800176e:	4313      	orrs	r3, r2
 8001770:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	693a      	ldr	r2, [r7, #16]
 8001776:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	685b      	ldr	r3, [r3, #4]
 800177c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800177e:	2201      	movs	r2, #1
 8001780:	697b      	ldr	r3, [r7, #20]
 8001782:	fa02 f303 	lsl.w	r3, r2, r3
 8001786:	43db      	mvns	r3, r3
 8001788:	693a      	ldr	r2, [r7, #16]
 800178a:	4013      	ands	r3, r2
 800178c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 800178e:	683b      	ldr	r3, [r7, #0]
 8001790:	685b      	ldr	r3, [r3, #4]
 8001792:	091b      	lsrs	r3, r3, #4
 8001794:	f003 0201 	and.w	r2, r3, #1
 8001798:	697b      	ldr	r3, [r7, #20]
 800179a:	fa02 f303 	lsl.w	r3, r2, r3
 800179e:	693a      	ldr	r2, [r7, #16]
 80017a0:	4313      	orrs	r3, r2
 80017a2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	693a      	ldr	r2, [r7, #16]
 80017a8:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	68db      	ldr	r3, [r3, #12]
 80017ae:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 80017b0:	697b      	ldr	r3, [r7, #20]
 80017b2:	005b      	lsls	r3, r3, #1
 80017b4:	2203      	movs	r2, #3
 80017b6:	fa02 f303 	lsl.w	r3, r2, r3
 80017ba:	43db      	mvns	r3, r3
 80017bc:	693a      	ldr	r2, [r7, #16]
 80017be:	4013      	ands	r3, r2
 80017c0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 80017c2:	683b      	ldr	r3, [r7, #0]
 80017c4:	689a      	ldr	r2, [r3, #8]
 80017c6:	697b      	ldr	r3, [r7, #20]
 80017c8:	005b      	lsls	r3, r3, #1
 80017ca:	fa02 f303 	lsl.w	r3, r2, r3
 80017ce:	693a      	ldr	r2, [r7, #16]
 80017d0:	4313      	orrs	r3, r2
 80017d2:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	693a      	ldr	r2, [r7, #16]
 80017d8:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80017da:	683b      	ldr	r3, [r7, #0]
 80017dc:	685b      	ldr	r3, [r3, #4]
 80017de:	2b02      	cmp	r3, #2
 80017e0:	d003      	beq.n	80017ea <HAL_GPIO_Init+0xea>
 80017e2:	683b      	ldr	r3, [r7, #0]
 80017e4:	685b      	ldr	r3, [r3, #4]
 80017e6:	2b12      	cmp	r3, #18
 80017e8:	d123      	bne.n	8001832 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80017ea:	697b      	ldr	r3, [r7, #20]
 80017ec:	08da      	lsrs	r2, r3, #3
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	3208      	adds	r2, #8
 80017f2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80017f6:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80017f8:	697b      	ldr	r3, [r7, #20]
 80017fa:	f003 0307 	and.w	r3, r3, #7
 80017fe:	009b      	lsls	r3, r3, #2
 8001800:	220f      	movs	r2, #15
 8001802:	fa02 f303 	lsl.w	r3, r2, r3
 8001806:	43db      	mvns	r3, r3
 8001808:	693a      	ldr	r2, [r7, #16]
 800180a:	4013      	ands	r3, r2
 800180c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800180e:	683b      	ldr	r3, [r7, #0]
 8001810:	691a      	ldr	r2, [r3, #16]
 8001812:	697b      	ldr	r3, [r7, #20]
 8001814:	f003 0307 	and.w	r3, r3, #7
 8001818:	009b      	lsls	r3, r3, #2
 800181a:	fa02 f303 	lsl.w	r3, r2, r3
 800181e:	693a      	ldr	r2, [r7, #16]
 8001820:	4313      	orrs	r3, r2
 8001822:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001824:	697b      	ldr	r3, [r7, #20]
 8001826:	08da      	lsrs	r2, r3, #3
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	3208      	adds	r2, #8
 800182c:	6939      	ldr	r1, [r7, #16]
 800182e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001838:	697b      	ldr	r3, [r7, #20]
 800183a:	005b      	lsls	r3, r3, #1
 800183c:	2203      	movs	r2, #3
 800183e:	fa02 f303 	lsl.w	r3, r2, r3
 8001842:	43db      	mvns	r3, r3
 8001844:	693a      	ldr	r2, [r7, #16]
 8001846:	4013      	ands	r3, r2
 8001848:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800184a:	683b      	ldr	r3, [r7, #0]
 800184c:	685b      	ldr	r3, [r3, #4]
 800184e:	f003 0203 	and.w	r2, r3, #3
 8001852:	697b      	ldr	r3, [r7, #20]
 8001854:	005b      	lsls	r3, r3, #1
 8001856:	fa02 f303 	lsl.w	r3, r2, r3
 800185a:	693a      	ldr	r2, [r7, #16]
 800185c:	4313      	orrs	r3, r2
 800185e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	693a      	ldr	r2, [r7, #16]
 8001864:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001866:	683b      	ldr	r3, [r7, #0]
 8001868:	685b      	ldr	r3, [r3, #4]
 800186a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800186e:	2b00      	cmp	r3, #0
 8001870:	f000 8094 	beq.w	800199c <HAL_GPIO_Init+0x29c>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001874:	4b52      	ldr	r3, [pc, #328]	; (80019c0 <HAL_GPIO_Init+0x2c0>)
 8001876:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001878:	4a51      	ldr	r2, [pc, #324]	; (80019c0 <HAL_GPIO_Init+0x2c0>)
 800187a:	f043 0301 	orr.w	r3, r3, #1
 800187e:	6613      	str	r3, [r2, #96]	; 0x60
 8001880:	4b4f      	ldr	r3, [pc, #316]	; (80019c0 <HAL_GPIO_Init+0x2c0>)
 8001882:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001884:	f003 0301 	and.w	r3, r3, #1
 8001888:	60bb      	str	r3, [r7, #8]
 800188a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800188c:	4a4d      	ldr	r2, [pc, #308]	; (80019c4 <HAL_GPIO_Init+0x2c4>)
 800188e:	697b      	ldr	r3, [r7, #20]
 8001890:	089b      	lsrs	r3, r3, #2
 8001892:	3302      	adds	r3, #2
 8001894:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001898:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800189a:	697b      	ldr	r3, [r7, #20]
 800189c:	f003 0303 	and.w	r3, r3, #3
 80018a0:	009b      	lsls	r3, r3, #2
 80018a2:	220f      	movs	r2, #15
 80018a4:	fa02 f303 	lsl.w	r3, r2, r3
 80018a8:	43db      	mvns	r3, r3
 80018aa:	693a      	ldr	r2, [r7, #16]
 80018ac:	4013      	ands	r3, r2
 80018ae:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80018b6:	d00d      	beq.n	80018d4 <HAL_GPIO_Init+0x1d4>
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	4a43      	ldr	r2, [pc, #268]	; (80019c8 <HAL_GPIO_Init+0x2c8>)
 80018bc:	4293      	cmp	r3, r2
 80018be:	d007      	beq.n	80018d0 <HAL_GPIO_Init+0x1d0>
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	4a42      	ldr	r2, [pc, #264]	; (80019cc <HAL_GPIO_Init+0x2cc>)
 80018c4:	4293      	cmp	r3, r2
 80018c6:	d101      	bne.n	80018cc <HAL_GPIO_Init+0x1cc>
 80018c8:	2302      	movs	r3, #2
 80018ca:	e004      	b.n	80018d6 <HAL_GPIO_Init+0x1d6>
 80018cc:	2307      	movs	r3, #7
 80018ce:	e002      	b.n	80018d6 <HAL_GPIO_Init+0x1d6>
 80018d0:	2301      	movs	r3, #1
 80018d2:	e000      	b.n	80018d6 <HAL_GPIO_Init+0x1d6>
 80018d4:	2300      	movs	r3, #0
 80018d6:	697a      	ldr	r2, [r7, #20]
 80018d8:	f002 0203 	and.w	r2, r2, #3
 80018dc:	0092      	lsls	r2, r2, #2
 80018de:	4093      	lsls	r3, r2
 80018e0:	693a      	ldr	r2, [r7, #16]
 80018e2:	4313      	orrs	r3, r2
 80018e4:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80018e6:	4937      	ldr	r1, [pc, #220]	; (80019c4 <HAL_GPIO_Init+0x2c4>)
 80018e8:	697b      	ldr	r3, [r7, #20]
 80018ea:	089b      	lsrs	r3, r3, #2
 80018ec:	3302      	adds	r3, #2
 80018ee:	693a      	ldr	r2, [r7, #16]
 80018f0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 80018f4:	4b36      	ldr	r3, [pc, #216]	; (80019d0 <HAL_GPIO_Init+0x2d0>)
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80018fa:	68fb      	ldr	r3, [r7, #12]
 80018fc:	43db      	mvns	r3, r3
 80018fe:	693a      	ldr	r2, [r7, #16]
 8001900:	4013      	ands	r3, r2
 8001902:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001904:	683b      	ldr	r3, [r7, #0]
 8001906:	685b      	ldr	r3, [r3, #4]
 8001908:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800190c:	2b00      	cmp	r3, #0
 800190e:	d003      	beq.n	8001918 <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 8001910:	693a      	ldr	r2, [r7, #16]
 8001912:	68fb      	ldr	r3, [r7, #12]
 8001914:	4313      	orrs	r3, r2
 8001916:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001918:	4a2d      	ldr	r2, [pc, #180]	; (80019d0 <HAL_GPIO_Init+0x2d0>)
 800191a:	693b      	ldr	r3, [r7, #16]
 800191c:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 800191e:	4b2c      	ldr	r3, [pc, #176]	; (80019d0 <HAL_GPIO_Init+0x2d0>)
 8001920:	685b      	ldr	r3, [r3, #4]
 8001922:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001924:	68fb      	ldr	r3, [r7, #12]
 8001926:	43db      	mvns	r3, r3
 8001928:	693a      	ldr	r2, [r7, #16]
 800192a:	4013      	ands	r3, r2
 800192c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800192e:	683b      	ldr	r3, [r7, #0]
 8001930:	685b      	ldr	r3, [r3, #4]
 8001932:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001936:	2b00      	cmp	r3, #0
 8001938:	d003      	beq.n	8001942 <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 800193a:	693a      	ldr	r2, [r7, #16]
 800193c:	68fb      	ldr	r3, [r7, #12]
 800193e:	4313      	orrs	r3, r2
 8001940:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001942:	4a23      	ldr	r2, [pc, #140]	; (80019d0 <HAL_GPIO_Init+0x2d0>)
 8001944:	693b      	ldr	r3, [r7, #16]
 8001946:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001948:	4b21      	ldr	r3, [pc, #132]	; (80019d0 <HAL_GPIO_Init+0x2d0>)
 800194a:	689b      	ldr	r3, [r3, #8]
 800194c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800194e:	68fb      	ldr	r3, [r7, #12]
 8001950:	43db      	mvns	r3, r3
 8001952:	693a      	ldr	r2, [r7, #16]
 8001954:	4013      	ands	r3, r2
 8001956:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001958:	683b      	ldr	r3, [r7, #0]
 800195a:	685b      	ldr	r3, [r3, #4]
 800195c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001960:	2b00      	cmp	r3, #0
 8001962:	d003      	beq.n	800196c <HAL_GPIO_Init+0x26c>
        {
          temp |= iocurrent;
 8001964:	693a      	ldr	r2, [r7, #16]
 8001966:	68fb      	ldr	r3, [r7, #12]
 8001968:	4313      	orrs	r3, r2
 800196a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800196c:	4a18      	ldr	r2, [pc, #96]	; (80019d0 <HAL_GPIO_Init+0x2d0>)
 800196e:	693b      	ldr	r3, [r7, #16]
 8001970:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001972:	4b17      	ldr	r3, [pc, #92]	; (80019d0 <HAL_GPIO_Init+0x2d0>)
 8001974:	68db      	ldr	r3, [r3, #12]
 8001976:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001978:	68fb      	ldr	r3, [r7, #12]
 800197a:	43db      	mvns	r3, r3
 800197c:	693a      	ldr	r2, [r7, #16]
 800197e:	4013      	ands	r3, r2
 8001980:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001982:	683b      	ldr	r3, [r7, #0]
 8001984:	685b      	ldr	r3, [r3, #4]
 8001986:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800198a:	2b00      	cmp	r3, #0
 800198c:	d003      	beq.n	8001996 <HAL_GPIO_Init+0x296>
        {
          temp |= iocurrent;
 800198e:	693a      	ldr	r2, [r7, #16]
 8001990:	68fb      	ldr	r3, [r7, #12]
 8001992:	4313      	orrs	r3, r2
 8001994:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001996:	4a0e      	ldr	r2, [pc, #56]	; (80019d0 <HAL_GPIO_Init+0x2d0>)
 8001998:	693b      	ldr	r3, [r7, #16]
 800199a:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 800199c:	697b      	ldr	r3, [r7, #20]
 800199e:	3301      	adds	r3, #1
 80019a0:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80019a2:	683b      	ldr	r3, [r7, #0]
 80019a4:	681a      	ldr	r2, [r3, #0]
 80019a6:	697b      	ldr	r3, [r7, #20]
 80019a8:	fa22 f303 	lsr.w	r3, r2, r3
 80019ac:	2b00      	cmp	r3, #0
 80019ae:	f47f aeaf 	bne.w	8001710 <HAL_GPIO_Init+0x10>
  }
}
 80019b2:	bf00      	nop
 80019b4:	bf00      	nop
 80019b6:	371c      	adds	r7, #28
 80019b8:	46bd      	mov	sp, r7
 80019ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019be:	4770      	bx	lr
 80019c0:	40021000 	.word	0x40021000
 80019c4:	40010000 	.word	0x40010000
 80019c8:	48000400 	.word	0x48000400
 80019cc:	48000800 	.word	0x48000800
 80019d0:	40010400 	.word	0x40010400

080019d4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80019d4:	b480      	push	{r7}
 80019d6:	b083      	sub	sp, #12
 80019d8:	af00      	add	r7, sp, #0
 80019da:	6078      	str	r0, [r7, #4]
 80019dc:	460b      	mov	r3, r1
 80019de:	807b      	strh	r3, [r7, #2]
 80019e0:	4613      	mov	r3, r2
 80019e2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80019e4:	787b      	ldrb	r3, [r7, #1]
 80019e6:	2b00      	cmp	r3, #0
 80019e8:	d003      	beq.n	80019f2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80019ea:	887a      	ldrh	r2, [r7, #2]
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80019f0:	e002      	b.n	80019f8 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80019f2:	887a      	ldrh	r2, [r7, #2]
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	629a      	str	r2, [r3, #40]	; 0x28
}
 80019f8:	bf00      	nop
 80019fa:	370c      	adds	r7, #12
 80019fc:	46bd      	mov	sp, r7
 80019fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a02:	4770      	bx	lr

08001a04 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001a04:	b480      	push	{r7}
 8001a06:	b085      	sub	sp, #20
 8001a08:	af00      	add	r7, sp, #0
 8001a0a:	6078      	str	r0, [r7, #4]
 8001a0c:	460b      	mov	r3, r1
 8001a0e:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	695b      	ldr	r3, [r3, #20]
 8001a14:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001a16:	887a      	ldrh	r2, [r7, #2]
 8001a18:	68fb      	ldr	r3, [r7, #12]
 8001a1a:	4013      	ands	r3, r2
 8001a1c:	041a      	lsls	r2, r3, #16
 8001a1e:	68fb      	ldr	r3, [r7, #12]
 8001a20:	43d9      	mvns	r1, r3
 8001a22:	887b      	ldrh	r3, [r7, #2]
 8001a24:	400b      	ands	r3, r1
 8001a26:	431a      	orrs	r2, r3
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	619a      	str	r2, [r3, #24]
}
 8001a2c:	bf00      	nop
 8001a2e:	3714      	adds	r7, #20
 8001a30:	46bd      	mov	sp, r7
 8001a32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a36:	4770      	bx	lr

08001a38 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8001a38:	b480      	push	{r7}
 8001a3a:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8001a3c:	4b04      	ldr	r3, [pc, #16]	; (8001a50 <HAL_PWREx_GetVoltageRange+0x18>)
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8001a44:	4618      	mov	r0, r3
 8001a46:	46bd      	mov	sp, r7
 8001a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a4c:	4770      	bx	lr
 8001a4e:	bf00      	nop
 8001a50:	40007000 	.word	0x40007000

08001a54 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001a54:	b480      	push	{r7}
 8001a56:	b085      	sub	sp, #20
 8001a58:	af00      	add	r7, sp, #0
 8001a5a:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001a62:	d130      	bne.n	8001ac6 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8001a64:	4b23      	ldr	r3, [pc, #140]	; (8001af4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001a6c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001a70:	d038      	beq.n	8001ae4 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001a72:	4b20      	ldr	r3, [pc, #128]	; (8001af4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001a7a:	4a1e      	ldr	r2, [pc, #120]	; (8001af4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001a7c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001a80:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001a82:	4b1d      	ldr	r3, [pc, #116]	; (8001af8 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	2232      	movs	r2, #50	; 0x32
 8001a88:	fb02 f303 	mul.w	r3, r2, r3
 8001a8c:	4a1b      	ldr	r2, [pc, #108]	; (8001afc <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8001a8e:	fba2 2303 	umull	r2, r3, r2, r3
 8001a92:	0c9b      	lsrs	r3, r3, #18
 8001a94:	3301      	adds	r3, #1
 8001a96:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001a98:	e002      	b.n	8001aa0 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8001a9a:	68fb      	ldr	r3, [r7, #12]
 8001a9c:	3b01      	subs	r3, #1
 8001a9e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001aa0:	4b14      	ldr	r3, [pc, #80]	; (8001af4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001aa2:	695b      	ldr	r3, [r3, #20]
 8001aa4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001aa8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001aac:	d102      	bne.n	8001ab4 <HAL_PWREx_ControlVoltageScaling+0x60>
 8001aae:	68fb      	ldr	r3, [r7, #12]
 8001ab0:	2b00      	cmp	r3, #0
 8001ab2:	d1f2      	bne.n	8001a9a <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001ab4:	4b0f      	ldr	r3, [pc, #60]	; (8001af4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001ab6:	695b      	ldr	r3, [r3, #20]
 8001ab8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001abc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001ac0:	d110      	bne.n	8001ae4 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8001ac2:	2303      	movs	r3, #3
 8001ac4:	e00f      	b.n	8001ae6 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8001ac6:	4b0b      	ldr	r3, [pc, #44]	; (8001af4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001ace:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001ad2:	d007      	beq.n	8001ae4 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001ad4:	4b07      	ldr	r3, [pc, #28]	; (8001af4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001adc:	4a05      	ldr	r2, [pc, #20]	; (8001af4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001ade:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001ae2:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8001ae4:	2300      	movs	r3, #0
}
 8001ae6:	4618      	mov	r0, r3
 8001ae8:	3714      	adds	r7, #20
 8001aea:	46bd      	mov	sp, r7
 8001aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001af0:	4770      	bx	lr
 8001af2:	bf00      	nop
 8001af4:	40007000 	.word	0x40007000
 8001af8:	20000004 	.word	0x20000004
 8001afc:	431bde83 	.word	0x431bde83

08001b00 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001b00:	b580      	push	{r7, lr}
 8001b02:	b088      	sub	sp, #32
 8001b04:	af00      	add	r7, sp, #0
 8001b06:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	2b00      	cmp	r3, #0
 8001b0c:	d102      	bne.n	8001b14 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8001b0e:	2301      	movs	r3, #1
 8001b10:	f000 bc11 	b.w	8002336 <HAL_RCC_OscConfig+0x836>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001b14:	4ba0      	ldr	r3, [pc, #640]	; (8001d98 <HAL_RCC_OscConfig+0x298>)
 8001b16:	689b      	ldr	r3, [r3, #8]
 8001b18:	f003 030c 	and.w	r3, r3, #12
 8001b1c:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001b1e:	4b9e      	ldr	r3, [pc, #632]	; (8001d98 <HAL_RCC_OscConfig+0x298>)
 8001b20:	68db      	ldr	r3, [r3, #12]
 8001b22:	f003 0303 	and.w	r3, r3, #3
 8001b26:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	f003 0310 	and.w	r3, r3, #16
 8001b30:	2b00      	cmp	r3, #0
 8001b32:	f000 80e4 	beq.w	8001cfe <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001b36:	69bb      	ldr	r3, [r7, #24]
 8001b38:	2b00      	cmp	r3, #0
 8001b3a:	d007      	beq.n	8001b4c <HAL_RCC_OscConfig+0x4c>
 8001b3c:	69bb      	ldr	r3, [r7, #24]
 8001b3e:	2b0c      	cmp	r3, #12
 8001b40:	f040 808b 	bne.w	8001c5a <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8001b44:	697b      	ldr	r3, [r7, #20]
 8001b46:	2b01      	cmp	r3, #1
 8001b48:	f040 8087 	bne.w	8001c5a <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001b4c:	4b92      	ldr	r3, [pc, #584]	; (8001d98 <HAL_RCC_OscConfig+0x298>)
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	f003 0302 	and.w	r3, r3, #2
 8001b54:	2b00      	cmp	r3, #0
 8001b56:	d005      	beq.n	8001b64 <HAL_RCC_OscConfig+0x64>
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	699b      	ldr	r3, [r3, #24]
 8001b5c:	2b00      	cmp	r3, #0
 8001b5e:	d101      	bne.n	8001b64 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8001b60:	2301      	movs	r3, #1
 8001b62:	e3e8      	b.n	8002336 <HAL_RCC_OscConfig+0x836>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	6a1a      	ldr	r2, [r3, #32]
 8001b68:	4b8b      	ldr	r3, [pc, #556]	; (8001d98 <HAL_RCC_OscConfig+0x298>)
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	f003 0308 	and.w	r3, r3, #8
 8001b70:	2b00      	cmp	r3, #0
 8001b72:	d004      	beq.n	8001b7e <HAL_RCC_OscConfig+0x7e>
 8001b74:	4b88      	ldr	r3, [pc, #544]	; (8001d98 <HAL_RCC_OscConfig+0x298>)
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001b7c:	e005      	b.n	8001b8a <HAL_RCC_OscConfig+0x8a>
 8001b7e:	4b86      	ldr	r3, [pc, #536]	; (8001d98 <HAL_RCC_OscConfig+0x298>)
 8001b80:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001b84:	091b      	lsrs	r3, r3, #4
 8001b86:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001b8a:	4293      	cmp	r3, r2
 8001b8c:	d223      	bcs.n	8001bd6 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	6a1b      	ldr	r3, [r3, #32]
 8001b92:	4618      	mov	r0, r3
 8001b94:	f000 fd42 	bl	800261c <RCC_SetFlashLatencyFromMSIRange>
 8001b98:	4603      	mov	r3, r0
 8001b9a:	2b00      	cmp	r3, #0
 8001b9c:	d001      	beq.n	8001ba2 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8001b9e:	2301      	movs	r3, #1
 8001ba0:	e3c9      	b.n	8002336 <HAL_RCC_OscConfig+0x836>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001ba2:	4b7d      	ldr	r3, [pc, #500]	; (8001d98 <HAL_RCC_OscConfig+0x298>)
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	4a7c      	ldr	r2, [pc, #496]	; (8001d98 <HAL_RCC_OscConfig+0x298>)
 8001ba8:	f043 0308 	orr.w	r3, r3, #8
 8001bac:	6013      	str	r3, [r2, #0]
 8001bae:	4b7a      	ldr	r3, [pc, #488]	; (8001d98 <HAL_RCC_OscConfig+0x298>)
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	6a1b      	ldr	r3, [r3, #32]
 8001bba:	4977      	ldr	r1, [pc, #476]	; (8001d98 <HAL_RCC_OscConfig+0x298>)
 8001bbc:	4313      	orrs	r3, r2
 8001bbe:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001bc0:	4b75      	ldr	r3, [pc, #468]	; (8001d98 <HAL_RCC_OscConfig+0x298>)
 8001bc2:	685b      	ldr	r3, [r3, #4]
 8001bc4:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	69db      	ldr	r3, [r3, #28]
 8001bcc:	021b      	lsls	r3, r3, #8
 8001bce:	4972      	ldr	r1, [pc, #456]	; (8001d98 <HAL_RCC_OscConfig+0x298>)
 8001bd0:	4313      	orrs	r3, r2
 8001bd2:	604b      	str	r3, [r1, #4]
 8001bd4:	e025      	b.n	8001c22 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001bd6:	4b70      	ldr	r3, [pc, #448]	; (8001d98 <HAL_RCC_OscConfig+0x298>)
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	4a6f      	ldr	r2, [pc, #444]	; (8001d98 <HAL_RCC_OscConfig+0x298>)
 8001bdc:	f043 0308 	orr.w	r3, r3, #8
 8001be0:	6013      	str	r3, [r2, #0]
 8001be2:	4b6d      	ldr	r3, [pc, #436]	; (8001d98 <HAL_RCC_OscConfig+0x298>)
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	6a1b      	ldr	r3, [r3, #32]
 8001bee:	496a      	ldr	r1, [pc, #424]	; (8001d98 <HAL_RCC_OscConfig+0x298>)
 8001bf0:	4313      	orrs	r3, r2
 8001bf2:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001bf4:	4b68      	ldr	r3, [pc, #416]	; (8001d98 <HAL_RCC_OscConfig+0x298>)
 8001bf6:	685b      	ldr	r3, [r3, #4]
 8001bf8:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	69db      	ldr	r3, [r3, #28]
 8001c00:	021b      	lsls	r3, r3, #8
 8001c02:	4965      	ldr	r1, [pc, #404]	; (8001d98 <HAL_RCC_OscConfig+0x298>)
 8001c04:	4313      	orrs	r3, r2
 8001c06:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001c08:	69bb      	ldr	r3, [r7, #24]
 8001c0a:	2b00      	cmp	r3, #0
 8001c0c:	d109      	bne.n	8001c22 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	6a1b      	ldr	r3, [r3, #32]
 8001c12:	4618      	mov	r0, r3
 8001c14:	f000 fd02 	bl	800261c <RCC_SetFlashLatencyFromMSIRange>
 8001c18:	4603      	mov	r3, r0
 8001c1a:	2b00      	cmp	r3, #0
 8001c1c:	d001      	beq.n	8001c22 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8001c1e:	2301      	movs	r3, #1
 8001c20:	e389      	b.n	8002336 <HAL_RCC_OscConfig+0x836>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001c22:	f000 fc6f 	bl	8002504 <HAL_RCC_GetSysClockFreq>
 8001c26:	4602      	mov	r2, r0
 8001c28:	4b5b      	ldr	r3, [pc, #364]	; (8001d98 <HAL_RCC_OscConfig+0x298>)
 8001c2a:	689b      	ldr	r3, [r3, #8]
 8001c2c:	091b      	lsrs	r3, r3, #4
 8001c2e:	f003 030f 	and.w	r3, r3, #15
 8001c32:	495a      	ldr	r1, [pc, #360]	; (8001d9c <HAL_RCC_OscConfig+0x29c>)
 8001c34:	5ccb      	ldrb	r3, [r1, r3]
 8001c36:	f003 031f 	and.w	r3, r3, #31
 8001c3a:	fa22 f303 	lsr.w	r3, r2, r3
 8001c3e:	4a58      	ldr	r2, [pc, #352]	; (8001da0 <HAL_RCC_OscConfig+0x2a0>)
 8001c40:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8001c42:	4b58      	ldr	r3, [pc, #352]	; (8001da4 <HAL_RCC_OscConfig+0x2a4>)
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	4618      	mov	r0, r3
 8001c48:	f7ff fbf4 	bl	8001434 <HAL_InitTick>
 8001c4c:	4603      	mov	r3, r0
 8001c4e:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8001c50:	7bfb      	ldrb	r3, [r7, #15]
 8001c52:	2b00      	cmp	r3, #0
 8001c54:	d052      	beq.n	8001cfc <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8001c56:	7bfb      	ldrb	r3, [r7, #15]
 8001c58:	e36d      	b.n	8002336 <HAL_RCC_OscConfig+0x836>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	699b      	ldr	r3, [r3, #24]
 8001c5e:	2b00      	cmp	r3, #0
 8001c60:	d032      	beq.n	8001cc8 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001c62:	4b4d      	ldr	r3, [pc, #308]	; (8001d98 <HAL_RCC_OscConfig+0x298>)
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	4a4c      	ldr	r2, [pc, #304]	; (8001d98 <HAL_RCC_OscConfig+0x298>)
 8001c68:	f043 0301 	orr.w	r3, r3, #1
 8001c6c:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001c6e:	f7ff fc31 	bl	80014d4 <HAL_GetTick>
 8001c72:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001c74:	e008      	b.n	8001c88 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001c76:	f7ff fc2d 	bl	80014d4 <HAL_GetTick>
 8001c7a:	4602      	mov	r2, r0
 8001c7c:	693b      	ldr	r3, [r7, #16]
 8001c7e:	1ad3      	subs	r3, r2, r3
 8001c80:	2b02      	cmp	r3, #2
 8001c82:	d901      	bls.n	8001c88 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8001c84:	2303      	movs	r3, #3
 8001c86:	e356      	b.n	8002336 <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001c88:	4b43      	ldr	r3, [pc, #268]	; (8001d98 <HAL_RCC_OscConfig+0x298>)
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	f003 0302 	and.w	r3, r3, #2
 8001c90:	2b00      	cmp	r3, #0
 8001c92:	d0f0      	beq.n	8001c76 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001c94:	4b40      	ldr	r3, [pc, #256]	; (8001d98 <HAL_RCC_OscConfig+0x298>)
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	4a3f      	ldr	r2, [pc, #252]	; (8001d98 <HAL_RCC_OscConfig+0x298>)
 8001c9a:	f043 0308 	orr.w	r3, r3, #8
 8001c9e:	6013      	str	r3, [r2, #0]
 8001ca0:	4b3d      	ldr	r3, [pc, #244]	; (8001d98 <HAL_RCC_OscConfig+0x298>)
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	6a1b      	ldr	r3, [r3, #32]
 8001cac:	493a      	ldr	r1, [pc, #232]	; (8001d98 <HAL_RCC_OscConfig+0x298>)
 8001cae:	4313      	orrs	r3, r2
 8001cb0:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001cb2:	4b39      	ldr	r3, [pc, #228]	; (8001d98 <HAL_RCC_OscConfig+0x298>)
 8001cb4:	685b      	ldr	r3, [r3, #4]
 8001cb6:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	69db      	ldr	r3, [r3, #28]
 8001cbe:	021b      	lsls	r3, r3, #8
 8001cc0:	4935      	ldr	r1, [pc, #212]	; (8001d98 <HAL_RCC_OscConfig+0x298>)
 8001cc2:	4313      	orrs	r3, r2
 8001cc4:	604b      	str	r3, [r1, #4]
 8001cc6:	e01a      	b.n	8001cfe <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001cc8:	4b33      	ldr	r3, [pc, #204]	; (8001d98 <HAL_RCC_OscConfig+0x298>)
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	4a32      	ldr	r2, [pc, #200]	; (8001d98 <HAL_RCC_OscConfig+0x298>)
 8001cce:	f023 0301 	bic.w	r3, r3, #1
 8001cd2:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001cd4:	f7ff fbfe 	bl	80014d4 <HAL_GetTick>
 8001cd8:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001cda:	e008      	b.n	8001cee <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001cdc:	f7ff fbfa 	bl	80014d4 <HAL_GetTick>
 8001ce0:	4602      	mov	r2, r0
 8001ce2:	693b      	ldr	r3, [r7, #16]
 8001ce4:	1ad3      	subs	r3, r2, r3
 8001ce6:	2b02      	cmp	r3, #2
 8001ce8:	d901      	bls.n	8001cee <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8001cea:	2303      	movs	r3, #3
 8001cec:	e323      	b.n	8002336 <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001cee:	4b2a      	ldr	r3, [pc, #168]	; (8001d98 <HAL_RCC_OscConfig+0x298>)
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	f003 0302 	and.w	r3, r3, #2
 8001cf6:	2b00      	cmp	r3, #0
 8001cf8:	d1f0      	bne.n	8001cdc <HAL_RCC_OscConfig+0x1dc>
 8001cfa:	e000      	b.n	8001cfe <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001cfc:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	f003 0301 	and.w	r3, r3, #1
 8001d06:	2b00      	cmp	r3, #0
 8001d08:	d073      	beq.n	8001df2 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8001d0a:	69bb      	ldr	r3, [r7, #24]
 8001d0c:	2b08      	cmp	r3, #8
 8001d0e:	d005      	beq.n	8001d1c <HAL_RCC_OscConfig+0x21c>
 8001d10:	69bb      	ldr	r3, [r7, #24]
 8001d12:	2b0c      	cmp	r3, #12
 8001d14:	d10e      	bne.n	8001d34 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001d16:	697b      	ldr	r3, [r7, #20]
 8001d18:	2b03      	cmp	r3, #3
 8001d1a:	d10b      	bne.n	8001d34 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001d1c:	4b1e      	ldr	r3, [pc, #120]	; (8001d98 <HAL_RCC_OscConfig+0x298>)
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d24:	2b00      	cmp	r3, #0
 8001d26:	d063      	beq.n	8001df0 <HAL_RCC_OscConfig+0x2f0>
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	685b      	ldr	r3, [r3, #4]
 8001d2c:	2b00      	cmp	r3, #0
 8001d2e:	d15f      	bne.n	8001df0 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8001d30:	2301      	movs	r3, #1
 8001d32:	e300      	b.n	8002336 <HAL_RCC_OscConfig+0x836>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	685b      	ldr	r3, [r3, #4]
 8001d38:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001d3c:	d106      	bne.n	8001d4c <HAL_RCC_OscConfig+0x24c>
 8001d3e:	4b16      	ldr	r3, [pc, #88]	; (8001d98 <HAL_RCC_OscConfig+0x298>)
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	4a15      	ldr	r2, [pc, #84]	; (8001d98 <HAL_RCC_OscConfig+0x298>)
 8001d44:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001d48:	6013      	str	r3, [r2, #0]
 8001d4a:	e01d      	b.n	8001d88 <HAL_RCC_OscConfig+0x288>
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	685b      	ldr	r3, [r3, #4]
 8001d50:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001d54:	d10c      	bne.n	8001d70 <HAL_RCC_OscConfig+0x270>
 8001d56:	4b10      	ldr	r3, [pc, #64]	; (8001d98 <HAL_RCC_OscConfig+0x298>)
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	4a0f      	ldr	r2, [pc, #60]	; (8001d98 <HAL_RCC_OscConfig+0x298>)
 8001d5c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001d60:	6013      	str	r3, [r2, #0]
 8001d62:	4b0d      	ldr	r3, [pc, #52]	; (8001d98 <HAL_RCC_OscConfig+0x298>)
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	4a0c      	ldr	r2, [pc, #48]	; (8001d98 <HAL_RCC_OscConfig+0x298>)
 8001d68:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001d6c:	6013      	str	r3, [r2, #0]
 8001d6e:	e00b      	b.n	8001d88 <HAL_RCC_OscConfig+0x288>
 8001d70:	4b09      	ldr	r3, [pc, #36]	; (8001d98 <HAL_RCC_OscConfig+0x298>)
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	4a08      	ldr	r2, [pc, #32]	; (8001d98 <HAL_RCC_OscConfig+0x298>)
 8001d76:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001d7a:	6013      	str	r3, [r2, #0]
 8001d7c:	4b06      	ldr	r3, [pc, #24]	; (8001d98 <HAL_RCC_OscConfig+0x298>)
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	4a05      	ldr	r2, [pc, #20]	; (8001d98 <HAL_RCC_OscConfig+0x298>)
 8001d82:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001d86:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	685b      	ldr	r3, [r3, #4]
 8001d8c:	2b00      	cmp	r3, #0
 8001d8e:	d01b      	beq.n	8001dc8 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d90:	f7ff fba0 	bl	80014d4 <HAL_GetTick>
 8001d94:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001d96:	e010      	b.n	8001dba <HAL_RCC_OscConfig+0x2ba>
 8001d98:	40021000 	.word	0x40021000
 8001d9c:	08003a3c 	.word	0x08003a3c
 8001da0:	20000004 	.word	0x20000004
 8001da4:	20000008 	.word	0x20000008
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001da8:	f7ff fb94 	bl	80014d4 <HAL_GetTick>
 8001dac:	4602      	mov	r2, r0
 8001dae:	693b      	ldr	r3, [r7, #16]
 8001db0:	1ad3      	subs	r3, r2, r3
 8001db2:	2b64      	cmp	r3, #100	; 0x64
 8001db4:	d901      	bls.n	8001dba <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8001db6:	2303      	movs	r3, #3
 8001db8:	e2bd      	b.n	8002336 <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001dba:	4baf      	ldr	r3, [pc, #700]	; (8002078 <HAL_RCC_OscConfig+0x578>)
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001dc2:	2b00      	cmp	r3, #0
 8001dc4:	d0f0      	beq.n	8001da8 <HAL_RCC_OscConfig+0x2a8>
 8001dc6:	e014      	b.n	8001df2 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001dc8:	f7ff fb84 	bl	80014d4 <HAL_GetTick>
 8001dcc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001dce:	e008      	b.n	8001de2 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001dd0:	f7ff fb80 	bl	80014d4 <HAL_GetTick>
 8001dd4:	4602      	mov	r2, r0
 8001dd6:	693b      	ldr	r3, [r7, #16]
 8001dd8:	1ad3      	subs	r3, r2, r3
 8001dda:	2b64      	cmp	r3, #100	; 0x64
 8001ddc:	d901      	bls.n	8001de2 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8001dde:	2303      	movs	r3, #3
 8001de0:	e2a9      	b.n	8002336 <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001de2:	4ba5      	ldr	r3, [pc, #660]	; (8002078 <HAL_RCC_OscConfig+0x578>)
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001dea:	2b00      	cmp	r3, #0
 8001dec:	d1f0      	bne.n	8001dd0 <HAL_RCC_OscConfig+0x2d0>
 8001dee:	e000      	b.n	8001df2 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001df0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	f003 0302 	and.w	r3, r3, #2
 8001dfa:	2b00      	cmp	r3, #0
 8001dfc:	d060      	beq.n	8001ec0 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8001dfe:	69bb      	ldr	r3, [r7, #24]
 8001e00:	2b04      	cmp	r3, #4
 8001e02:	d005      	beq.n	8001e10 <HAL_RCC_OscConfig+0x310>
 8001e04:	69bb      	ldr	r3, [r7, #24]
 8001e06:	2b0c      	cmp	r3, #12
 8001e08:	d119      	bne.n	8001e3e <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001e0a:	697b      	ldr	r3, [r7, #20]
 8001e0c:	2b02      	cmp	r3, #2
 8001e0e:	d116      	bne.n	8001e3e <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001e10:	4b99      	ldr	r3, [pc, #612]	; (8002078 <HAL_RCC_OscConfig+0x578>)
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001e18:	2b00      	cmp	r3, #0
 8001e1a:	d005      	beq.n	8001e28 <HAL_RCC_OscConfig+0x328>
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	68db      	ldr	r3, [r3, #12]
 8001e20:	2b00      	cmp	r3, #0
 8001e22:	d101      	bne.n	8001e28 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8001e24:	2301      	movs	r3, #1
 8001e26:	e286      	b.n	8002336 <HAL_RCC_OscConfig+0x836>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001e28:	4b93      	ldr	r3, [pc, #588]	; (8002078 <HAL_RCC_OscConfig+0x578>)
 8001e2a:	685b      	ldr	r3, [r3, #4]
 8001e2c:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	691b      	ldr	r3, [r3, #16]
 8001e34:	061b      	lsls	r3, r3, #24
 8001e36:	4990      	ldr	r1, [pc, #576]	; (8002078 <HAL_RCC_OscConfig+0x578>)
 8001e38:	4313      	orrs	r3, r2
 8001e3a:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001e3c:	e040      	b.n	8001ec0 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	68db      	ldr	r3, [r3, #12]
 8001e42:	2b00      	cmp	r3, #0
 8001e44:	d023      	beq.n	8001e8e <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001e46:	4b8c      	ldr	r3, [pc, #560]	; (8002078 <HAL_RCC_OscConfig+0x578>)
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	4a8b      	ldr	r2, [pc, #556]	; (8002078 <HAL_RCC_OscConfig+0x578>)
 8001e4c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001e50:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e52:	f7ff fb3f 	bl	80014d4 <HAL_GetTick>
 8001e56:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001e58:	e008      	b.n	8001e6c <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001e5a:	f7ff fb3b 	bl	80014d4 <HAL_GetTick>
 8001e5e:	4602      	mov	r2, r0
 8001e60:	693b      	ldr	r3, [r7, #16]
 8001e62:	1ad3      	subs	r3, r2, r3
 8001e64:	2b02      	cmp	r3, #2
 8001e66:	d901      	bls.n	8001e6c <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8001e68:	2303      	movs	r3, #3
 8001e6a:	e264      	b.n	8002336 <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001e6c:	4b82      	ldr	r3, [pc, #520]	; (8002078 <HAL_RCC_OscConfig+0x578>)
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001e74:	2b00      	cmp	r3, #0
 8001e76:	d0f0      	beq.n	8001e5a <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001e78:	4b7f      	ldr	r3, [pc, #508]	; (8002078 <HAL_RCC_OscConfig+0x578>)
 8001e7a:	685b      	ldr	r3, [r3, #4]
 8001e7c:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	691b      	ldr	r3, [r3, #16]
 8001e84:	061b      	lsls	r3, r3, #24
 8001e86:	497c      	ldr	r1, [pc, #496]	; (8002078 <HAL_RCC_OscConfig+0x578>)
 8001e88:	4313      	orrs	r3, r2
 8001e8a:	604b      	str	r3, [r1, #4]
 8001e8c:	e018      	b.n	8001ec0 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001e8e:	4b7a      	ldr	r3, [pc, #488]	; (8002078 <HAL_RCC_OscConfig+0x578>)
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	4a79      	ldr	r2, [pc, #484]	; (8002078 <HAL_RCC_OscConfig+0x578>)
 8001e94:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001e98:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e9a:	f7ff fb1b 	bl	80014d4 <HAL_GetTick>
 8001e9e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001ea0:	e008      	b.n	8001eb4 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001ea2:	f7ff fb17 	bl	80014d4 <HAL_GetTick>
 8001ea6:	4602      	mov	r2, r0
 8001ea8:	693b      	ldr	r3, [r7, #16]
 8001eaa:	1ad3      	subs	r3, r2, r3
 8001eac:	2b02      	cmp	r3, #2
 8001eae:	d901      	bls.n	8001eb4 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8001eb0:	2303      	movs	r3, #3
 8001eb2:	e240      	b.n	8002336 <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001eb4:	4b70      	ldr	r3, [pc, #448]	; (8002078 <HAL_RCC_OscConfig+0x578>)
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001ebc:	2b00      	cmp	r3, #0
 8001ebe:	d1f0      	bne.n	8001ea2 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	f003 0308 	and.w	r3, r3, #8
 8001ec8:	2b00      	cmp	r3, #0
 8001eca:	d03c      	beq.n	8001f46 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	695b      	ldr	r3, [r3, #20]
 8001ed0:	2b00      	cmp	r3, #0
 8001ed2:	d01c      	beq.n	8001f0e <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001ed4:	4b68      	ldr	r3, [pc, #416]	; (8002078 <HAL_RCC_OscConfig+0x578>)
 8001ed6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001eda:	4a67      	ldr	r2, [pc, #412]	; (8002078 <HAL_RCC_OscConfig+0x578>)
 8001edc:	f043 0301 	orr.w	r3, r3, #1
 8001ee0:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001ee4:	f7ff faf6 	bl	80014d4 <HAL_GetTick>
 8001ee8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001eea:	e008      	b.n	8001efe <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001eec:	f7ff faf2 	bl	80014d4 <HAL_GetTick>
 8001ef0:	4602      	mov	r2, r0
 8001ef2:	693b      	ldr	r3, [r7, #16]
 8001ef4:	1ad3      	subs	r3, r2, r3
 8001ef6:	2b02      	cmp	r3, #2
 8001ef8:	d901      	bls.n	8001efe <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8001efa:	2303      	movs	r3, #3
 8001efc:	e21b      	b.n	8002336 <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001efe:	4b5e      	ldr	r3, [pc, #376]	; (8002078 <HAL_RCC_OscConfig+0x578>)
 8001f00:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001f04:	f003 0302 	and.w	r3, r3, #2
 8001f08:	2b00      	cmp	r3, #0
 8001f0a:	d0ef      	beq.n	8001eec <HAL_RCC_OscConfig+0x3ec>
 8001f0c:	e01b      	b.n	8001f46 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001f0e:	4b5a      	ldr	r3, [pc, #360]	; (8002078 <HAL_RCC_OscConfig+0x578>)
 8001f10:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001f14:	4a58      	ldr	r2, [pc, #352]	; (8002078 <HAL_RCC_OscConfig+0x578>)
 8001f16:	f023 0301 	bic.w	r3, r3, #1
 8001f1a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001f1e:	f7ff fad9 	bl	80014d4 <HAL_GetTick>
 8001f22:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001f24:	e008      	b.n	8001f38 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001f26:	f7ff fad5 	bl	80014d4 <HAL_GetTick>
 8001f2a:	4602      	mov	r2, r0
 8001f2c:	693b      	ldr	r3, [r7, #16]
 8001f2e:	1ad3      	subs	r3, r2, r3
 8001f30:	2b02      	cmp	r3, #2
 8001f32:	d901      	bls.n	8001f38 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8001f34:	2303      	movs	r3, #3
 8001f36:	e1fe      	b.n	8002336 <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001f38:	4b4f      	ldr	r3, [pc, #316]	; (8002078 <HAL_RCC_OscConfig+0x578>)
 8001f3a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001f3e:	f003 0302 	and.w	r3, r3, #2
 8001f42:	2b00      	cmp	r3, #0
 8001f44:	d1ef      	bne.n	8001f26 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	f003 0304 	and.w	r3, r3, #4
 8001f4e:	2b00      	cmp	r3, #0
 8001f50:	f000 80a6 	beq.w	80020a0 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001f54:	2300      	movs	r3, #0
 8001f56:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8001f58:	4b47      	ldr	r3, [pc, #284]	; (8002078 <HAL_RCC_OscConfig+0x578>)
 8001f5a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f5c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f60:	2b00      	cmp	r3, #0
 8001f62:	d10d      	bne.n	8001f80 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001f64:	4b44      	ldr	r3, [pc, #272]	; (8002078 <HAL_RCC_OscConfig+0x578>)
 8001f66:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f68:	4a43      	ldr	r2, [pc, #268]	; (8002078 <HAL_RCC_OscConfig+0x578>)
 8001f6a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001f6e:	6593      	str	r3, [r2, #88]	; 0x58
 8001f70:	4b41      	ldr	r3, [pc, #260]	; (8002078 <HAL_RCC_OscConfig+0x578>)
 8001f72:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f74:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f78:	60bb      	str	r3, [r7, #8]
 8001f7a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001f7c:	2301      	movs	r3, #1
 8001f7e:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001f80:	4b3e      	ldr	r3, [pc, #248]	; (800207c <HAL_RCC_OscConfig+0x57c>)
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f88:	2b00      	cmp	r3, #0
 8001f8a:	d118      	bne.n	8001fbe <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001f8c:	4b3b      	ldr	r3, [pc, #236]	; (800207c <HAL_RCC_OscConfig+0x57c>)
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	4a3a      	ldr	r2, [pc, #232]	; (800207c <HAL_RCC_OscConfig+0x57c>)
 8001f92:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001f96:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001f98:	f7ff fa9c 	bl	80014d4 <HAL_GetTick>
 8001f9c:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001f9e:	e008      	b.n	8001fb2 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001fa0:	f7ff fa98 	bl	80014d4 <HAL_GetTick>
 8001fa4:	4602      	mov	r2, r0
 8001fa6:	693b      	ldr	r3, [r7, #16]
 8001fa8:	1ad3      	subs	r3, r2, r3
 8001faa:	2b02      	cmp	r3, #2
 8001fac:	d901      	bls.n	8001fb2 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8001fae:	2303      	movs	r3, #3
 8001fb0:	e1c1      	b.n	8002336 <HAL_RCC_OscConfig+0x836>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001fb2:	4b32      	ldr	r3, [pc, #200]	; (800207c <HAL_RCC_OscConfig+0x57c>)
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001fba:	2b00      	cmp	r3, #0
 8001fbc:	d0f0      	beq.n	8001fa0 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	689b      	ldr	r3, [r3, #8]
 8001fc2:	2b01      	cmp	r3, #1
 8001fc4:	d108      	bne.n	8001fd8 <HAL_RCC_OscConfig+0x4d8>
 8001fc6:	4b2c      	ldr	r3, [pc, #176]	; (8002078 <HAL_RCC_OscConfig+0x578>)
 8001fc8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001fcc:	4a2a      	ldr	r2, [pc, #168]	; (8002078 <HAL_RCC_OscConfig+0x578>)
 8001fce:	f043 0301 	orr.w	r3, r3, #1
 8001fd2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001fd6:	e024      	b.n	8002022 <HAL_RCC_OscConfig+0x522>
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	689b      	ldr	r3, [r3, #8]
 8001fdc:	2b05      	cmp	r3, #5
 8001fde:	d110      	bne.n	8002002 <HAL_RCC_OscConfig+0x502>
 8001fe0:	4b25      	ldr	r3, [pc, #148]	; (8002078 <HAL_RCC_OscConfig+0x578>)
 8001fe2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001fe6:	4a24      	ldr	r2, [pc, #144]	; (8002078 <HAL_RCC_OscConfig+0x578>)
 8001fe8:	f043 0304 	orr.w	r3, r3, #4
 8001fec:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001ff0:	4b21      	ldr	r3, [pc, #132]	; (8002078 <HAL_RCC_OscConfig+0x578>)
 8001ff2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001ff6:	4a20      	ldr	r2, [pc, #128]	; (8002078 <HAL_RCC_OscConfig+0x578>)
 8001ff8:	f043 0301 	orr.w	r3, r3, #1
 8001ffc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002000:	e00f      	b.n	8002022 <HAL_RCC_OscConfig+0x522>
 8002002:	4b1d      	ldr	r3, [pc, #116]	; (8002078 <HAL_RCC_OscConfig+0x578>)
 8002004:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002008:	4a1b      	ldr	r2, [pc, #108]	; (8002078 <HAL_RCC_OscConfig+0x578>)
 800200a:	f023 0301 	bic.w	r3, r3, #1
 800200e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002012:	4b19      	ldr	r3, [pc, #100]	; (8002078 <HAL_RCC_OscConfig+0x578>)
 8002014:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002018:	4a17      	ldr	r2, [pc, #92]	; (8002078 <HAL_RCC_OscConfig+0x578>)
 800201a:	f023 0304 	bic.w	r3, r3, #4
 800201e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	689b      	ldr	r3, [r3, #8]
 8002026:	2b00      	cmp	r3, #0
 8002028:	d016      	beq.n	8002058 <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800202a:	f7ff fa53 	bl	80014d4 <HAL_GetTick>
 800202e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002030:	e00a      	b.n	8002048 <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002032:	f7ff fa4f 	bl	80014d4 <HAL_GetTick>
 8002036:	4602      	mov	r2, r0
 8002038:	693b      	ldr	r3, [r7, #16]
 800203a:	1ad3      	subs	r3, r2, r3
 800203c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002040:	4293      	cmp	r3, r2
 8002042:	d901      	bls.n	8002048 <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 8002044:	2303      	movs	r3, #3
 8002046:	e176      	b.n	8002336 <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002048:	4b0b      	ldr	r3, [pc, #44]	; (8002078 <HAL_RCC_OscConfig+0x578>)
 800204a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800204e:	f003 0302 	and.w	r3, r3, #2
 8002052:	2b00      	cmp	r3, #0
 8002054:	d0ed      	beq.n	8002032 <HAL_RCC_OscConfig+0x532>
 8002056:	e01a      	b.n	800208e <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002058:	f7ff fa3c 	bl	80014d4 <HAL_GetTick>
 800205c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800205e:	e00f      	b.n	8002080 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002060:	f7ff fa38 	bl	80014d4 <HAL_GetTick>
 8002064:	4602      	mov	r2, r0
 8002066:	693b      	ldr	r3, [r7, #16]
 8002068:	1ad3      	subs	r3, r2, r3
 800206a:	f241 3288 	movw	r2, #5000	; 0x1388
 800206e:	4293      	cmp	r3, r2
 8002070:	d906      	bls.n	8002080 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8002072:	2303      	movs	r3, #3
 8002074:	e15f      	b.n	8002336 <HAL_RCC_OscConfig+0x836>
 8002076:	bf00      	nop
 8002078:	40021000 	.word	0x40021000
 800207c:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002080:	4baa      	ldr	r3, [pc, #680]	; (800232c <HAL_RCC_OscConfig+0x82c>)
 8002082:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002086:	f003 0302 	and.w	r3, r3, #2
 800208a:	2b00      	cmp	r3, #0
 800208c:	d1e8      	bne.n	8002060 <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800208e:	7ffb      	ldrb	r3, [r7, #31]
 8002090:	2b01      	cmp	r3, #1
 8002092:	d105      	bne.n	80020a0 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002094:	4ba5      	ldr	r3, [pc, #660]	; (800232c <HAL_RCC_OscConfig+0x82c>)
 8002096:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002098:	4aa4      	ldr	r2, [pc, #656]	; (800232c <HAL_RCC_OscConfig+0x82c>)
 800209a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800209e:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	f003 0320 	and.w	r3, r3, #32
 80020a8:	2b00      	cmp	r3, #0
 80020aa:	d03c      	beq.n	8002126 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020b0:	2b00      	cmp	r3, #0
 80020b2:	d01c      	beq.n	80020ee <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80020b4:	4b9d      	ldr	r3, [pc, #628]	; (800232c <HAL_RCC_OscConfig+0x82c>)
 80020b6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80020ba:	4a9c      	ldr	r2, [pc, #624]	; (800232c <HAL_RCC_OscConfig+0x82c>)
 80020bc:	f043 0301 	orr.w	r3, r3, #1
 80020c0:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80020c4:	f7ff fa06 	bl	80014d4 <HAL_GetTick>
 80020c8:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80020ca:	e008      	b.n	80020de <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80020cc:	f7ff fa02 	bl	80014d4 <HAL_GetTick>
 80020d0:	4602      	mov	r2, r0
 80020d2:	693b      	ldr	r3, [r7, #16]
 80020d4:	1ad3      	subs	r3, r2, r3
 80020d6:	2b02      	cmp	r3, #2
 80020d8:	d901      	bls.n	80020de <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 80020da:	2303      	movs	r3, #3
 80020dc:	e12b      	b.n	8002336 <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80020de:	4b93      	ldr	r3, [pc, #588]	; (800232c <HAL_RCC_OscConfig+0x82c>)
 80020e0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80020e4:	f003 0302 	and.w	r3, r3, #2
 80020e8:	2b00      	cmp	r3, #0
 80020ea:	d0ef      	beq.n	80020cc <HAL_RCC_OscConfig+0x5cc>
 80020ec:	e01b      	b.n	8002126 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80020ee:	4b8f      	ldr	r3, [pc, #572]	; (800232c <HAL_RCC_OscConfig+0x82c>)
 80020f0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80020f4:	4a8d      	ldr	r2, [pc, #564]	; (800232c <HAL_RCC_OscConfig+0x82c>)
 80020f6:	f023 0301 	bic.w	r3, r3, #1
 80020fa:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80020fe:	f7ff f9e9 	bl	80014d4 <HAL_GetTick>
 8002102:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002104:	e008      	b.n	8002118 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002106:	f7ff f9e5 	bl	80014d4 <HAL_GetTick>
 800210a:	4602      	mov	r2, r0
 800210c:	693b      	ldr	r3, [r7, #16]
 800210e:	1ad3      	subs	r3, r2, r3
 8002110:	2b02      	cmp	r3, #2
 8002112:	d901      	bls.n	8002118 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8002114:	2303      	movs	r3, #3
 8002116:	e10e      	b.n	8002336 <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002118:	4b84      	ldr	r3, [pc, #528]	; (800232c <HAL_RCC_OscConfig+0x82c>)
 800211a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800211e:	f003 0302 	and.w	r3, r3, #2
 8002122:	2b00      	cmp	r3, #0
 8002124:	d1ef      	bne.n	8002106 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800212a:	2b00      	cmp	r3, #0
 800212c:	f000 8102 	beq.w	8002334 <HAL_RCC_OscConfig+0x834>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002134:	2b02      	cmp	r3, #2
 8002136:	f040 80c5 	bne.w	80022c4 <HAL_RCC_OscConfig+0x7c4>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 800213a:	4b7c      	ldr	r3, [pc, #496]	; (800232c <HAL_RCC_OscConfig+0x82c>)
 800213c:	68db      	ldr	r3, [r3, #12]
 800213e:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002140:	697b      	ldr	r3, [r7, #20]
 8002142:	f003 0203 	and.w	r2, r3, #3
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800214a:	429a      	cmp	r2, r3
 800214c:	d12c      	bne.n	80021a8 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800214e:	697b      	ldr	r3, [r7, #20]
 8002150:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002158:	3b01      	subs	r3, #1
 800215a:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800215c:	429a      	cmp	r2, r3
 800215e:	d123      	bne.n	80021a8 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002160:	697b      	ldr	r3, [r7, #20]
 8002162:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800216a:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800216c:	429a      	cmp	r2, r3
 800216e:	d11b      	bne.n	80021a8 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002170:	697b      	ldr	r3, [r7, #20]
 8002172:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800217a:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800217c:	429a      	cmp	r2, r3
 800217e:	d113      	bne.n	80021a8 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002180:	697b      	ldr	r3, [r7, #20]
 8002182:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800218a:	085b      	lsrs	r3, r3, #1
 800218c:	3b01      	subs	r3, #1
 800218e:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002190:	429a      	cmp	r2, r3
 8002192:	d109      	bne.n	80021a8 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8002194:	697b      	ldr	r3, [r7, #20]
 8002196:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800219e:	085b      	lsrs	r3, r3, #1
 80021a0:	3b01      	subs	r3, #1
 80021a2:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80021a4:	429a      	cmp	r2, r3
 80021a6:	d067      	beq.n	8002278 <HAL_RCC_OscConfig+0x778>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80021a8:	69bb      	ldr	r3, [r7, #24]
 80021aa:	2b0c      	cmp	r3, #12
 80021ac:	d062      	beq.n	8002274 <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80021ae:	4b5f      	ldr	r3, [pc, #380]	; (800232c <HAL_RCC_OscConfig+0x82c>)
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80021b6:	2b00      	cmp	r3, #0
 80021b8:	d001      	beq.n	80021be <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 80021ba:	2301      	movs	r3, #1
 80021bc:	e0bb      	b.n	8002336 <HAL_RCC_OscConfig+0x836>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80021be:	4b5b      	ldr	r3, [pc, #364]	; (800232c <HAL_RCC_OscConfig+0x82c>)
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	4a5a      	ldr	r2, [pc, #360]	; (800232c <HAL_RCC_OscConfig+0x82c>)
 80021c4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80021c8:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80021ca:	f7ff f983 	bl	80014d4 <HAL_GetTick>
 80021ce:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80021d0:	e008      	b.n	80021e4 <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80021d2:	f7ff f97f 	bl	80014d4 <HAL_GetTick>
 80021d6:	4602      	mov	r2, r0
 80021d8:	693b      	ldr	r3, [r7, #16]
 80021da:	1ad3      	subs	r3, r2, r3
 80021dc:	2b02      	cmp	r3, #2
 80021de:	d901      	bls.n	80021e4 <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 80021e0:	2303      	movs	r3, #3
 80021e2:	e0a8      	b.n	8002336 <HAL_RCC_OscConfig+0x836>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80021e4:	4b51      	ldr	r3, [pc, #324]	; (800232c <HAL_RCC_OscConfig+0x82c>)
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80021ec:	2b00      	cmp	r3, #0
 80021ee:	d1f0      	bne.n	80021d2 <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80021f0:	4b4e      	ldr	r3, [pc, #312]	; (800232c <HAL_RCC_OscConfig+0x82c>)
 80021f2:	68da      	ldr	r2, [r3, #12]
 80021f4:	4b4e      	ldr	r3, [pc, #312]	; (8002330 <HAL_RCC_OscConfig+0x830>)
 80021f6:	4013      	ands	r3, r2
 80021f8:	687a      	ldr	r2, [r7, #4]
 80021fa:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 80021fc:	687a      	ldr	r2, [r7, #4]
 80021fe:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8002200:	3a01      	subs	r2, #1
 8002202:	0112      	lsls	r2, r2, #4
 8002204:	4311      	orrs	r1, r2
 8002206:	687a      	ldr	r2, [r7, #4]
 8002208:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800220a:	0212      	lsls	r2, r2, #8
 800220c:	4311      	orrs	r1, r2
 800220e:	687a      	ldr	r2, [r7, #4]
 8002210:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8002212:	0852      	lsrs	r2, r2, #1
 8002214:	3a01      	subs	r2, #1
 8002216:	0552      	lsls	r2, r2, #21
 8002218:	4311      	orrs	r1, r2
 800221a:	687a      	ldr	r2, [r7, #4]
 800221c:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800221e:	0852      	lsrs	r2, r2, #1
 8002220:	3a01      	subs	r2, #1
 8002222:	0652      	lsls	r2, r2, #25
 8002224:	4311      	orrs	r1, r2
 8002226:	687a      	ldr	r2, [r7, #4]
 8002228:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800222a:	06d2      	lsls	r2, r2, #27
 800222c:	430a      	orrs	r2, r1
 800222e:	493f      	ldr	r1, [pc, #252]	; (800232c <HAL_RCC_OscConfig+0x82c>)
 8002230:	4313      	orrs	r3, r2
 8002232:	60cb      	str	r3, [r1, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8002234:	4b3d      	ldr	r3, [pc, #244]	; (800232c <HAL_RCC_OscConfig+0x82c>)
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	4a3c      	ldr	r2, [pc, #240]	; (800232c <HAL_RCC_OscConfig+0x82c>)
 800223a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800223e:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002240:	4b3a      	ldr	r3, [pc, #232]	; (800232c <HAL_RCC_OscConfig+0x82c>)
 8002242:	68db      	ldr	r3, [r3, #12]
 8002244:	4a39      	ldr	r2, [pc, #228]	; (800232c <HAL_RCC_OscConfig+0x82c>)
 8002246:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800224a:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800224c:	f7ff f942 	bl	80014d4 <HAL_GetTick>
 8002250:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002252:	e008      	b.n	8002266 <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002254:	f7ff f93e 	bl	80014d4 <HAL_GetTick>
 8002258:	4602      	mov	r2, r0
 800225a:	693b      	ldr	r3, [r7, #16]
 800225c:	1ad3      	subs	r3, r2, r3
 800225e:	2b02      	cmp	r3, #2
 8002260:	d901      	bls.n	8002266 <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 8002262:	2303      	movs	r3, #3
 8002264:	e067      	b.n	8002336 <HAL_RCC_OscConfig+0x836>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002266:	4b31      	ldr	r3, [pc, #196]	; (800232c <HAL_RCC_OscConfig+0x82c>)
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800226e:	2b00      	cmp	r3, #0
 8002270:	d0f0      	beq.n	8002254 <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002272:	e05f      	b.n	8002334 <HAL_RCC_OscConfig+0x834>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8002274:	2301      	movs	r3, #1
 8002276:	e05e      	b.n	8002336 <HAL_RCC_OscConfig+0x836>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002278:	4b2c      	ldr	r3, [pc, #176]	; (800232c <HAL_RCC_OscConfig+0x82c>)
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002280:	2b00      	cmp	r3, #0
 8002282:	d157      	bne.n	8002334 <HAL_RCC_OscConfig+0x834>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8002284:	4b29      	ldr	r3, [pc, #164]	; (800232c <HAL_RCC_OscConfig+0x82c>)
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	4a28      	ldr	r2, [pc, #160]	; (800232c <HAL_RCC_OscConfig+0x82c>)
 800228a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800228e:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002290:	4b26      	ldr	r3, [pc, #152]	; (800232c <HAL_RCC_OscConfig+0x82c>)
 8002292:	68db      	ldr	r3, [r3, #12]
 8002294:	4a25      	ldr	r2, [pc, #148]	; (800232c <HAL_RCC_OscConfig+0x82c>)
 8002296:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800229a:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800229c:	f7ff f91a 	bl	80014d4 <HAL_GetTick>
 80022a0:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80022a2:	e008      	b.n	80022b6 <HAL_RCC_OscConfig+0x7b6>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80022a4:	f7ff f916 	bl	80014d4 <HAL_GetTick>
 80022a8:	4602      	mov	r2, r0
 80022aa:	693b      	ldr	r3, [r7, #16]
 80022ac:	1ad3      	subs	r3, r2, r3
 80022ae:	2b02      	cmp	r3, #2
 80022b0:	d901      	bls.n	80022b6 <HAL_RCC_OscConfig+0x7b6>
            {
              return HAL_TIMEOUT;
 80022b2:	2303      	movs	r3, #3
 80022b4:	e03f      	b.n	8002336 <HAL_RCC_OscConfig+0x836>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80022b6:	4b1d      	ldr	r3, [pc, #116]	; (800232c <HAL_RCC_OscConfig+0x82c>)
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80022be:	2b00      	cmp	r3, #0
 80022c0:	d0f0      	beq.n	80022a4 <HAL_RCC_OscConfig+0x7a4>
 80022c2:	e037      	b.n	8002334 <HAL_RCC_OscConfig+0x834>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80022c4:	69bb      	ldr	r3, [r7, #24]
 80022c6:	2b0c      	cmp	r3, #12
 80022c8:	d02d      	beq.n	8002326 <HAL_RCC_OscConfig+0x826>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80022ca:	4b18      	ldr	r3, [pc, #96]	; (800232c <HAL_RCC_OscConfig+0x82c>)
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	4a17      	ldr	r2, [pc, #92]	; (800232c <HAL_RCC_OscConfig+0x82c>)
 80022d0:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80022d4:	6013      	str	r3, [r2, #0]
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
        }
#elif defined(RCC_PLLSAI1_SUPPORT)
        if(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80022d6:	4b15      	ldr	r3, [pc, #84]	; (800232c <HAL_RCC_OscConfig+0x82c>)
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80022de:	2b00      	cmp	r3, #0
 80022e0:	d105      	bne.n	80022ee <HAL_RCC_OscConfig+0x7ee>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 80022e2:	4b12      	ldr	r3, [pc, #72]	; (800232c <HAL_RCC_OscConfig+0x82c>)
 80022e4:	68db      	ldr	r3, [r3, #12]
 80022e6:	4a11      	ldr	r2, [pc, #68]	; (800232c <HAL_RCC_OscConfig+0x82c>)
 80022e8:	f023 0303 	bic.w	r3, r3, #3
 80022ec:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 80022ee:	4b0f      	ldr	r3, [pc, #60]	; (800232c <HAL_RCC_OscConfig+0x82c>)
 80022f0:	68db      	ldr	r3, [r3, #12]
 80022f2:	4a0e      	ldr	r2, [pc, #56]	; (800232c <HAL_RCC_OscConfig+0x82c>)
 80022f4:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 80022f8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80022fc:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80022fe:	f7ff f8e9 	bl	80014d4 <HAL_GetTick>
 8002302:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002304:	e008      	b.n	8002318 <HAL_RCC_OscConfig+0x818>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002306:	f7ff f8e5 	bl	80014d4 <HAL_GetTick>
 800230a:	4602      	mov	r2, r0
 800230c:	693b      	ldr	r3, [r7, #16]
 800230e:	1ad3      	subs	r3, r2, r3
 8002310:	2b02      	cmp	r3, #2
 8002312:	d901      	bls.n	8002318 <HAL_RCC_OscConfig+0x818>
          {
            return HAL_TIMEOUT;
 8002314:	2303      	movs	r3, #3
 8002316:	e00e      	b.n	8002336 <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002318:	4b04      	ldr	r3, [pc, #16]	; (800232c <HAL_RCC_OscConfig+0x82c>)
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002320:	2b00      	cmp	r3, #0
 8002322:	d1f0      	bne.n	8002306 <HAL_RCC_OscConfig+0x806>
 8002324:	e006      	b.n	8002334 <HAL_RCC_OscConfig+0x834>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8002326:	2301      	movs	r3, #1
 8002328:	e005      	b.n	8002336 <HAL_RCC_OscConfig+0x836>
 800232a:	bf00      	nop
 800232c:	40021000 	.word	0x40021000
 8002330:	019d808c 	.word	0x019d808c
      }
    }
  }
  return HAL_OK;
 8002334:	2300      	movs	r3, #0
}
 8002336:	4618      	mov	r0, r3
 8002338:	3720      	adds	r7, #32
 800233a:	46bd      	mov	sp, r7
 800233c:	bd80      	pop	{r7, pc}
 800233e:	bf00      	nop

08002340 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002340:	b580      	push	{r7, lr}
 8002342:	b084      	sub	sp, #16
 8002344:	af00      	add	r7, sp, #0
 8002346:	6078      	str	r0, [r7, #4]
 8002348:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	2b00      	cmp	r3, #0
 800234e:	d101      	bne.n	8002354 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002350:	2301      	movs	r3, #1
 8002352:	e0c8      	b.n	80024e6 <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002354:	4b66      	ldr	r3, [pc, #408]	; (80024f0 <HAL_RCC_ClockConfig+0x1b0>)
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	f003 0307 	and.w	r3, r3, #7
 800235c:	683a      	ldr	r2, [r7, #0]
 800235e:	429a      	cmp	r2, r3
 8002360:	d910      	bls.n	8002384 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002362:	4b63      	ldr	r3, [pc, #396]	; (80024f0 <HAL_RCC_ClockConfig+0x1b0>)
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	f023 0207 	bic.w	r2, r3, #7
 800236a:	4961      	ldr	r1, [pc, #388]	; (80024f0 <HAL_RCC_ClockConfig+0x1b0>)
 800236c:	683b      	ldr	r3, [r7, #0]
 800236e:	4313      	orrs	r3, r2
 8002370:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002372:	4b5f      	ldr	r3, [pc, #380]	; (80024f0 <HAL_RCC_ClockConfig+0x1b0>)
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	f003 0307 	and.w	r3, r3, #7
 800237a:	683a      	ldr	r2, [r7, #0]
 800237c:	429a      	cmp	r2, r3
 800237e:	d001      	beq.n	8002384 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002380:	2301      	movs	r3, #1
 8002382:	e0b0      	b.n	80024e6 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	f003 0301 	and.w	r3, r3, #1
 800238c:	2b00      	cmp	r3, #0
 800238e:	d04c      	beq.n	800242a <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	685b      	ldr	r3, [r3, #4]
 8002394:	2b03      	cmp	r3, #3
 8002396:	d107      	bne.n	80023a8 <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002398:	4b56      	ldr	r3, [pc, #344]	; (80024f4 <HAL_RCC_ClockConfig+0x1b4>)
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80023a0:	2b00      	cmp	r3, #0
 80023a2:	d121      	bne.n	80023e8 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 80023a4:	2301      	movs	r3, #1
 80023a6:	e09e      	b.n	80024e6 <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	685b      	ldr	r3, [r3, #4]
 80023ac:	2b02      	cmp	r3, #2
 80023ae:	d107      	bne.n	80023c0 <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80023b0:	4b50      	ldr	r3, [pc, #320]	; (80024f4 <HAL_RCC_ClockConfig+0x1b4>)
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80023b8:	2b00      	cmp	r3, #0
 80023ba:	d115      	bne.n	80023e8 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 80023bc:	2301      	movs	r3, #1
 80023be:	e092      	b.n	80024e6 <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	685b      	ldr	r3, [r3, #4]
 80023c4:	2b00      	cmp	r3, #0
 80023c6:	d107      	bne.n	80023d8 <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80023c8:	4b4a      	ldr	r3, [pc, #296]	; (80024f4 <HAL_RCC_ClockConfig+0x1b4>)
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	f003 0302 	and.w	r3, r3, #2
 80023d0:	2b00      	cmp	r3, #0
 80023d2:	d109      	bne.n	80023e8 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 80023d4:	2301      	movs	r3, #1
 80023d6:	e086      	b.n	80024e6 <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80023d8:	4b46      	ldr	r3, [pc, #280]	; (80024f4 <HAL_RCC_ClockConfig+0x1b4>)
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80023e0:	2b00      	cmp	r3, #0
 80023e2:	d101      	bne.n	80023e8 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 80023e4:	2301      	movs	r3, #1
 80023e6:	e07e      	b.n	80024e6 <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80023e8:	4b42      	ldr	r3, [pc, #264]	; (80024f4 <HAL_RCC_ClockConfig+0x1b4>)
 80023ea:	689b      	ldr	r3, [r3, #8]
 80023ec:	f023 0203 	bic.w	r2, r3, #3
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	685b      	ldr	r3, [r3, #4]
 80023f4:	493f      	ldr	r1, [pc, #252]	; (80024f4 <HAL_RCC_ClockConfig+0x1b4>)
 80023f6:	4313      	orrs	r3, r2
 80023f8:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80023fa:	f7ff f86b 	bl	80014d4 <HAL_GetTick>
 80023fe:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002400:	e00a      	b.n	8002418 <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002402:	f7ff f867 	bl	80014d4 <HAL_GetTick>
 8002406:	4602      	mov	r2, r0
 8002408:	68fb      	ldr	r3, [r7, #12]
 800240a:	1ad3      	subs	r3, r2, r3
 800240c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002410:	4293      	cmp	r3, r2
 8002412:	d901      	bls.n	8002418 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 8002414:	2303      	movs	r3, #3
 8002416:	e066      	b.n	80024e6 <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002418:	4b36      	ldr	r3, [pc, #216]	; (80024f4 <HAL_RCC_ClockConfig+0x1b4>)
 800241a:	689b      	ldr	r3, [r3, #8]
 800241c:	f003 020c 	and.w	r2, r3, #12
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	685b      	ldr	r3, [r3, #4]
 8002424:	009b      	lsls	r3, r3, #2
 8002426:	429a      	cmp	r2, r3
 8002428:	d1eb      	bne.n	8002402 <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	f003 0302 	and.w	r3, r3, #2
 8002432:	2b00      	cmp	r3, #0
 8002434:	d008      	beq.n	8002448 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002436:	4b2f      	ldr	r3, [pc, #188]	; (80024f4 <HAL_RCC_ClockConfig+0x1b4>)
 8002438:	689b      	ldr	r3, [r3, #8]
 800243a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	689b      	ldr	r3, [r3, #8]
 8002442:	492c      	ldr	r1, [pc, #176]	; (80024f4 <HAL_RCC_ClockConfig+0x1b4>)
 8002444:	4313      	orrs	r3, r2
 8002446:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002448:	4b29      	ldr	r3, [pc, #164]	; (80024f0 <HAL_RCC_ClockConfig+0x1b0>)
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	f003 0307 	and.w	r3, r3, #7
 8002450:	683a      	ldr	r2, [r7, #0]
 8002452:	429a      	cmp	r2, r3
 8002454:	d210      	bcs.n	8002478 <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002456:	4b26      	ldr	r3, [pc, #152]	; (80024f0 <HAL_RCC_ClockConfig+0x1b0>)
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	f023 0207 	bic.w	r2, r3, #7
 800245e:	4924      	ldr	r1, [pc, #144]	; (80024f0 <HAL_RCC_ClockConfig+0x1b0>)
 8002460:	683b      	ldr	r3, [r7, #0]
 8002462:	4313      	orrs	r3, r2
 8002464:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002466:	4b22      	ldr	r3, [pc, #136]	; (80024f0 <HAL_RCC_ClockConfig+0x1b0>)
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	f003 0307 	and.w	r3, r3, #7
 800246e:	683a      	ldr	r2, [r7, #0]
 8002470:	429a      	cmp	r2, r3
 8002472:	d001      	beq.n	8002478 <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 8002474:	2301      	movs	r3, #1
 8002476:	e036      	b.n	80024e6 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	f003 0304 	and.w	r3, r3, #4
 8002480:	2b00      	cmp	r3, #0
 8002482:	d008      	beq.n	8002496 <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002484:	4b1b      	ldr	r3, [pc, #108]	; (80024f4 <HAL_RCC_ClockConfig+0x1b4>)
 8002486:	689b      	ldr	r3, [r3, #8]
 8002488:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	68db      	ldr	r3, [r3, #12]
 8002490:	4918      	ldr	r1, [pc, #96]	; (80024f4 <HAL_RCC_ClockConfig+0x1b4>)
 8002492:	4313      	orrs	r3, r2
 8002494:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	f003 0308 	and.w	r3, r3, #8
 800249e:	2b00      	cmp	r3, #0
 80024a0:	d009      	beq.n	80024b6 <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80024a2:	4b14      	ldr	r3, [pc, #80]	; (80024f4 <HAL_RCC_ClockConfig+0x1b4>)
 80024a4:	689b      	ldr	r3, [r3, #8]
 80024a6:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	691b      	ldr	r3, [r3, #16]
 80024ae:	00db      	lsls	r3, r3, #3
 80024b0:	4910      	ldr	r1, [pc, #64]	; (80024f4 <HAL_RCC_ClockConfig+0x1b4>)
 80024b2:	4313      	orrs	r3, r2
 80024b4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80024b6:	f000 f825 	bl	8002504 <HAL_RCC_GetSysClockFreq>
 80024ba:	4602      	mov	r2, r0
 80024bc:	4b0d      	ldr	r3, [pc, #52]	; (80024f4 <HAL_RCC_ClockConfig+0x1b4>)
 80024be:	689b      	ldr	r3, [r3, #8]
 80024c0:	091b      	lsrs	r3, r3, #4
 80024c2:	f003 030f 	and.w	r3, r3, #15
 80024c6:	490c      	ldr	r1, [pc, #48]	; (80024f8 <HAL_RCC_ClockConfig+0x1b8>)
 80024c8:	5ccb      	ldrb	r3, [r1, r3]
 80024ca:	f003 031f 	and.w	r3, r3, #31
 80024ce:	fa22 f303 	lsr.w	r3, r2, r3
 80024d2:	4a0a      	ldr	r2, [pc, #40]	; (80024fc <HAL_RCC_ClockConfig+0x1bc>)
 80024d4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80024d6:	4b0a      	ldr	r3, [pc, #40]	; (8002500 <HAL_RCC_ClockConfig+0x1c0>)
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	4618      	mov	r0, r3
 80024dc:	f7fe ffaa 	bl	8001434 <HAL_InitTick>
 80024e0:	4603      	mov	r3, r0
 80024e2:	72fb      	strb	r3, [r7, #11]

  return status;
 80024e4:	7afb      	ldrb	r3, [r7, #11]
}
 80024e6:	4618      	mov	r0, r3
 80024e8:	3710      	adds	r7, #16
 80024ea:	46bd      	mov	sp, r7
 80024ec:	bd80      	pop	{r7, pc}
 80024ee:	bf00      	nop
 80024f0:	40022000 	.word	0x40022000
 80024f4:	40021000 	.word	0x40021000
 80024f8:	08003a3c 	.word	0x08003a3c
 80024fc:	20000004 	.word	0x20000004
 8002500:	20000008 	.word	0x20000008

08002504 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002504:	b480      	push	{r7}
 8002506:	b089      	sub	sp, #36	; 0x24
 8002508:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800250a:	2300      	movs	r3, #0
 800250c:	61fb      	str	r3, [r7, #28]
 800250e:	2300      	movs	r3, #0
 8002510:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002512:	4b3e      	ldr	r3, [pc, #248]	; (800260c <HAL_RCC_GetSysClockFreq+0x108>)
 8002514:	689b      	ldr	r3, [r3, #8]
 8002516:	f003 030c 	and.w	r3, r3, #12
 800251a:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 800251c:	4b3b      	ldr	r3, [pc, #236]	; (800260c <HAL_RCC_GetSysClockFreq+0x108>)
 800251e:	68db      	ldr	r3, [r3, #12]
 8002520:	f003 0303 	and.w	r3, r3, #3
 8002524:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002526:	693b      	ldr	r3, [r7, #16]
 8002528:	2b00      	cmp	r3, #0
 800252a:	d005      	beq.n	8002538 <HAL_RCC_GetSysClockFreq+0x34>
 800252c:	693b      	ldr	r3, [r7, #16]
 800252e:	2b0c      	cmp	r3, #12
 8002530:	d121      	bne.n	8002576 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8002532:	68fb      	ldr	r3, [r7, #12]
 8002534:	2b01      	cmp	r3, #1
 8002536:	d11e      	bne.n	8002576 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002538:	4b34      	ldr	r3, [pc, #208]	; (800260c <HAL_RCC_GetSysClockFreq+0x108>)
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	f003 0308 	and.w	r3, r3, #8
 8002540:	2b00      	cmp	r3, #0
 8002542:	d107      	bne.n	8002554 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002544:	4b31      	ldr	r3, [pc, #196]	; (800260c <HAL_RCC_GetSysClockFreq+0x108>)
 8002546:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800254a:	0a1b      	lsrs	r3, r3, #8
 800254c:	f003 030f 	and.w	r3, r3, #15
 8002550:	61fb      	str	r3, [r7, #28]
 8002552:	e005      	b.n	8002560 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002554:	4b2d      	ldr	r3, [pc, #180]	; (800260c <HAL_RCC_GetSysClockFreq+0x108>)
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	091b      	lsrs	r3, r3, #4
 800255a:	f003 030f 	and.w	r3, r3, #15
 800255e:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8002560:	4a2b      	ldr	r2, [pc, #172]	; (8002610 <HAL_RCC_GetSysClockFreq+0x10c>)
 8002562:	69fb      	ldr	r3, [r7, #28]
 8002564:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002568:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800256a:	693b      	ldr	r3, [r7, #16]
 800256c:	2b00      	cmp	r3, #0
 800256e:	d10d      	bne.n	800258c <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8002570:	69fb      	ldr	r3, [r7, #28]
 8002572:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002574:	e00a      	b.n	800258c <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8002576:	693b      	ldr	r3, [r7, #16]
 8002578:	2b04      	cmp	r3, #4
 800257a:	d102      	bne.n	8002582 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800257c:	4b25      	ldr	r3, [pc, #148]	; (8002614 <HAL_RCC_GetSysClockFreq+0x110>)
 800257e:	61bb      	str	r3, [r7, #24]
 8002580:	e004      	b.n	800258c <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8002582:	693b      	ldr	r3, [r7, #16]
 8002584:	2b08      	cmp	r3, #8
 8002586:	d101      	bne.n	800258c <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002588:	4b23      	ldr	r3, [pc, #140]	; (8002618 <HAL_RCC_GetSysClockFreq+0x114>)
 800258a:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 800258c:	693b      	ldr	r3, [r7, #16]
 800258e:	2b0c      	cmp	r3, #12
 8002590:	d134      	bne.n	80025fc <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002592:	4b1e      	ldr	r3, [pc, #120]	; (800260c <HAL_RCC_GetSysClockFreq+0x108>)
 8002594:	68db      	ldr	r3, [r3, #12]
 8002596:	f003 0303 	and.w	r3, r3, #3
 800259a:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800259c:	68bb      	ldr	r3, [r7, #8]
 800259e:	2b02      	cmp	r3, #2
 80025a0:	d003      	beq.n	80025aa <HAL_RCC_GetSysClockFreq+0xa6>
 80025a2:	68bb      	ldr	r3, [r7, #8]
 80025a4:	2b03      	cmp	r3, #3
 80025a6:	d003      	beq.n	80025b0 <HAL_RCC_GetSysClockFreq+0xac>
 80025a8:	e005      	b.n	80025b6 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80025aa:	4b1a      	ldr	r3, [pc, #104]	; (8002614 <HAL_RCC_GetSysClockFreq+0x110>)
 80025ac:	617b      	str	r3, [r7, #20]
      break;
 80025ae:	e005      	b.n	80025bc <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80025b0:	4b19      	ldr	r3, [pc, #100]	; (8002618 <HAL_RCC_GetSysClockFreq+0x114>)
 80025b2:	617b      	str	r3, [r7, #20]
      break;
 80025b4:	e002      	b.n	80025bc <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80025b6:	69fb      	ldr	r3, [r7, #28]
 80025b8:	617b      	str	r3, [r7, #20]
      break;
 80025ba:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80025bc:	4b13      	ldr	r3, [pc, #76]	; (800260c <HAL_RCC_GetSysClockFreq+0x108>)
 80025be:	68db      	ldr	r3, [r3, #12]
 80025c0:	091b      	lsrs	r3, r3, #4
 80025c2:	f003 0307 	and.w	r3, r3, #7
 80025c6:	3301      	adds	r3, #1
 80025c8:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80025ca:	4b10      	ldr	r3, [pc, #64]	; (800260c <HAL_RCC_GetSysClockFreq+0x108>)
 80025cc:	68db      	ldr	r3, [r3, #12]
 80025ce:	0a1b      	lsrs	r3, r3, #8
 80025d0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80025d4:	697a      	ldr	r2, [r7, #20]
 80025d6:	fb02 f203 	mul.w	r2, r2, r3
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	fbb2 f3f3 	udiv	r3, r2, r3
 80025e0:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80025e2:	4b0a      	ldr	r3, [pc, #40]	; (800260c <HAL_RCC_GetSysClockFreq+0x108>)
 80025e4:	68db      	ldr	r3, [r3, #12]
 80025e6:	0e5b      	lsrs	r3, r3, #25
 80025e8:	f003 0303 	and.w	r3, r3, #3
 80025ec:	3301      	adds	r3, #1
 80025ee:	005b      	lsls	r3, r3, #1
 80025f0:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80025f2:	697a      	ldr	r2, [r7, #20]
 80025f4:	683b      	ldr	r3, [r7, #0]
 80025f6:	fbb2 f3f3 	udiv	r3, r2, r3
 80025fa:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80025fc:	69bb      	ldr	r3, [r7, #24]
}
 80025fe:	4618      	mov	r0, r3
 8002600:	3724      	adds	r7, #36	; 0x24
 8002602:	46bd      	mov	sp, r7
 8002604:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002608:	4770      	bx	lr
 800260a:	bf00      	nop
 800260c:	40021000 	.word	0x40021000
 8002610:	08003a4c 	.word	0x08003a4c
 8002614:	00f42400 	.word	0x00f42400
 8002618:	007a1200 	.word	0x007a1200

0800261c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 800261c:	b580      	push	{r7, lr}
 800261e:	b086      	sub	sp, #24
 8002620:	af00      	add	r7, sp, #0
 8002622:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8002624:	2300      	movs	r3, #0
 8002626:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8002628:	4b2a      	ldr	r3, [pc, #168]	; (80026d4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800262a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800262c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002630:	2b00      	cmp	r3, #0
 8002632:	d003      	beq.n	800263c <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8002634:	f7ff fa00 	bl	8001a38 <HAL_PWREx_GetVoltageRange>
 8002638:	6178      	str	r0, [r7, #20]
 800263a:	e014      	b.n	8002666 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 800263c:	4b25      	ldr	r3, [pc, #148]	; (80026d4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800263e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002640:	4a24      	ldr	r2, [pc, #144]	; (80026d4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002642:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002646:	6593      	str	r3, [r2, #88]	; 0x58
 8002648:	4b22      	ldr	r3, [pc, #136]	; (80026d4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800264a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800264c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002650:	60fb      	str	r3, [r7, #12]
 8002652:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8002654:	f7ff f9f0 	bl	8001a38 <HAL_PWREx_GetVoltageRange>
 8002658:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800265a:	4b1e      	ldr	r3, [pc, #120]	; (80026d4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800265c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800265e:	4a1d      	ldr	r2, [pc, #116]	; (80026d4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002660:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002664:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002666:	697b      	ldr	r3, [r7, #20]
 8002668:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800266c:	d10b      	bne.n	8002686 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	2b80      	cmp	r3, #128	; 0x80
 8002672:	d919      	bls.n	80026a8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	2ba0      	cmp	r3, #160	; 0xa0
 8002678:	d902      	bls.n	8002680 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800267a:	2302      	movs	r3, #2
 800267c:	613b      	str	r3, [r7, #16]
 800267e:	e013      	b.n	80026a8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002680:	2301      	movs	r3, #1
 8002682:	613b      	str	r3, [r7, #16]
 8002684:	e010      	b.n	80026a8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	2b80      	cmp	r3, #128	; 0x80
 800268a:	d902      	bls.n	8002692 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 800268c:	2303      	movs	r3, #3
 800268e:	613b      	str	r3, [r7, #16]
 8002690:	e00a      	b.n	80026a8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	2b80      	cmp	r3, #128	; 0x80
 8002696:	d102      	bne.n	800269e <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002698:	2302      	movs	r3, #2
 800269a:	613b      	str	r3, [r7, #16]
 800269c:	e004      	b.n	80026a8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	2b70      	cmp	r3, #112	; 0x70
 80026a2:	d101      	bne.n	80026a8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80026a4:	2301      	movs	r3, #1
 80026a6:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80026a8:	4b0b      	ldr	r3, [pc, #44]	; (80026d8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	f023 0207 	bic.w	r2, r3, #7
 80026b0:	4909      	ldr	r1, [pc, #36]	; (80026d8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80026b2:	693b      	ldr	r3, [r7, #16]
 80026b4:	4313      	orrs	r3, r2
 80026b6:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80026b8:	4b07      	ldr	r3, [pc, #28]	; (80026d8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	f003 0307 	and.w	r3, r3, #7
 80026c0:	693a      	ldr	r2, [r7, #16]
 80026c2:	429a      	cmp	r2, r3
 80026c4:	d001      	beq.n	80026ca <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 80026c6:	2301      	movs	r3, #1
 80026c8:	e000      	b.n	80026cc <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 80026ca:	2300      	movs	r3, #0
}
 80026cc:	4618      	mov	r0, r3
 80026ce:	3718      	adds	r7, #24
 80026d0:	46bd      	mov	sp, r7
 80026d2:	bd80      	pop	{r7, pc}
 80026d4:	40021000 	.word	0x40021000
 80026d8:	40022000 	.word	0x40022000

080026dc <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80026dc:	b580      	push	{r7, lr}
 80026de:	b084      	sub	sp, #16
 80026e0:	af00      	add	r7, sp, #0
 80026e2:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	2b00      	cmp	r3, #0
 80026e8:	d101      	bne.n	80026ee <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80026ea:	2301      	movs	r3, #1
 80026ec:	e095      	b.n	800281a <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026f2:	2b00      	cmp	r3, #0
 80026f4:	d108      	bne.n	8002708 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	685b      	ldr	r3, [r3, #4]
 80026fa:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80026fe:	d009      	beq.n	8002714 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	2200      	movs	r2, #0
 8002704:	61da      	str	r2, [r3, #28]
 8002706:	e005      	b.n	8002714 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	2200      	movs	r2, #0
 800270c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	2200      	movs	r2, #0
 8002712:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	2200      	movs	r2, #0
 8002718:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8002720:	b2db      	uxtb	r3, r3
 8002722:	2b00      	cmp	r3, #0
 8002724:	d106      	bne.n	8002734 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	2200      	movs	r2, #0
 800272a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800272e:	6878      	ldr	r0, [r7, #4]
 8002730:	f7fe fda0 	bl	8001274 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	2202      	movs	r2, #2
 8002738:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	681a      	ldr	r2, [r3, #0]
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800274a:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	68db      	ldr	r3, [r3, #12]
 8002750:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8002754:	d902      	bls.n	800275c <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8002756:	2300      	movs	r3, #0
 8002758:	60fb      	str	r3, [r7, #12]
 800275a:	e002      	b.n	8002762 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800275c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002760:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	68db      	ldr	r3, [r3, #12]
 8002766:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 800276a:	d007      	beq.n	800277c <HAL_SPI_Init+0xa0>
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	68db      	ldr	r3, [r3, #12]
 8002770:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8002774:	d002      	beq.n	800277c <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	2200      	movs	r2, #0
 800277a:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	685b      	ldr	r3, [r3, #4]
 8002780:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	689b      	ldr	r3, [r3, #8]
 8002788:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 800278c:	431a      	orrs	r2, r3
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	691b      	ldr	r3, [r3, #16]
 8002792:	f003 0302 	and.w	r3, r3, #2
 8002796:	431a      	orrs	r2, r3
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	695b      	ldr	r3, [r3, #20]
 800279c:	f003 0301 	and.w	r3, r3, #1
 80027a0:	431a      	orrs	r2, r3
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	699b      	ldr	r3, [r3, #24]
 80027a6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80027aa:	431a      	orrs	r2, r3
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	69db      	ldr	r3, [r3, #28]
 80027b0:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80027b4:	431a      	orrs	r2, r3
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	6a1b      	ldr	r3, [r3, #32]
 80027ba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80027be:	ea42 0103 	orr.w	r1, r2, r3
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80027c6:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	430a      	orrs	r2, r1
 80027d0:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	699b      	ldr	r3, [r3, #24]
 80027d6:	0c1b      	lsrs	r3, r3, #16
 80027d8:	f003 0204 	and.w	r2, r3, #4
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027e0:	f003 0310 	and.w	r3, r3, #16
 80027e4:	431a      	orrs	r2, r3
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80027ea:	f003 0308 	and.w	r3, r3, #8
 80027ee:	431a      	orrs	r2, r3
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	68db      	ldr	r3, [r3, #12]
 80027f4:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 80027f8:	ea42 0103 	orr.w	r1, r2, r3
 80027fc:	68fb      	ldr	r3, [r7, #12]
 80027fe:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	430a      	orrs	r2, r1
 8002808:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	2200      	movs	r2, #0
 800280e:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	2201      	movs	r2, #1
 8002814:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8002818:	2300      	movs	r3, #0
}
 800281a:	4618      	mov	r0, r3
 800281c:	3710      	adds	r7, #16
 800281e:	46bd      	mov	sp, r7
 8002820:	bd80      	pop	{r7, pc}

08002822 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002822:	b580      	push	{r7, lr}
 8002824:	b088      	sub	sp, #32
 8002826:	af00      	add	r7, sp, #0
 8002828:	60f8      	str	r0, [r7, #12]
 800282a:	60b9      	str	r1, [r7, #8]
 800282c:	603b      	str	r3, [r7, #0]
 800282e:	4613      	mov	r3, r2
 8002830:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8002832:	2300      	movs	r3, #0
 8002834:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002836:	68fb      	ldr	r3, [r7, #12]
 8002838:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800283c:	2b01      	cmp	r3, #1
 800283e:	d101      	bne.n	8002844 <HAL_SPI_Transmit+0x22>
 8002840:	2302      	movs	r3, #2
 8002842:	e158      	b.n	8002af6 <HAL_SPI_Transmit+0x2d4>
 8002844:	68fb      	ldr	r3, [r7, #12]
 8002846:	2201      	movs	r2, #1
 8002848:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800284c:	f7fe fe42 	bl	80014d4 <HAL_GetTick>
 8002850:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8002852:	88fb      	ldrh	r3, [r7, #6]
 8002854:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8002856:	68fb      	ldr	r3, [r7, #12]
 8002858:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800285c:	b2db      	uxtb	r3, r3
 800285e:	2b01      	cmp	r3, #1
 8002860:	d002      	beq.n	8002868 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8002862:	2302      	movs	r3, #2
 8002864:	77fb      	strb	r3, [r7, #31]
    goto error;
 8002866:	e13d      	b.n	8002ae4 <HAL_SPI_Transmit+0x2c2>
  }

  if ((pData == NULL) || (Size == 0U))
 8002868:	68bb      	ldr	r3, [r7, #8]
 800286a:	2b00      	cmp	r3, #0
 800286c:	d002      	beq.n	8002874 <HAL_SPI_Transmit+0x52>
 800286e:	88fb      	ldrh	r3, [r7, #6]
 8002870:	2b00      	cmp	r3, #0
 8002872:	d102      	bne.n	800287a <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8002874:	2301      	movs	r3, #1
 8002876:	77fb      	strb	r3, [r7, #31]
    goto error;
 8002878:	e134      	b.n	8002ae4 <HAL_SPI_Transmit+0x2c2>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800287a:	68fb      	ldr	r3, [r7, #12]
 800287c:	2203      	movs	r2, #3
 800287e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002882:	68fb      	ldr	r3, [r7, #12]
 8002884:	2200      	movs	r2, #0
 8002886:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8002888:	68fb      	ldr	r3, [r7, #12]
 800288a:	68ba      	ldr	r2, [r7, #8]
 800288c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 800288e:	68fb      	ldr	r3, [r7, #12]
 8002890:	88fa      	ldrh	r2, [r7, #6]
 8002892:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8002894:	68fb      	ldr	r3, [r7, #12]
 8002896:	88fa      	ldrh	r2, [r7, #6]
 8002898:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800289a:	68fb      	ldr	r3, [r7, #12]
 800289c:	2200      	movs	r2, #0
 800289e:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 80028a0:	68fb      	ldr	r3, [r7, #12]
 80028a2:	2200      	movs	r2, #0
 80028a4:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 80028a8:	68fb      	ldr	r3, [r7, #12]
 80028aa:	2200      	movs	r2, #0
 80028ac:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 80028b0:	68fb      	ldr	r3, [r7, #12]
 80028b2:	2200      	movs	r2, #0
 80028b4:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 80028b6:	68fb      	ldr	r3, [r7, #12]
 80028b8:	2200      	movs	r2, #0
 80028ba:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80028bc:	68fb      	ldr	r3, [r7, #12]
 80028be:	689b      	ldr	r3, [r3, #8]
 80028c0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80028c4:	d10f      	bne.n	80028e6 <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80028c6:	68fb      	ldr	r3, [r7, #12]
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	681a      	ldr	r2, [r3, #0]
 80028cc:	68fb      	ldr	r3, [r7, #12]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80028d4:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80028d6:	68fb      	ldr	r3, [r7, #12]
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	681a      	ldr	r2, [r3, #0]
 80028dc:	68fb      	ldr	r3, [r7, #12]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80028e4:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80028e6:	68fb      	ldr	r3, [r7, #12]
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80028f0:	2b40      	cmp	r3, #64	; 0x40
 80028f2:	d007      	beq.n	8002904 <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80028f4:	68fb      	ldr	r3, [r7, #12]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	681a      	ldr	r2, [r3, #0]
 80028fa:	68fb      	ldr	r3, [r7, #12]
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002902:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002904:	68fb      	ldr	r3, [r7, #12]
 8002906:	68db      	ldr	r3, [r3, #12]
 8002908:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800290c:	d94b      	bls.n	80029a6 <HAL_SPI_Transmit+0x184>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800290e:	68fb      	ldr	r3, [r7, #12]
 8002910:	685b      	ldr	r3, [r3, #4]
 8002912:	2b00      	cmp	r3, #0
 8002914:	d002      	beq.n	800291c <HAL_SPI_Transmit+0xfa>
 8002916:	8afb      	ldrh	r3, [r7, #22]
 8002918:	2b01      	cmp	r3, #1
 800291a:	d13e      	bne.n	800299a <HAL_SPI_Transmit+0x178>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800291c:	68fb      	ldr	r3, [r7, #12]
 800291e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002920:	881a      	ldrh	r2, [r3, #0]
 8002922:	68fb      	ldr	r3, [r7, #12]
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002928:	68fb      	ldr	r3, [r7, #12]
 800292a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800292c:	1c9a      	adds	r2, r3, #2
 800292e:	68fb      	ldr	r3, [r7, #12]
 8002930:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8002932:	68fb      	ldr	r3, [r7, #12]
 8002934:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002936:	b29b      	uxth	r3, r3
 8002938:	3b01      	subs	r3, #1
 800293a:	b29a      	uxth	r2, r3
 800293c:	68fb      	ldr	r3, [r7, #12]
 800293e:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8002940:	e02b      	b.n	800299a <HAL_SPI_Transmit+0x178>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002942:	68fb      	ldr	r3, [r7, #12]
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	689b      	ldr	r3, [r3, #8]
 8002948:	f003 0302 	and.w	r3, r3, #2
 800294c:	2b02      	cmp	r3, #2
 800294e:	d112      	bne.n	8002976 <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002950:	68fb      	ldr	r3, [r7, #12]
 8002952:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002954:	881a      	ldrh	r2, [r3, #0]
 8002956:	68fb      	ldr	r3, [r7, #12]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800295c:	68fb      	ldr	r3, [r7, #12]
 800295e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002960:	1c9a      	adds	r2, r3, #2
 8002962:	68fb      	ldr	r3, [r7, #12]
 8002964:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8002966:	68fb      	ldr	r3, [r7, #12]
 8002968:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800296a:	b29b      	uxth	r3, r3
 800296c:	3b01      	subs	r3, #1
 800296e:	b29a      	uxth	r2, r3
 8002970:	68fb      	ldr	r3, [r7, #12]
 8002972:	87da      	strh	r2, [r3, #62]	; 0x3e
 8002974:	e011      	b.n	800299a <HAL_SPI_Transmit+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002976:	f7fe fdad 	bl	80014d4 <HAL_GetTick>
 800297a:	4602      	mov	r2, r0
 800297c:	69bb      	ldr	r3, [r7, #24]
 800297e:	1ad3      	subs	r3, r2, r3
 8002980:	683a      	ldr	r2, [r7, #0]
 8002982:	429a      	cmp	r2, r3
 8002984:	d803      	bhi.n	800298e <HAL_SPI_Transmit+0x16c>
 8002986:	683b      	ldr	r3, [r7, #0]
 8002988:	f1b3 3fff 	cmp.w	r3, #4294967295
 800298c:	d102      	bne.n	8002994 <HAL_SPI_Transmit+0x172>
 800298e:	683b      	ldr	r3, [r7, #0]
 8002990:	2b00      	cmp	r3, #0
 8002992:	d102      	bne.n	800299a <HAL_SPI_Transmit+0x178>
        {
          errorcode = HAL_TIMEOUT;
 8002994:	2303      	movs	r3, #3
 8002996:	77fb      	strb	r3, [r7, #31]
          goto error;
 8002998:	e0a4      	b.n	8002ae4 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 800299a:	68fb      	ldr	r3, [r7, #12]
 800299c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800299e:	b29b      	uxth	r3, r3
 80029a0:	2b00      	cmp	r3, #0
 80029a2:	d1ce      	bne.n	8002942 <HAL_SPI_Transmit+0x120>
 80029a4:	e07c      	b.n	8002aa0 <HAL_SPI_Transmit+0x27e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80029a6:	68fb      	ldr	r3, [r7, #12]
 80029a8:	685b      	ldr	r3, [r3, #4]
 80029aa:	2b00      	cmp	r3, #0
 80029ac:	d002      	beq.n	80029b4 <HAL_SPI_Transmit+0x192>
 80029ae:	8afb      	ldrh	r3, [r7, #22]
 80029b0:	2b01      	cmp	r3, #1
 80029b2:	d170      	bne.n	8002a96 <HAL_SPI_Transmit+0x274>
    {
      if (hspi->TxXferCount > 1U)
 80029b4:	68fb      	ldr	r3, [r7, #12]
 80029b6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80029b8:	b29b      	uxth	r3, r3
 80029ba:	2b01      	cmp	r3, #1
 80029bc:	d912      	bls.n	80029e4 <HAL_SPI_Transmit+0x1c2>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80029be:	68fb      	ldr	r3, [r7, #12]
 80029c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80029c2:	881a      	ldrh	r2, [r3, #0]
 80029c4:	68fb      	ldr	r3, [r7, #12]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80029ca:	68fb      	ldr	r3, [r7, #12]
 80029cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80029ce:	1c9a      	adds	r2, r3, #2
 80029d0:	68fb      	ldr	r3, [r7, #12]
 80029d2:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 80029d4:	68fb      	ldr	r3, [r7, #12]
 80029d6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80029d8:	b29b      	uxth	r3, r3
 80029da:	3b02      	subs	r3, #2
 80029dc:	b29a      	uxth	r2, r3
 80029de:	68fb      	ldr	r3, [r7, #12]
 80029e0:	87da      	strh	r2, [r3, #62]	; 0x3e
 80029e2:	e058      	b.n	8002a96 <HAL_SPI_Transmit+0x274>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80029e4:	68fb      	ldr	r3, [r7, #12]
 80029e6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80029e8:	68fb      	ldr	r3, [r7, #12]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	330c      	adds	r3, #12
 80029ee:	7812      	ldrb	r2, [r2, #0]
 80029f0:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 80029f2:	68fb      	ldr	r3, [r7, #12]
 80029f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80029f6:	1c5a      	adds	r2, r3, #1
 80029f8:	68fb      	ldr	r3, [r7, #12]
 80029fa:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80029fc:	68fb      	ldr	r3, [r7, #12]
 80029fe:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002a00:	b29b      	uxth	r3, r3
 8002a02:	3b01      	subs	r3, #1
 8002a04:	b29a      	uxth	r2, r3
 8002a06:	68fb      	ldr	r3, [r7, #12]
 8002a08:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8002a0a:	e044      	b.n	8002a96 <HAL_SPI_Transmit+0x274>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002a0c:	68fb      	ldr	r3, [r7, #12]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	689b      	ldr	r3, [r3, #8]
 8002a12:	f003 0302 	and.w	r3, r3, #2
 8002a16:	2b02      	cmp	r3, #2
 8002a18:	d12b      	bne.n	8002a72 <HAL_SPI_Transmit+0x250>
      {
        if (hspi->TxXferCount > 1U)
 8002a1a:	68fb      	ldr	r3, [r7, #12]
 8002a1c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002a1e:	b29b      	uxth	r3, r3
 8002a20:	2b01      	cmp	r3, #1
 8002a22:	d912      	bls.n	8002a4a <HAL_SPI_Transmit+0x228>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002a24:	68fb      	ldr	r3, [r7, #12]
 8002a26:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a28:	881a      	ldrh	r2, [r3, #0]
 8002a2a:	68fb      	ldr	r3, [r7, #12]
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8002a30:	68fb      	ldr	r3, [r7, #12]
 8002a32:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a34:	1c9a      	adds	r2, r3, #2
 8002a36:	68fb      	ldr	r3, [r7, #12]
 8002a38:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8002a3a:	68fb      	ldr	r3, [r7, #12]
 8002a3c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002a3e:	b29b      	uxth	r3, r3
 8002a40:	3b02      	subs	r3, #2
 8002a42:	b29a      	uxth	r2, r3
 8002a44:	68fb      	ldr	r3, [r7, #12]
 8002a46:	87da      	strh	r2, [r3, #62]	; 0x3e
 8002a48:	e025      	b.n	8002a96 <HAL_SPI_Transmit+0x274>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002a4a:	68fb      	ldr	r3, [r7, #12]
 8002a4c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002a4e:	68fb      	ldr	r3, [r7, #12]
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	330c      	adds	r3, #12
 8002a54:	7812      	ldrb	r2, [r2, #0]
 8002a56:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8002a58:	68fb      	ldr	r3, [r7, #12]
 8002a5a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a5c:	1c5a      	adds	r2, r3, #1
 8002a5e:	68fb      	ldr	r3, [r7, #12]
 8002a60:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8002a62:	68fb      	ldr	r3, [r7, #12]
 8002a64:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002a66:	b29b      	uxth	r3, r3
 8002a68:	3b01      	subs	r3, #1
 8002a6a:	b29a      	uxth	r2, r3
 8002a6c:	68fb      	ldr	r3, [r7, #12]
 8002a6e:	87da      	strh	r2, [r3, #62]	; 0x3e
 8002a70:	e011      	b.n	8002a96 <HAL_SPI_Transmit+0x274>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002a72:	f7fe fd2f 	bl	80014d4 <HAL_GetTick>
 8002a76:	4602      	mov	r2, r0
 8002a78:	69bb      	ldr	r3, [r7, #24]
 8002a7a:	1ad3      	subs	r3, r2, r3
 8002a7c:	683a      	ldr	r2, [r7, #0]
 8002a7e:	429a      	cmp	r2, r3
 8002a80:	d803      	bhi.n	8002a8a <HAL_SPI_Transmit+0x268>
 8002a82:	683b      	ldr	r3, [r7, #0]
 8002a84:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002a88:	d102      	bne.n	8002a90 <HAL_SPI_Transmit+0x26e>
 8002a8a:	683b      	ldr	r3, [r7, #0]
 8002a8c:	2b00      	cmp	r3, #0
 8002a8e:	d102      	bne.n	8002a96 <HAL_SPI_Transmit+0x274>
        {
          errorcode = HAL_TIMEOUT;
 8002a90:	2303      	movs	r3, #3
 8002a92:	77fb      	strb	r3, [r7, #31]
          goto error;
 8002a94:	e026      	b.n	8002ae4 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 8002a96:	68fb      	ldr	r3, [r7, #12]
 8002a98:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002a9a:	b29b      	uxth	r3, r3
 8002a9c:	2b00      	cmp	r3, #0
 8002a9e:	d1b5      	bne.n	8002a0c <HAL_SPI_Transmit+0x1ea>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002aa0:	69ba      	ldr	r2, [r7, #24]
 8002aa2:	6839      	ldr	r1, [r7, #0]
 8002aa4:	68f8      	ldr	r0, [r7, #12]
 8002aa6:	f000 fcdf 	bl	8003468 <SPI_EndRxTxTransaction>
 8002aaa:	4603      	mov	r3, r0
 8002aac:	2b00      	cmp	r3, #0
 8002aae:	d002      	beq.n	8002ab6 <HAL_SPI_Transmit+0x294>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002ab0:	68fb      	ldr	r3, [r7, #12]
 8002ab2:	2220      	movs	r2, #32
 8002ab4:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002ab6:	68fb      	ldr	r3, [r7, #12]
 8002ab8:	689b      	ldr	r3, [r3, #8]
 8002aba:	2b00      	cmp	r3, #0
 8002abc:	d10a      	bne.n	8002ad4 <HAL_SPI_Transmit+0x2b2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002abe:	2300      	movs	r3, #0
 8002ac0:	613b      	str	r3, [r7, #16]
 8002ac2:	68fb      	ldr	r3, [r7, #12]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	68db      	ldr	r3, [r3, #12]
 8002ac8:	613b      	str	r3, [r7, #16]
 8002aca:	68fb      	ldr	r3, [r7, #12]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	689b      	ldr	r3, [r3, #8]
 8002ad0:	613b      	str	r3, [r7, #16]
 8002ad2:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002ad4:	68fb      	ldr	r3, [r7, #12]
 8002ad6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002ad8:	2b00      	cmp	r3, #0
 8002ada:	d002      	beq.n	8002ae2 <HAL_SPI_Transmit+0x2c0>
  {
    errorcode = HAL_ERROR;
 8002adc:	2301      	movs	r3, #1
 8002ade:	77fb      	strb	r3, [r7, #31]
 8002ae0:	e000      	b.n	8002ae4 <HAL_SPI_Transmit+0x2c2>
  }

error:
 8002ae2:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8002ae4:	68fb      	ldr	r3, [r7, #12]
 8002ae6:	2201      	movs	r2, #1
 8002ae8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8002aec:	68fb      	ldr	r3, [r7, #12]
 8002aee:	2200      	movs	r2, #0
 8002af0:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8002af4:	7ffb      	ldrb	r3, [r7, #31]
}
 8002af6:	4618      	mov	r0, r3
 8002af8:	3720      	adds	r7, #32
 8002afa:	46bd      	mov	sp, r7
 8002afc:	bd80      	pop	{r7, pc}

08002afe <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002afe:	b580      	push	{r7, lr}
 8002b00:	b088      	sub	sp, #32
 8002b02:	af02      	add	r7, sp, #8
 8002b04:	60f8      	str	r0, [r7, #12]
 8002b06:	60b9      	str	r1, [r7, #8]
 8002b08:	603b      	str	r3, [r7, #0]
 8002b0a:	4613      	mov	r3, r2
 8002b0c:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8002b0e:	2300      	movs	r3, #0
 8002b10:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8002b12:	68fb      	ldr	r3, [r7, #12]
 8002b14:	685b      	ldr	r3, [r3, #4]
 8002b16:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002b1a:	d112      	bne.n	8002b42 <HAL_SPI_Receive+0x44>
 8002b1c:	68fb      	ldr	r3, [r7, #12]
 8002b1e:	689b      	ldr	r3, [r3, #8]
 8002b20:	2b00      	cmp	r3, #0
 8002b22:	d10e      	bne.n	8002b42 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8002b24:	68fb      	ldr	r3, [r7, #12]
 8002b26:	2204      	movs	r2, #4
 8002b28:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8002b2c:	88fa      	ldrh	r2, [r7, #6]
 8002b2e:	683b      	ldr	r3, [r7, #0]
 8002b30:	9300      	str	r3, [sp, #0]
 8002b32:	4613      	mov	r3, r2
 8002b34:	68ba      	ldr	r2, [r7, #8]
 8002b36:	68b9      	ldr	r1, [r7, #8]
 8002b38:	68f8      	ldr	r0, [r7, #12]
 8002b3a:	f000 f910 	bl	8002d5e <HAL_SPI_TransmitReceive>
 8002b3e:	4603      	mov	r3, r0
 8002b40:	e109      	b.n	8002d56 <HAL_SPI_Receive+0x258>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002b42:	68fb      	ldr	r3, [r7, #12]
 8002b44:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8002b48:	2b01      	cmp	r3, #1
 8002b4a:	d101      	bne.n	8002b50 <HAL_SPI_Receive+0x52>
 8002b4c:	2302      	movs	r3, #2
 8002b4e:	e102      	b.n	8002d56 <HAL_SPI_Receive+0x258>
 8002b50:	68fb      	ldr	r3, [r7, #12]
 8002b52:	2201      	movs	r2, #1
 8002b54:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002b58:	f7fe fcbc 	bl	80014d4 <HAL_GetTick>
 8002b5c:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8002b5e:	68fb      	ldr	r3, [r7, #12]
 8002b60:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8002b64:	b2db      	uxtb	r3, r3
 8002b66:	2b01      	cmp	r3, #1
 8002b68:	d002      	beq.n	8002b70 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8002b6a:	2302      	movs	r3, #2
 8002b6c:	75fb      	strb	r3, [r7, #23]
    goto error;
 8002b6e:	e0e9      	b.n	8002d44 <HAL_SPI_Receive+0x246>
  }

  if ((pData == NULL) || (Size == 0U))
 8002b70:	68bb      	ldr	r3, [r7, #8]
 8002b72:	2b00      	cmp	r3, #0
 8002b74:	d002      	beq.n	8002b7c <HAL_SPI_Receive+0x7e>
 8002b76:	88fb      	ldrh	r3, [r7, #6]
 8002b78:	2b00      	cmp	r3, #0
 8002b7a:	d102      	bne.n	8002b82 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8002b7c:	2301      	movs	r3, #1
 8002b7e:	75fb      	strb	r3, [r7, #23]
    goto error;
 8002b80:	e0e0      	b.n	8002d44 <HAL_SPI_Receive+0x246>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8002b82:	68fb      	ldr	r3, [r7, #12]
 8002b84:	2204      	movs	r2, #4
 8002b86:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002b8a:	68fb      	ldr	r3, [r7, #12]
 8002b8c:	2200      	movs	r2, #0
 8002b8e:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8002b90:	68fb      	ldr	r3, [r7, #12]
 8002b92:	68ba      	ldr	r2, [r7, #8]
 8002b94:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 8002b96:	68fb      	ldr	r3, [r7, #12]
 8002b98:	88fa      	ldrh	r2, [r7, #6]
 8002b9a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 8002b9e:	68fb      	ldr	r3, [r7, #12]
 8002ba0:	88fa      	ldrh	r2, [r7, #6]
 8002ba2:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8002ba6:	68fb      	ldr	r3, [r7, #12]
 8002ba8:	2200      	movs	r2, #0
 8002baa:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = 0U;
 8002bac:	68fb      	ldr	r3, [r7, #12]
 8002bae:	2200      	movs	r2, #0
 8002bb0:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 8002bb2:	68fb      	ldr	r3, [r7, #12]
 8002bb4:	2200      	movs	r2, #0
 8002bb6:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxISR       = NULL;
 8002bb8:	68fb      	ldr	r3, [r7, #12]
 8002bba:	2200      	movs	r2, #0
 8002bbc:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8002bbe:	68fb      	ldr	r3, [r7, #12]
 8002bc0:	2200      	movs	r2, #0
 8002bc2:	651a      	str	r2, [r3, #80]	; 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002bc4:	68fb      	ldr	r3, [r7, #12]
 8002bc6:	68db      	ldr	r3, [r3, #12]
 8002bc8:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8002bcc:	d908      	bls.n	8002be0 <HAL_SPI_Receive+0xe2>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8002bce:	68fb      	ldr	r3, [r7, #12]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	685a      	ldr	r2, [r3, #4]
 8002bd4:	68fb      	ldr	r3, [r7, #12]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8002bdc:	605a      	str	r2, [r3, #4]
 8002bde:	e007      	b.n	8002bf0 <HAL_SPI_Receive+0xf2>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8002be0:	68fb      	ldr	r3, [r7, #12]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	685a      	ldr	r2, [r3, #4]
 8002be6:	68fb      	ldr	r3, [r7, #12]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8002bee:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002bf0:	68fb      	ldr	r3, [r7, #12]
 8002bf2:	689b      	ldr	r3, [r3, #8]
 8002bf4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002bf8:	d10f      	bne.n	8002c1a <HAL_SPI_Receive+0x11c>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8002bfa:	68fb      	ldr	r3, [r7, #12]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	681a      	ldr	r2, [r3, #0]
 8002c00:	68fb      	ldr	r3, [r7, #12]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002c08:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8002c0a:	68fb      	ldr	r3, [r7, #12]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	681a      	ldr	r2, [r3, #0]
 8002c10:	68fb      	ldr	r3, [r7, #12]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8002c18:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002c1a:	68fb      	ldr	r3, [r7, #12]
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c24:	2b40      	cmp	r3, #64	; 0x40
 8002c26:	d007      	beq.n	8002c38 <HAL_SPI_Receive+0x13a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002c28:	68fb      	ldr	r3, [r7, #12]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	681a      	ldr	r2, [r3, #0]
 8002c2e:	68fb      	ldr	r3, [r7, #12]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002c36:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 8002c38:	68fb      	ldr	r3, [r7, #12]
 8002c3a:	68db      	ldr	r3, [r3, #12]
 8002c3c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8002c40:	d867      	bhi.n	8002d12 <HAL_SPI_Receive+0x214>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8002c42:	e030      	b.n	8002ca6 <HAL_SPI_Receive+0x1a8>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8002c44:	68fb      	ldr	r3, [r7, #12]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	689b      	ldr	r3, [r3, #8]
 8002c4a:	f003 0301 	and.w	r3, r3, #1
 8002c4e:	2b01      	cmp	r3, #1
 8002c50:	d117      	bne.n	8002c82 <HAL_SPI_Receive+0x184>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8002c52:	68fb      	ldr	r3, [r7, #12]
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	f103 020c 	add.w	r2, r3, #12
 8002c5a:	68fb      	ldr	r3, [r7, #12]
 8002c5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c5e:	7812      	ldrb	r2, [r2, #0]
 8002c60:	b2d2      	uxtb	r2, r2
 8002c62:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8002c64:	68fb      	ldr	r3, [r7, #12]
 8002c66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c68:	1c5a      	adds	r2, r3, #1
 8002c6a:	68fb      	ldr	r3, [r7, #12]
 8002c6c:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8002c6e:	68fb      	ldr	r3, [r7, #12]
 8002c70:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8002c74:	b29b      	uxth	r3, r3
 8002c76:	3b01      	subs	r3, #1
 8002c78:	b29a      	uxth	r2, r3
 8002c7a:	68fb      	ldr	r3, [r7, #12]
 8002c7c:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 8002c80:	e011      	b.n	8002ca6 <HAL_SPI_Receive+0x1a8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002c82:	f7fe fc27 	bl	80014d4 <HAL_GetTick>
 8002c86:	4602      	mov	r2, r0
 8002c88:	693b      	ldr	r3, [r7, #16]
 8002c8a:	1ad3      	subs	r3, r2, r3
 8002c8c:	683a      	ldr	r2, [r7, #0]
 8002c8e:	429a      	cmp	r2, r3
 8002c90:	d803      	bhi.n	8002c9a <HAL_SPI_Receive+0x19c>
 8002c92:	683b      	ldr	r3, [r7, #0]
 8002c94:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002c98:	d102      	bne.n	8002ca0 <HAL_SPI_Receive+0x1a2>
 8002c9a:	683b      	ldr	r3, [r7, #0]
 8002c9c:	2b00      	cmp	r3, #0
 8002c9e:	d102      	bne.n	8002ca6 <HAL_SPI_Receive+0x1a8>
        {
          errorcode = HAL_TIMEOUT;
 8002ca0:	2303      	movs	r3, #3
 8002ca2:	75fb      	strb	r3, [r7, #23]
          goto error;
 8002ca4:	e04e      	b.n	8002d44 <HAL_SPI_Receive+0x246>
    while (hspi->RxXferCount > 0U)
 8002ca6:	68fb      	ldr	r3, [r7, #12]
 8002ca8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8002cac:	b29b      	uxth	r3, r3
 8002cae:	2b00      	cmp	r3, #0
 8002cb0:	d1c8      	bne.n	8002c44 <HAL_SPI_Receive+0x146>
 8002cb2:	e034      	b.n	8002d1e <HAL_SPI_Receive+0x220>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8002cb4:	68fb      	ldr	r3, [r7, #12]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	689b      	ldr	r3, [r3, #8]
 8002cba:	f003 0301 	and.w	r3, r3, #1
 8002cbe:	2b01      	cmp	r3, #1
 8002cc0:	d115      	bne.n	8002cee <HAL_SPI_Receive+0x1f0>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8002cc2:	68fb      	ldr	r3, [r7, #12]
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	68da      	ldr	r2, [r3, #12]
 8002cc8:	68fb      	ldr	r3, [r7, #12]
 8002cca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ccc:	b292      	uxth	r2, r2
 8002cce:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8002cd0:	68fb      	ldr	r3, [r7, #12]
 8002cd2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cd4:	1c9a      	adds	r2, r3, #2
 8002cd6:	68fb      	ldr	r3, [r7, #12]
 8002cd8:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8002cda:	68fb      	ldr	r3, [r7, #12]
 8002cdc:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8002ce0:	b29b      	uxth	r3, r3
 8002ce2:	3b01      	subs	r3, #1
 8002ce4:	b29a      	uxth	r2, r3
 8002ce6:	68fb      	ldr	r3, [r7, #12]
 8002ce8:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 8002cec:	e011      	b.n	8002d12 <HAL_SPI_Receive+0x214>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002cee:	f7fe fbf1 	bl	80014d4 <HAL_GetTick>
 8002cf2:	4602      	mov	r2, r0
 8002cf4:	693b      	ldr	r3, [r7, #16]
 8002cf6:	1ad3      	subs	r3, r2, r3
 8002cf8:	683a      	ldr	r2, [r7, #0]
 8002cfa:	429a      	cmp	r2, r3
 8002cfc:	d803      	bhi.n	8002d06 <HAL_SPI_Receive+0x208>
 8002cfe:	683b      	ldr	r3, [r7, #0]
 8002d00:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d04:	d102      	bne.n	8002d0c <HAL_SPI_Receive+0x20e>
 8002d06:	683b      	ldr	r3, [r7, #0]
 8002d08:	2b00      	cmp	r3, #0
 8002d0a:	d102      	bne.n	8002d12 <HAL_SPI_Receive+0x214>
        {
          errorcode = HAL_TIMEOUT;
 8002d0c:	2303      	movs	r3, #3
 8002d0e:	75fb      	strb	r3, [r7, #23]
          goto error;
 8002d10:	e018      	b.n	8002d44 <HAL_SPI_Receive+0x246>
    while (hspi->RxXferCount > 0U)
 8002d12:	68fb      	ldr	r3, [r7, #12]
 8002d14:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8002d18:	b29b      	uxth	r3, r3
 8002d1a:	2b00      	cmp	r3, #0
 8002d1c:	d1ca      	bne.n	8002cb4 <HAL_SPI_Receive+0x1b6>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002d1e:	693a      	ldr	r2, [r7, #16]
 8002d20:	6839      	ldr	r1, [r7, #0]
 8002d22:	68f8      	ldr	r0, [r7, #12]
 8002d24:	f000 fb48 	bl	80033b8 <SPI_EndRxTransaction>
 8002d28:	4603      	mov	r3, r0
 8002d2a:	2b00      	cmp	r3, #0
 8002d2c:	d002      	beq.n	8002d34 <HAL_SPI_Receive+0x236>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002d2e:	68fb      	ldr	r3, [r7, #12]
 8002d30:	2220      	movs	r2, #32
 8002d32:	661a      	str	r2, [r3, #96]	; 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002d34:	68fb      	ldr	r3, [r7, #12]
 8002d36:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002d38:	2b00      	cmp	r3, #0
 8002d3a:	d002      	beq.n	8002d42 <HAL_SPI_Receive+0x244>
  {
    errorcode = HAL_ERROR;
 8002d3c:	2301      	movs	r3, #1
 8002d3e:	75fb      	strb	r3, [r7, #23]
 8002d40:	e000      	b.n	8002d44 <HAL_SPI_Receive+0x246>
  }

error :
 8002d42:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8002d44:	68fb      	ldr	r3, [r7, #12]
 8002d46:	2201      	movs	r2, #1
 8002d48:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 8002d4c:	68fb      	ldr	r3, [r7, #12]
 8002d4e:	2200      	movs	r2, #0
 8002d50:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8002d54:	7dfb      	ldrb	r3, [r7, #23]
}
 8002d56:	4618      	mov	r0, r3
 8002d58:	3718      	adds	r7, #24
 8002d5a:	46bd      	mov	sp, r7
 8002d5c:	bd80      	pop	{r7, pc}

08002d5e <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8002d5e:	b580      	push	{r7, lr}
 8002d60:	b08a      	sub	sp, #40	; 0x28
 8002d62:	af00      	add	r7, sp, #0
 8002d64:	60f8      	str	r0, [r7, #12]
 8002d66:	60b9      	str	r1, [r7, #8]
 8002d68:	607a      	str	r2, [r7, #4]
 8002d6a:	807b      	strh	r3, [r7, #2]
  uint32_t             spi_cr1;
  uint32_t             spi_cr2;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8002d6c:	2301      	movs	r3, #1
 8002d6e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8002d70:	2300      	movs	r3, #0
 8002d72:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002d76:	68fb      	ldr	r3, [r7, #12]
 8002d78:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8002d7c:	2b01      	cmp	r3, #1
 8002d7e:	d101      	bne.n	8002d84 <HAL_SPI_TransmitReceive+0x26>
 8002d80:	2302      	movs	r3, #2
 8002d82:	e1fb      	b.n	800317c <HAL_SPI_TransmitReceive+0x41e>
 8002d84:	68fb      	ldr	r3, [r7, #12]
 8002d86:	2201      	movs	r2, #1
 8002d88:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002d8c:	f7fe fba2 	bl	80014d4 <HAL_GetTick>
 8002d90:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8002d92:	68fb      	ldr	r3, [r7, #12]
 8002d94:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8002d98:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 8002d9a:	68fb      	ldr	r3, [r7, #12]
 8002d9c:	685b      	ldr	r3, [r3, #4]
 8002d9e:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 8002da0:	887b      	ldrh	r3, [r7, #2]
 8002da2:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 8002da4:	887b      	ldrh	r3, [r7, #2]
 8002da6:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8002da8:	7efb      	ldrb	r3, [r7, #27]
 8002daa:	2b01      	cmp	r3, #1
 8002dac:	d00e      	beq.n	8002dcc <HAL_SPI_TransmitReceive+0x6e>
 8002dae:	697b      	ldr	r3, [r7, #20]
 8002db0:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002db4:	d106      	bne.n	8002dc4 <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8002db6:	68fb      	ldr	r3, [r7, #12]
 8002db8:	689b      	ldr	r3, [r3, #8]
 8002dba:	2b00      	cmp	r3, #0
 8002dbc:	d102      	bne.n	8002dc4 <HAL_SPI_TransmitReceive+0x66>
 8002dbe:	7efb      	ldrb	r3, [r7, #27]
 8002dc0:	2b04      	cmp	r3, #4
 8002dc2:	d003      	beq.n	8002dcc <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 8002dc4:	2302      	movs	r3, #2
 8002dc6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8002dca:	e1cd      	b.n	8003168 <HAL_SPI_TransmitReceive+0x40a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8002dcc:	68bb      	ldr	r3, [r7, #8]
 8002dce:	2b00      	cmp	r3, #0
 8002dd0:	d005      	beq.n	8002dde <HAL_SPI_TransmitReceive+0x80>
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	2b00      	cmp	r3, #0
 8002dd6:	d002      	beq.n	8002dde <HAL_SPI_TransmitReceive+0x80>
 8002dd8:	887b      	ldrh	r3, [r7, #2]
 8002dda:	2b00      	cmp	r3, #0
 8002ddc:	d103      	bne.n	8002de6 <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 8002dde:	2301      	movs	r3, #1
 8002de0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8002de4:	e1c0      	b.n	8003168 <HAL_SPI_TransmitReceive+0x40a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8002de6:	68fb      	ldr	r3, [r7, #12]
 8002de8:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8002dec:	b2db      	uxtb	r3, r3
 8002dee:	2b04      	cmp	r3, #4
 8002df0:	d003      	beq.n	8002dfa <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8002df2:	68fb      	ldr	r3, [r7, #12]
 8002df4:	2205      	movs	r2, #5
 8002df6:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002dfa:	68fb      	ldr	r3, [r7, #12]
 8002dfc:	2200      	movs	r2, #0
 8002dfe:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8002e00:	68fb      	ldr	r3, [r7, #12]
 8002e02:	687a      	ldr	r2, [r7, #4]
 8002e04:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 8002e06:	68fb      	ldr	r3, [r7, #12]
 8002e08:	887a      	ldrh	r2, [r7, #2]
 8002e0a:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 8002e0e:	68fb      	ldr	r3, [r7, #12]
 8002e10:	887a      	ldrh	r2, [r7, #2]
 8002e12:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8002e16:	68fb      	ldr	r3, [r7, #12]
 8002e18:	68ba      	ldr	r2, [r7, #8]
 8002e1a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 8002e1c:	68fb      	ldr	r3, [r7, #12]
 8002e1e:	887a      	ldrh	r2, [r7, #2]
 8002e20:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 8002e22:	68fb      	ldr	r3, [r7, #12]
 8002e24:	887a      	ldrh	r2, [r7, #2]
 8002e26:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8002e28:	68fb      	ldr	r3, [r7, #12]
 8002e2a:	2200      	movs	r2, #0
 8002e2c:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8002e2e:	68fb      	ldr	r3, [r7, #12]
 8002e30:	2200      	movs	r2, #0
 8002e32:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8002e34:	68fb      	ldr	r3, [r7, #12]
 8002e36:	68db      	ldr	r3, [r3, #12]
 8002e38:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8002e3c:	d802      	bhi.n	8002e44 <HAL_SPI_TransmitReceive+0xe6>
 8002e3e:	8a3b      	ldrh	r3, [r7, #16]
 8002e40:	2b01      	cmp	r3, #1
 8002e42:	d908      	bls.n	8002e56 <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8002e44:	68fb      	ldr	r3, [r7, #12]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	685a      	ldr	r2, [r3, #4]
 8002e4a:	68fb      	ldr	r3, [r7, #12]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8002e52:	605a      	str	r2, [r3, #4]
 8002e54:	e007      	b.n	8002e66 <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8002e56:	68fb      	ldr	r3, [r7, #12]
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	685a      	ldr	r2, [r3, #4]
 8002e5c:	68fb      	ldr	r3, [r7, #12]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8002e64:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002e66:	68fb      	ldr	r3, [r7, #12]
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002e70:	2b40      	cmp	r3, #64	; 0x40
 8002e72:	d007      	beq.n	8002e84 <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002e74:	68fb      	ldr	r3, [r7, #12]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	681a      	ldr	r2, [r3, #0]
 8002e7a:	68fb      	ldr	r3, [r7, #12]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002e82:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002e84:	68fb      	ldr	r3, [r7, #12]
 8002e86:	68db      	ldr	r3, [r3, #12]
 8002e88:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8002e8c:	d97c      	bls.n	8002f88 <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002e8e:	68fb      	ldr	r3, [r7, #12]
 8002e90:	685b      	ldr	r3, [r3, #4]
 8002e92:	2b00      	cmp	r3, #0
 8002e94:	d002      	beq.n	8002e9c <HAL_SPI_TransmitReceive+0x13e>
 8002e96:	8a7b      	ldrh	r3, [r7, #18]
 8002e98:	2b01      	cmp	r3, #1
 8002e9a:	d169      	bne.n	8002f70 <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002e9c:	68fb      	ldr	r3, [r7, #12]
 8002e9e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ea0:	881a      	ldrh	r2, [r3, #0]
 8002ea2:	68fb      	ldr	r3, [r7, #12]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002ea8:	68fb      	ldr	r3, [r7, #12]
 8002eaa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002eac:	1c9a      	adds	r2, r3, #2
 8002eae:	68fb      	ldr	r3, [r7, #12]
 8002eb0:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8002eb2:	68fb      	ldr	r3, [r7, #12]
 8002eb4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002eb6:	b29b      	uxth	r3, r3
 8002eb8:	3b01      	subs	r3, #1
 8002eba:	b29a      	uxth	r2, r3
 8002ebc:	68fb      	ldr	r3, [r7, #12]
 8002ebe:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002ec0:	e056      	b.n	8002f70 <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8002ec2:	68fb      	ldr	r3, [r7, #12]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	689b      	ldr	r3, [r3, #8]
 8002ec8:	f003 0302 	and.w	r3, r3, #2
 8002ecc:	2b02      	cmp	r3, #2
 8002ece:	d11b      	bne.n	8002f08 <HAL_SPI_TransmitReceive+0x1aa>
 8002ed0:	68fb      	ldr	r3, [r7, #12]
 8002ed2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002ed4:	b29b      	uxth	r3, r3
 8002ed6:	2b00      	cmp	r3, #0
 8002ed8:	d016      	beq.n	8002f08 <HAL_SPI_TransmitReceive+0x1aa>
 8002eda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002edc:	2b01      	cmp	r3, #1
 8002ede:	d113      	bne.n	8002f08 <HAL_SPI_TransmitReceive+0x1aa>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002ee0:	68fb      	ldr	r3, [r7, #12]
 8002ee2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ee4:	881a      	ldrh	r2, [r3, #0]
 8002ee6:	68fb      	ldr	r3, [r7, #12]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002eec:	68fb      	ldr	r3, [r7, #12]
 8002eee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ef0:	1c9a      	adds	r2, r3, #2
 8002ef2:	68fb      	ldr	r3, [r7, #12]
 8002ef4:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8002ef6:	68fb      	ldr	r3, [r7, #12]
 8002ef8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002efa:	b29b      	uxth	r3, r3
 8002efc:	3b01      	subs	r3, #1
 8002efe:	b29a      	uxth	r2, r3
 8002f00:	68fb      	ldr	r3, [r7, #12]
 8002f02:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8002f04:	2300      	movs	r3, #0
 8002f06:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8002f08:	68fb      	ldr	r3, [r7, #12]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	689b      	ldr	r3, [r3, #8]
 8002f0e:	f003 0301 	and.w	r3, r3, #1
 8002f12:	2b01      	cmp	r3, #1
 8002f14:	d11c      	bne.n	8002f50 <HAL_SPI_TransmitReceive+0x1f2>
 8002f16:	68fb      	ldr	r3, [r7, #12]
 8002f18:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8002f1c:	b29b      	uxth	r3, r3
 8002f1e:	2b00      	cmp	r3, #0
 8002f20:	d016      	beq.n	8002f50 <HAL_SPI_TransmitReceive+0x1f2>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8002f22:	68fb      	ldr	r3, [r7, #12]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	68da      	ldr	r2, [r3, #12]
 8002f28:	68fb      	ldr	r3, [r7, #12]
 8002f2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f2c:	b292      	uxth	r2, r2
 8002f2e:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8002f30:	68fb      	ldr	r3, [r7, #12]
 8002f32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f34:	1c9a      	adds	r2, r3, #2
 8002f36:	68fb      	ldr	r3, [r7, #12]
 8002f38:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8002f3a:	68fb      	ldr	r3, [r7, #12]
 8002f3c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8002f40:	b29b      	uxth	r3, r3
 8002f42:	3b01      	subs	r3, #1
 8002f44:	b29a      	uxth	r2, r3
 8002f46:	68fb      	ldr	r3, [r7, #12]
 8002f48:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8002f4c:	2301      	movs	r3, #1
 8002f4e:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8002f50:	f7fe fac0 	bl	80014d4 <HAL_GetTick>
 8002f54:	4602      	mov	r2, r0
 8002f56:	69fb      	ldr	r3, [r7, #28]
 8002f58:	1ad3      	subs	r3, r2, r3
 8002f5a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002f5c:	429a      	cmp	r2, r3
 8002f5e:	d807      	bhi.n	8002f70 <HAL_SPI_TransmitReceive+0x212>
 8002f60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f62:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f66:	d003      	beq.n	8002f70 <HAL_SPI_TransmitReceive+0x212>
      {
        errorcode = HAL_TIMEOUT;
 8002f68:	2303      	movs	r3, #3
 8002f6a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 8002f6e:	e0fb      	b.n	8003168 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002f70:	68fb      	ldr	r3, [r7, #12]
 8002f72:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002f74:	b29b      	uxth	r3, r3
 8002f76:	2b00      	cmp	r3, #0
 8002f78:	d1a3      	bne.n	8002ec2 <HAL_SPI_TransmitReceive+0x164>
 8002f7a:	68fb      	ldr	r3, [r7, #12]
 8002f7c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8002f80:	b29b      	uxth	r3, r3
 8002f82:	2b00      	cmp	r3, #0
 8002f84:	d19d      	bne.n	8002ec2 <HAL_SPI_TransmitReceive+0x164>
 8002f86:	e0df      	b.n	8003148 <HAL_SPI_TransmitReceive+0x3ea>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002f88:	68fb      	ldr	r3, [r7, #12]
 8002f8a:	685b      	ldr	r3, [r3, #4]
 8002f8c:	2b00      	cmp	r3, #0
 8002f8e:	d003      	beq.n	8002f98 <HAL_SPI_TransmitReceive+0x23a>
 8002f90:	8a7b      	ldrh	r3, [r7, #18]
 8002f92:	2b01      	cmp	r3, #1
 8002f94:	f040 80cb 	bne.w	800312e <HAL_SPI_TransmitReceive+0x3d0>
    {
      if (hspi->TxXferCount > 1U)
 8002f98:	68fb      	ldr	r3, [r7, #12]
 8002f9a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002f9c:	b29b      	uxth	r3, r3
 8002f9e:	2b01      	cmp	r3, #1
 8002fa0:	d912      	bls.n	8002fc8 <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002fa2:	68fb      	ldr	r3, [r7, #12]
 8002fa4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002fa6:	881a      	ldrh	r2, [r3, #0]
 8002fa8:	68fb      	ldr	r3, [r7, #12]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002fae:	68fb      	ldr	r3, [r7, #12]
 8002fb0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002fb2:	1c9a      	adds	r2, r3, #2
 8002fb4:	68fb      	ldr	r3, [r7, #12]
 8002fb6:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8002fb8:	68fb      	ldr	r3, [r7, #12]
 8002fba:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002fbc:	b29b      	uxth	r3, r3
 8002fbe:	3b02      	subs	r3, #2
 8002fc0:	b29a      	uxth	r2, r3
 8002fc2:	68fb      	ldr	r3, [r7, #12]
 8002fc4:	87da      	strh	r2, [r3, #62]	; 0x3e
 8002fc6:	e0b2      	b.n	800312e <HAL_SPI_TransmitReceive+0x3d0>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8002fc8:	68fb      	ldr	r3, [r7, #12]
 8002fca:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002fcc:	68fb      	ldr	r3, [r7, #12]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	330c      	adds	r3, #12
 8002fd2:	7812      	ldrb	r2, [r2, #0]
 8002fd4:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8002fd6:	68fb      	ldr	r3, [r7, #12]
 8002fd8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002fda:	1c5a      	adds	r2, r3, #1
 8002fdc:	68fb      	ldr	r3, [r7, #12]
 8002fde:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8002fe0:	68fb      	ldr	r3, [r7, #12]
 8002fe2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002fe4:	b29b      	uxth	r3, r3
 8002fe6:	3b01      	subs	r3, #1
 8002fe8:	b29a      	uxth	r2, r3
 8002fea:	68fb      	ldr	r3, [r7, #12]
 8002fec:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002fee:	e09e      	b.n	800312e <HAL_SPI_TransmitReceive+0x3d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8002ff0:	68fb      	ldr	r3, [r7, #12]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	689b      	ldr	r3, [r3, #8]
 8002ff6:	f003 0302 	and.w	r3, r3, #2
 8002ffa:	2b02      	cmp	r3, #2
 8002ffc:	d134      	bne.n	8003068 <HAL_SPI_TransmitReceive+0x30a>
 8002ffe:	68fb      	ldr	r3, [r7, #12]
 8003000:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003002:	b29b      	uxth	r3, r3
 8003004:	2b00      	cmp	r3, #0
 8003006:	d02f      	beq.n	8003068 <HAL_SPI_TransmitReceive+0x30a>
 8003008:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800300a:	2b01      	cmp	r3, #1
 800300c:	d12c      	bne.n	8003068 <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 800300e:	68fb      	ldr	r3, [r7, #12]
 8003010:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003012:	b29b      	uxth	r3, r3
 8003014:	2b01      	cmp	r3, #1
 8003016:	d912      	bls.n	800303e <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003018:	68fb      	ldr	r3, [r7, #12]
 800301a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800301c:	881a      	ldrh	r2, [r3, #0]
 800301e:	68fb      	ldr	r3, [r7, #12]
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8003024:	68fb      	ldr	r3, [r7, #12]
 8003026:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003028:	1c9a      	adds	r2, r3, #2
 800302a:	68fb      	ldr	r3, [r7, #12]
 800302c:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 800302e:	68fb      	ldr	r3, [r7, #12]
 8003030:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003032:	b29b      	uxth	r3, r3
 8003034:	3b02      	subs	r3, #2
 8003036:	b29a      	uxth	r2, r3
 8003038:	68fb      	ldr	r3, [r7, #12]
 800303a:	87da      	strh	r2, [r3, #62]	; 0x3e
 800303c:	e012      	b.n	8003064 <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800303e:	68fb      	ldr	r3, [r7, #12]
 8003040:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003042:	68fb      	ldr	r3, [r7, #12]
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	330c      	adds	r3, #12
 8003048:	7812      	ldrb	r2, [r2, #0]
 800304a:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 800304c:	68fb      	ldr	r3, [r7, #12]
 800304e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003050:	1c5a      	adds	r2, r3, #1
 8003052:	68fb      	ldr	r3, [r7, #12]
 8003054:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8003056:	68fb      	ldr	r3, [r7, #12]
 8003058:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800305a:	b29b      	uxth	r3, r3
 800305c:	3b01      	subs	r3, #1
 800305e:	b29a      	uxth	r2, r3
 8003060:	68fb      	ldr	r3, [r7, #12]
 8003062:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003064:	2300      	movs	r3, #0
 8003066:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003068:	68fb      	ldr	r3, [r7, #12]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	689b      	ldr	r3, [r3, #8]
 800306e:	f003 0301 	and.w	r3, r3, #1
 8003072:	2b01      	cmp	r3, #1
 8003074:	d148      	bne.n	8003108 <HAL_SPI_TransmitReceive+0x3aa>
 8003076:	68fb      	ldr	r3, [r7, #12]
 8003078:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800307c:	b29b      	uxth	r3, r3
 800307e:	2b00      	cmp	r3, #0
 8003080:	d042      	beq.n	8003108 <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 8003082:	68fb      	ldr	r3, [r7, #12]
 8003084:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003088:	b29b      	uxth	r3, r3
 800308a:	2b01      	cmp	r3, #1
 800308c:	d923      	bls.n	80030d6 <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800308e:	68fb      	ldr	r3, [r7, #12]
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	68da      	ldr	r2, [r3, #12]
 8003094:	68fb      	ldr	r3, [r7, #12]
 8003096:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003098:	b292      	uxth	r2, r2
 800309a:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 800309c:	68fb      	ldr	r3, [r7, #12]
 800309e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030a0:	1c9a      	adds	r2, r3, #2
 80030a2:	68fb      	ldr	r3, [r7, #12]
 80030a4:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 80030a6:	68fb      	ldr	r3, [r7, #12]
 80030a8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80030ac:	b29b      	uxth	r3, r3
 80030ae:	3b02      	subs	r3, #2
 80030b0:	b29a      	uxth	r2, r3
 80030b2:	68fb      	ldr	r3, [r7, #12]
 80030b4:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 80030b8:	68fb      	ldr	r3, [r7, #12]
 80030ba:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80030be:	b29b      	uxth	r3, r3
 80030c0:	2b01      	cmp	r3, #1
 80030c2:	d81f      	bhi.n	8003104 <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80030c4:	68fb      	ldr	r3, [r7, #12]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	685a      	ldr	r2, [r3, #4]
 80030ca:	68fb      	ldr	r3, [r7, #12]
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80030d2:	605a      	str	r2, [r3, #4]
 80030d4:	e016      	b.n	8003104 <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80030d6:	68fb      	ldr	r3, [r7, #12]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	f103 020c 	add.w	r2, r3, #12
 80030de:	68fb      	ldr	r3, [r7, #12]
 80030e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030e2:	7812      	ldrb	r2, [r2, #0]
 80030e4:	b2d2      	uxtb	r2, r2
 80030e6:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 80030e8:	68fb      	ldr	r3, [r7, #12]
 80030ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030ec:	1c5a      	adds	r2, r3, #1
 80030ee:	68fb      	ldr	r3, [r7, #12]
 80030f0:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 80030f2:	68fb      	ldr	r3, [r7, #12]
 80030f4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80030f8:	b29b      	uxth	r3, r3
 80030fa:	3b01      	subs	r3, #1
 80030fc:	b29a      	uxth	r2, r3
 80030fe:	68fb      	ldr	r3, [r7, #12]
 8003100:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003104:	2301      	movs	r3, #1
 8003106:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8003108:	f7fe f9e4 	bl	80014d4 <HAL_GetTick>
 800310c:	4602      	mov	r2, r0
 800310e:	69fb      	ldr	r3, [r7, #28]
 8003110:	1ad3      	subs	r3, r2, r3
 8003112:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003114:	429a      	cmp	r2, r3
 8003116:	d803      	bhi.n	8003120 <HAL_SPI_TransmitReceive+0x3c2>
 8003118:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800311a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800311e:	d102      	bne.n	8003126 <HAL_SPI_TransmitReceive+0x3c8>
 8003120:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003122:	2b00      	cmp	r3, #0
 8003124:	d103      	bne.n	800312e <HAL_SPI_TransmitReceive+0x3d0>
      {
        errorcode = HAL_TIMEOUT;
 8003126:	2303      	movs	r3, #3
 8003128:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 800312c:	e01c      	b.n	8003168 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800312e:	68fb      	ldr	r3, [r7, #12]
 8003130:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003132:	b29b      	uxth	r3, r3
 8003134:	2b00      	cmp	r3, #0
 8003136:	f47f af5b 	bne.w	8002ff0 <HAL_SPI_TransmitReceive+0x292>
 800313a:	68fb      	ldr	r3, [r7, #12]
 800313c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003140:	b29b      	uxth	r3, r3
 8003142:	2b00      	cmp	r3, #0
 8003144:	f47f af54 	bne.w	8002ff0 <HAL_SPI_TransmitReceive+0x292>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003148:	69fa      	ldr	r2, [r7, #28]
 800314a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800314c:	68f8      	ldr	r0, [r7, #12]
 800314e:	f000 f98b 	bl	8003468 <SPI_EndRxTxTransaction>
 8003152:	4603      	mov	r3, r0
 8003154:	2b00      	cmp	r3, #0
 8003156:	d006      	beq.n	8003166 <HAL_SPI_TransmitReceive+0x408>
  {
    errorcode = HAL_ERROR;
 8003158:	2301      	movs	r3, #1
 800315a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800315e:	68fb      	ldr	r3, [r7, #12]
 8003160:	2220      	movs	r2, #32
 8003162:	661a      	str	r2, [r3, #96]	; 0x60
 8003164:	e000      	b.n	8003168 <HAL_SPI_TransmitReceive+0x40a>
  }

error :
 8003166:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8003168:	68fb      	ldr	r3, [r7, #12]
 800316a:	2201      	movs	r2, #1
 800316c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 8003170:	68fb      	ldr	r3, [r7, #12]
 8003172:	2200      	movs	r2, #0
 8003174:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8003178:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 800317c:	4618      	mov	r0, r3
 800317e:	3728      	adds	r7, #40	; 0x28
 8003180:	46bd      	mov	sp, r7
 8003182:	bd80      	pop	{r7, pc}

08003184 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003184:	b580      	push	{r7, lr}
 8003186:	b088      	sub	sp, #32
 8003188:	af00      	add	r7, sp, #0
 800318a:	60f8      	str	r0, [r7, #12]
 800318c:	60b9      	str	r1, [r7, #8]
 800318e:	603b      	str	r3, [r7, #0]
 8003190:	4613      	mov	r3, r2
 8003192:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8003194:	f7fe f99e 	bl	80014d4 <HAL_GetTick>
 8003198:	4602      	mov	r2, r0
 800319a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800319c:	1a9b      	subs	r3, r3, r2
 800319e:	683a      	ldr	r2, [r7, #0]
 80031a0:	4413      	add	r3, r2
 80031a2:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80031a4:	f7fe f996 	bl	80014d4 <HAL_GetTick>
 80031a8:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80031aa:	4b39      	ldr	r3, [pc, #228]	; (8003290 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	015b      	lsls	r3, r3, #5
 80031b0:	0d1b      	lsrs	r3, r3, #20
 80031b2:	69fa      	ldr	r2, [r7, #28]
 80031b4:	fb02 f303 	mul.w	r3, r2, r3
 80031b8:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80031ba:	e054      	b.n	8003266 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80031bc:	683b      	ldr	r3, [r7, #0]
 80031be:	f1b3 3fff 	cmp.w	r3, #4294967295
 80031c2:	d050      	beq.n	8003266 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80031c4:	f7fe f986 	bl	80014d4 <HAL_GetTick>
 80031c8:	4602      	mov	r2, r0
 80031ca:	69bb      	ldr	r3, [r7, #24]
 80031cc:	1ad3      	subs	r3, r2, r3
 80031ce:	69fa      	ldr	r2, [r7, #28]
 80031d0:	429a      	cmp	r2, r3
 80031d2:	d902      	bls.n	80031da <SPI_WaitFlagStateUntilTimeout+0x56>
 80031d4:	69fb      	ldr	r3, [r7, #28]
 80031d6:	2b00      	cmp	r3, #0
 80031d8:	d13d      	bne.n	8003256 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80031da:	68fb      	ldr	r3, [r7, #12]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	685a      	ldr	r2, [r3, #4]
 80031e0:	68fb      	ldr	r3, [r7, #12]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80031e8:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80031ea:	68fb      	ldr	r3, [r7, #12]
 80031ec:	685b      	ldr	r3, [r3, #4]
 80031ee:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80031f2:	d111      	bne.n	8003218 <SPI_WaitFlagStateUntilTimeout+0x94>
 80031f4:	68fb      	ldr	r3, [r7, #12]
 80031f6:	689b      	ldr	r3, [r3, #8]
 80031f8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80031fc:	d004      	beq.n	8003208 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80031fe:	68fb      	ldr	r3, [r7, #12]
 8003200:	689b      	ldr	r3, [r3, #8]
 8003202:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003206:	d107      	bne.n	8003218 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003208:	68fb      	ldr	r3, [r7, #12]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	681a      	ldr	r2, [r3, #0]
 800320e:	68fb      	ldr	r3, [r7, #12]
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003216:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003218:	68fb      	ldr	r3, [r7, #12]
 800321a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800321c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003220:	d10f      	bne.n	8003242 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8003222:	68fb      	ldr	r3, [r7, #12]
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	681a      	ldr	r2, [r3, #0]
 8003228:	68fb      	ldr	r3, [r7, #12]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003230:	601a      	str	r2, [r3, #0]
 8003232:	68fb      	ldr	r3, [r7, #12]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	681a      	ldr	r2, [r3, #0]
 8003238:	68fb      	ldr	r3, [r7, #12]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003240:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003242:	68fb      	ldr	r3, [r7, #12]
 8003244:	2201      	movs	r2, #1
 8003246:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800324a:	68fb      	ldr	r3, [r7, #12]
 800324c:	2200      	movs	r2, #0
 800324e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8003252:	2303      	movs	r3, #3
 8003254:	e017      	b.n	8003286 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8003256:	697b      	ldr	r3, [r7, #20]
 8003258:	2b00      	cmp	r3, #0
 800325a:	d101      	bne.n	8003260 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800325c:	2300      	movs	r3, #0
 800325e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8003260:	697b      	ldr	r3, [r7, #20]
 8003262:	3b01      	subs	r3, #1
 8003264:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003266:	68fb      	ldr	r3, [r7, #12]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	689a      	ldr	r2, [r3, #8]
 800326c:	68bb      	ldr	r3, [r7, #8]
 800326e:	4013      	ands	r3, r2
 8003270:	68ba      	ldr	r2, [r7, #8]
 8003272:	429a      	cmp	r2, r3
 8003274:	bf0c      	ite	eq
 8003276:	2301      	moveq	r3, #1
 8003278:	2300      	movne	r3, #0
 800327a:	b2db      	uxtb	r3, r3
 800327c:	461a      	mov	r2, r3
 800327e:	79fb      	ldrb	r3, [r7, #7]
 8003280:	429a      	cmp	r2, r3
 8003282:	d19b      	bne.n	80031bc <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8003284:	2300      	movs	r3, #0
}
 8003286:	4618      	mov	r0, r3
 8003288:	3720      	adds	r7, #32
 800328a:	46bd      	mov	sp, r7
 800328c:	bd80      	pop	{r7, pc}
 800328e:	bf00      	nop
 8003290:	20000004 	.word	0x20000004

08003294 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003294:	b580      	push	{r7, lr}
 8003296:	b088      	sub	sp, #32
 8003298:	af00      	add	r7, sp, #0
 800329a:	60f8      	str	r0, [r7, #12]
 800329c:	60b9      	str	r1, [r7, #8]
 800329e:	607a      	str	r2, [r7, #4]
 80032a0:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 80032a2:	f7fe f917 	bl	80014d4 <HAL_GetTick>
 80032a6:	4602      	mov	r2, r0
 80032a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80032aa:	1a9b      	subs	r3, r3, r2
 80032ac:	683a      	ldr	r2, [r7, #0]
 80032ae:	4413      	add	r3, r2
 80032b0:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80032b2:	f7fe f90f 	bl	80014d4 <HAL_GetTick>
 80032b6:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 80032b8:	4b3e      	ldr	r3, [pc, #248]	; (80033b4 <SPI_WaitFifoStateUntilTimeout+0x120>)
 80032ba:	681a      	ldr	r2, [r3, #0]
 80032bc:	4613      	mov	r3, r2
 80032be:	009b      	lsls	r3, r3, #2
 80032c0:	4413      	add	r3, r2
 80032c2:	00da      	lsls	r2, r3, #3
 80032c4:	1ad3      	subs	r3, r2, r3
 80032c6:	0d1b      	lsrs	r3, r3, #20
 80032c8:	69fa      	ldr	r2, [r7, #28]
 80032ca:	fb02 f303 	mul.w	r3, r2, r3
 80032ce:	613b      	str	r3, [r7, #16]

  while ((hspi->Instance->SR & Fifo) != State)
 80032d0:	e062      	b.n	8003398 <SPI_WaitFifoStateUntilTimeout+0x104>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 80032d2:	68bb      	ldr	r3, [r7, #8]
 80032d4:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 80032d8:	d109      	bne.n	80032ee <SPI_WaitFifoStateUntilTimeout+0x5a>
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	2b00      	cmp	r3, #0
 80032de:	d106      	bne.n	80032ee <SPI_WaitFifoStateUntilTimeout+0x5a>
    {
      /* Flush Data Register by a blank read */
      tmpreg = READ_REG(*((__IO uint8_t *)&hspi->Instance->DR));
 80032e0:	68fb      	ldr	r3, [r7, #12]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	330c      	adds	r3, #12
 80032e6:	781b      	ldrb	r3, [r3, #0]
 80032e8:	b2db      	uxtb	r3, r3
 80032ea:	617b      	str	r3, [r7, #20]
      /* To avoid GCC warning */
      UNUSED(tmpreg);
 80032ec:	697b      	ldr	r3, [r7, #20]
    }

    if (Timeout != HAL_MAX_DELAY)
 80032ee:	683b      	ldr	r3, [r7, #0]
 80032f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80032f4:	d050      	beq.n	8003398 <SPI_WaitFifoStateUntilTimeout+0x104>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80032f6:	f7fe f8ed 	bl	80014d4 <HAL_GetTick>
 80032fa:	4602      	mov	r2, r0
 80032fc:	69bb      	ldr	r3, [r7, #24]
 80032fe:	1ad3      	subs	r3, r2, r3
 8003300:	69fa      	ldr	r2, [r7, #28]
 8003302:	429a      	cmp	r2, r3
 8003304:	d902      	bls.n	800330c <SPI_WaitFifoStateUntilTimeout+0x78>
 8003306:	69fb      	ldr	r3, [r7, #28]
 8003308:	2b00      	cmp	r3, #0
 800330a:	d13d      	bne.n	8003388 <SPI_WaitFifoStateUntilTimeout+0xf4>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800330c:	68fb      	ldr	r3, [r7, #12]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	685a      	ldr	r2, [r3, #4]
 8003312:	68fb      	ldr	r3, [r7, #12]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800331a:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800331c:	68fb      	ldr	r3, [r7, #12]
 800331e:	685b      	ldr	r3, [r3, #4]
 8003320:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003324:	d111      	bne.n	800334a <SPI_WaitFifoStateUntilTimeout+0xb6>
 8003326:	68fb      	ldr	r3, [r7, #12]
 8003328:	689b      	ldr	r3, [r3, #8]
 800332a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800332e:	d004      	beq.n	800333a <SPI_WaitFifoStateUntilTimeout+0xa6>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003330:	68fb      	ldr	r3, [r7, #12]
 8003332:	689b      	ldr	r3, [r3, #8]
 8003334:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003338:	d107      	bne.n	800334a <SPI_WaitFifoStateUntilTimeout+0xb6>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800333a:	68fb      	ldr	r3, [r7, #12]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	681a      	ldr	r2, [r3, #0]
 8003340:	68fb      	ldr	r3, [r7, #12]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003348:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800334a:	68fb      	ldr	r3, [r7, #12]
 800334c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800334e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003352:	d10f      	bne.n	8003374 <SPI_WaitFifoStateUntilTimeout+0xe0>
        {
          SPI_RESET_CRC(hspi);
 8003354:	68fb      	ldr	r3, [r7, #12]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	681a      	ldr	r2, [r3, #0]
 800335a:	68fb      	ldr	r3, [r7, #12]
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003362:	601a      	str	r2, [r3, #0]
 8003364:	68fb      	ldr	r3, [r7, #12]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	681a      	ldr	r2, [r3, #0]
 800336a:	68fb      	ldr	r3, [r7, #12]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003372:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003374:	68fb      	ldr	r3, [r7, #12]
 8003376:	2201      	movs	r2, #1
 8003378:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800337c:	68fb      	ldr	r3, [r7, #12]
 800337e:	2200      	movs	r2, #0
 8003380:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8003384:	2303      	movs	r3, #3
 8003386:	e010      	b.n	80033aa <SPI_WaitFifoStateUntilTimeout+0x116>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8003388:	693b      	ldr	r3, [r7, #16]
 800338a:	2b00      	cmp	r3, #0
 800338c:	d101      	bne.n	8003392 <SPI_WaitFifoStateUntilTimeout+0xfe>
      {
        tmp_timeout = 0U;
 800338e:	2300      	movs	r3, #0
 8003390:	61fb      	str	r3, [r7, #28]
      }      
      count--;
 8003392:	693b      	ldr	r3, [r7, #16]
 8003394:	3b01      	subs	r3, #1
 8003396:	613b      	str	r3, [r7, #16]
  while ((hspi->Instance->SR & Fifo) != State)
 8003398:	68fb      	ldr	r3, [r7, #12]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	689a      	ldr	r2, [r3, #8]
 800339e:	68bb      	ldr	r3, [r7, #8]
 80033a0:	4013      	ands	r3, r2
 80033a2:	687a      	ldr	r2, [r7, #4]
 80033a4:	429a      	cmp	r2, r3
 80033a6:	d194      	bne.n	80032d2 <SPI_WaitFifoStateUntilTimeout+0x3e>
    }
  }

  return HAL_OK;
 80033a8:	2300      	movs	r3, #0
}
 80033aa:	4618      	mov	r0, r3
 80033ac:	3720      	adds	r7, #32
 80033ae:	46bd      	mov	sp, r7
 80033b0:	bd80      	pop	{r7, pc}
 80033b2:	bf00      	nop
 80033b4:	20000004 	.word	0x20000004

080033b8 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 80033b8:	b580      	push	{r7, lr}
 80033ba:	b086      	sub	sp, #24
 80033bc:	af02      	add	r7, sp, #8
 80033be:	60f8      	str	r0, [r7, #12]
 80033c0:	60b9      	str	r1, [r7, #8]
 80033c2:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80033c4:	68fb      	ldr	r3, [r7, #12]
 80033c6:	685b      	ldr	r3, [r3, #4]
 80033c8:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80033cc:	d111      	bne.n	80033f2 <SPI_EndRxTransaction+0x3a>
 80033ce:	68fb      	ldr	r3, [r7, #12]
 80033d0:	689b      	ldr	r3, [r3, #8]
 80033d2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80033d6:	d004      	beq.n	80033e2 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80033d8:	68fb      	ldr	r3, [r7, #12]
 80033da:	689b      	ldr	r3, [r3, #8]
 80033dc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80033e0:	d107      	bne.n	80033f2 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 80033e2:	68fb      	ldr	r3, [r7, #12]
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	681a      	ldr	r2, [r3, #0]
 80033e8:	68fb      	ldr	r3, [r7, #12]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80033f0:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	9300      	str	r3, [sp, #0]
 80033f6:	68bb      	ldr	r3, [r7, #8]
 80033f8:	2200      	movs	r2, #0
 80033fa:	2180      	movs	r1, #128	; 0x80
 80033fc:	68f8      	ldr	r0, [r7, #12]
 80033fe:	f7ff fec1 	bl	8003184 <SPI_WaitFlagStateUntilTimeout>
 8003402:	4603      	mov	r3, r0
 8003404:	2b00      	cmp	r3, #0
 8003406:	d007      	beq.n	8003418 <SPI_EndRxTransaction+0x60>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003408:	68fb      	ldr	r3, [r7, #12]
 800340a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800340c:	f043 0220 	orr.w	r2, r3, #32
 8003410:	68fb      	ldr	r3, [r7, #12]
 8003412:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8003414:	2303      	movs	r3, #3
 8003416:	e023      	b.n	8003460 <SPI_EndRxTransaction+0xa8>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003418:	68fb      	ldr	r3, [r7, #12]
 800341a:	685b      	ldr	r3, [r3, #4]
 800341c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003420:	d11d      	bne.n	800345e <SPI_EndRxTransaction+0xa6>
 8003422:	68fb      	ldr	r3, [r7, #12]
 8003424:	689b      	ldr	r3, [r3, #8]
 8003426:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800342a:	d004      	beq.n	8003436 <SPI_EndRxTransaction+0x7e>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800342c:	68fb      	ldr	r3, [r7, #12]
 800342e:	689b      	ldr	r3, [r3, #8]
 8003430:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003434:	d113      	bne.n	800345e <SPI_EndRxTransaction+0xa6>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	9300      	str	r3, [sp, #0]
 800343a:	68bb      	ldr	r3, [r7, #8]
 800343c:	2200      	movs	r2, #0
 800343e:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8003442:	68f8      	ldr	r0, [r7, #12]
 8003444:	f7ff ff26 	bl	8003294 <SPI_WaitFifoStateUntilTimeout>
 8003448:	4603      	mov	r3, r0
 800344a:	2b00      	cmp	r3, #0
 800344c:	d007      	beq.n	800345e <SPI_EndRxTransaction+0xa6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800344e:	68fb      	ldr	r3, [r7, #12]
 8003450:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003452:	f043 0220 	orr.w	r2, r3, #32
 8003456:	68fb      	ldr	r3, [r7, #12]
 8003458:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 800345a:	2303      	movs	r3, #3
 800345c:	e000      	b.n	8003460 <SPI_EndRxTransaction+0xa8>
    }
  }
  return HAL_OK;
 800345e:	2300      	movs	r3, #0
}
 8003460:	4618      	mov	r0, r3
 8003462:	3710      	adds	r7, #16
 8003464:	46bd      	mov	sp, r7
 8003466:	bd80      	pop	{r7, pc}

08003468 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8003468:	b580      	push	{r7, lr}
 800346a:	b086      	sub	sp, #24
 800346c:	af02      	add	r7, sp, #8
 800346e:	60f8      	str	r0, [r7, #12]
 8003470:	60b9      	str	r1, [r7, #8]
 8003472:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	9300      	str	r3, [sp, #0]
 8003478:	68bb      	ldr	r3, [r7, #8]
 800347a:	2200      	movs	r2, #0
 800347c:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8003480:	68f8      	ldr	r0, [r7, #12]
 8003482:	f7ff ff07 	bl	8003294 <SPI_WaitFifoStateUntilTimeout>
 8003486:	4603      	mov	r3, r0
 8003488:	2b00      	cmp	r3, #0
 800348a:	d007      	beq.n	800349c <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800348c:	68fb      	ldr	r3, [r7, #12]
 800348e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003490:	f043 0220 	orr.w	r2, r3, #32
 8003494:	68fb      	ldr	r3, [r7, #12]
 8003496:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8003498:	2303      	movs	r3, #3
 800349a:	e027      	b.n	80034ec <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	9300      	str	r3, [sp, #0]
 80034a0:	68bb      	ldr	r3, [r7, #8]
 80034a2:	2200      	movs	r2, #0
 80034a4:	2180      	movs	r1, #128	; 0x80
 80034a6:	68f8      	ldr	r0, [r7, #12]
 80034a8:	f7ff fe6c 	bl	8003184 <SPI_WaitFlagStateUntilTimeout>
 80034ac:	4603      	mov	r3, r0
 80034ae:	2b00      	cmp	r3, #0
 80034b0:	d007      	beq.n	80034c2 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80034b2:	68fb      	ldr	r3, [r7, #12]
 80034b4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80034b6:	f043 0220 	orr.w	r2, r3, #32
 80034ba:	68fb      	ldr	r3, [r7, #12]
 80034bc:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80034be:	2303      	movs	r3, #3
 80034c0:	e014      	b.n	80034ec <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	9300      	str	r3, [sp, #0]
 80034c6:	68bb      	ldr	r3, [r7, #8]
 80034c8:	2200      	movs	r2, #0
 80034ca:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 80034ce:	68f8      	ldr	r0, [r7, #12]
 80034d0:	f7ff fee0 	bl	8003294 <SPI_WaitFifoStateUntilTimeout>
 80034d4:	4603      	mov	r3, r0
 80034d6:	2b00      	cmp	r3, #0
 80034d8:	d007      	beq.n	80034ea <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80034da:	68fb      	ldr	r3, [r7, #12]
 80034dc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80034de:	f043 0220 	orr.w	r2, r3, #32
 80034e2:	68fb      	ldr	r3, [r7, #12]
 80034e4:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80034e6:	2303      	movs	r3, #3
 80034e8:	e000      	b.n	80034ec <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 80034ea:	2300      	movs	r3, #0
}
 80034ec:	4618      	mov	r0, r3
 80034ee:	3710      	adds	r7, #16
 80034f0:	46bd      	mov	sp, r7
 80034f2:	bd80      	pop	{r7, pc}

080034f4 <__errno>:
 80034f4:	4b01      	ldr	r3, [pc, #4]	; (80034fc <__errno+0x8>)
 80034f6:	6818      	ldr	r0, [r3, #0]
 80034f8:	4770      	bx	lr
 80034fa:	bf00      	nop
 80034fc:	20000010 	.word	0x20000010

08003500 <__libc_init_array>:
 8003500:	b570      	push	{r4, r5, r6, lr}
 8003502:	4d0d      	ldr	r5, [pc, #52]	; (8003538 <__libc_init_array+0x38>)
 8003504:	4c0d      	ldr	r4, [pc, #52]	; (800353c <__libc_init_array+0x3c>)
 8003506:	1b64      	subs	r4, r4, r5
 8003508:	10a4      	asrs	r4, r4, #2
 800350a:	2600      	movs	r6, #0
 800350c:	42a6      	cmp	r6, r4
 800350e:	d109      	bne.n	8003524 <__libc_init_array+0x24>
 8003510:	4d0b      	ldr	r5, [pc, #44]	; (8003540 <__libc_init_array+0x40>)
 8003512:	4c0c      	ldr	r4, [pc, #48]	; (8003544 <__libc_init_array+0x44>)
 8003514:	f000 fa86 	bl	8003a24 <_init>
 8003518:	1b64      	subs	r4, r4, r5
 800351a:	10a4      	asrs	r4, r4, #2
 800351c:	2600      	movs	r6, #0
 800351e:	42a6      	cmp	r6, r4
 8003520:	d105      	bne.n	800352e <__libc_init_array+0x2e>
 8003522:	bd70      	pop	{r4, r5, r6, pc}
 8003524:	f855 3b04 	ldr.w	r3, [r5], #4
 8003528:	4798      	blx	r3
 800352a:	3601      	adds	r6, #1
 800352c:	e7ee      	b.n	800350c <__libc_init_array+0xc>
 800352e:	f855 3b04 	ldr.w	r3, [r5], #4
 8003532:	4798      	blx	r3
 8003534:	3601      	adds	r6, #1
 8003536:	e7f2      	b.n	800351e <__libc_init_array+0x1e>
 8003538:	08003ab4 	.word	0x08003ab4
 800353c:	08003ab4 	.word	0x08003ab4
 8003540:	08003ab4 	.word	0x08003ab4
 8003544:	08003ab8 	.word	0x08003ab8

08003548 <memset>:
 8003548:	4402      	add	r2, r0
 800354a:	4603      	mov	r3, r0
 800354c:	4293      	cmp	r3, r2
 800354e:	d100      	bne.n	8003552 <memset+0xa>
 8003550:	4770      	bx	lr
 8003552:	f803 1b01 	strb.w	r1, [r3], #1
 8003556:	e7f9      	b.n	800354c <memset+0x4>

08003558 <sqrt>:
 8003558:	b538      	push	{r3, r4, r5, lr}
 800355a:	ed2d 8b02 	vpush	{d8}
 800355e:	ec55 4b10 	vmov	r4, r5, d0
 8003562:	f000 f82f 	bl	80035c4 <__ieee754_sqrt>
 8003566:	4b15      	ldr	r3, [pc, #84]	; (80035bc <sqrt+0x64>)
 8003568:	eeb0 8a40 	vmov.f32	s16, s0
 800356c:	eef0 8a60 	vmov.f32	s17, s1
 8003570:	f993 3000 	ldrsb.w	r3, [r3]
 8003574:	3301      	adds	r3, #1
 8003576:	d019      	beq.n	80035ac <sqrt+0x54>
 8003578:	4622      	mov	r2, r4
 800357a:	462b      	mov	r3, r5
 800357c:	4620      	mov	r0, r4
 800357e:	4629      	mov	r1, r5
 8003580:	f7fd fa7a 	bl	8000a78 <__aeabi_dcmpun>
 8003584:	b990      	cbnz	r0, 80035ac <sqrt+0x54>
 8003586:	2200      	movs	r2, #0
 8003588:	2300      	movs	r3, #0
 800358a:	4620      	mov	r0, r4
 800358c:	4629      	mov	r1, r5
 800358e:	f7fd fa4b 	bl	8000a28 <__aeabi_dcmplt>
 8003592:	b158      	cbz	r0, 80035ac <sqrt+0x54>
 8003594:	f7ff ffae 	bl	80034f4 <__errno>
 8003598:	2321      	movs	r3, #33	; 0x21
 800359a:	6003      	str	r3, [r0, #0]
 800359c:	2200      	movs	r2, #0
 800359e:	2300      	movs	r3, #0
 80035a0:	4610      	mov	r0, r2
 80035a2:	4619      	mov	r1, r3
 80035a4:	f7fd f8f8 	bl	8000798 <__aeabi_ddiv>
 80035a8:	ec41 0b18 	vmov	d8, r0, r1
 80035ac:	eeb0 0a48 	vmov.f32	s0, s16
 80035b0:	eef0 0a68 	vmov.f32	s1, s17
 80035b4:	ecbd 8b02 	vpop	{d8}
 80035b8:	bd38      	pop	{r3, r4, r5, pc}
 80035ba:	bf00      	nop
 80035bc:	20000074 	.word	0x20000074

080035c0 <atan2f>:
 80035c0:	f000 b8b4 	b.w	800372c <__ieee754_atan2f>

080035c4 <__ieee754_sqrt>:
 80035c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80035c8:	ec55 4b10 	vmov	r4, r5, d0
 80035cc:	4e56      	ldr	r6, [pc, #344]	; (8003728 <__ieee754_sqrt+0x164>)
 80035ce:	43ae      	bics	r6, r5
 80035d0:	ee10 0a10 	vmov	r0, s0
 80035d4:	ee10 3a10 	vmov	r3, s0
 80035d8:	4629      	mov	r1, r5
 80035da:	462a      	mov	r2, r5
 80035dc:	d110      	bne.n	8003600 <__ieee754_sqrt+0x3c>
 80035de:	ee10 2a10 	vmov	r2, s0
 80035e2:	462b      	mov	r3, r5
 80035e4:	f7fc ffae 	bl	8000544 <__aeabi_dmul>
 80035e8:	4602      	mov	r2, r0
 80035ea:	460b      	mov	r3, r1
 80035ec:	4620      	mov	r0, r4
 80035ee:	4629      	mov	r1, r5
 80035f0:	f7fc fdf2 	bl	80001d8 <__adddf3>
 80035f4:	4604      	mov	r4, r0
 80035f6:	460d      	mov	r5, r1
 80035f8:	ec45 4b10 	vmov	d0, r4, r5
 80035fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003600:	2d00      	cmp	r5, #0
 8003602:	dc10      	bgt.n	8003626 <__ieee754_sqrt+0x62>
 8003604:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8003608:	4330      	orrs	r0, r6
 800360a:	d0f5      	beq.n	80035f8 <__ieee754_sqrt+0x34>
 800360c:	b15d      	cbz	r5, 8003626 <__ieee754_sqrt+0x62>
 800360e:	ee10 2a10 	vmov	r2, s0
 8003612:	462b      	mov	r3, r5
 8003614:	ee10 0a10 	vmov	r0, s0
 8003618:	f7fc fddc 	bl	80001d4 <__aeabi_dsub>
 800361c:	4602      	mov	r2, r0
 800361e:	460b      	mov	r3, r1
 8003620:	f7fd f8ba 	bl	8000798 <__aeabi_ddiv>
 8003624:	e7e6      	b.n	80035f4 <__ieee754_sqrt+0x30>
 8003626:	1509      	asrs	r1, r1, #20
 8003628:	d076      	beq.n	8003718 <__ieee754_sqrt+0x154>
 800362a:	f3c2 0213 	ubfx	r2, r2, #0, #20
 800362e:	07ce      	lsls	r6, r1, #31
 8003630:	f442 1080 	orr.w	r0, r2, #1048576	; 0x100000
 8003634:	bf5e      	ittt	pl
 8003636:	0fda      	lsrpl	r2, r3, #31
 8003638:	005b      	lslpl	r3, r3, #1
 800363a:	eb02 0040 	addpl.w	r0, r2, r0, lsl #1
 800363e:	0fda      	lsrs	r2, r3, #31
 8003640:	f2a1 35ff 	subw	r5, r1, #1023	; 0x3ff
 8003644:	eb02 0240 	add.w	r2, r2, r0, lsl #1
 8003648:	2000      	movs	r0, #0
 800364a:	106d      	asrs	r5, r5, #1
 800364c:	005b      	lsls	r3, r3, #1
 800364e:	f04f 0e16 	mov.w	lr, #22
 8003652:	4684      	mov	ip, r0
 8003654:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8003658:	eb0c 0401 	add.w	r4, ip, r1
 800365c:	4294      	cmp	r4, r2
 800365e:	bfde      	ittt	le
 8003660:	1b12      	suble	r2, r2, r4
 8003662:	eb04 0c01 	addle.w	ip, r4, r1
 8003666:	1840      	addle	r0, r0, r1
 8003668:	0052      	lsls	r2, r2, #1
 800366a:	f1be 0e01 	subs.w	lr, lr, #1
 800366e:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 8003672:	ea4f 0151 	mov.w	r1, r1, lsr #1
 8003676:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800367a:	d1ed      	bne.n	8003658 <__ieee754_sqrt+0x94>
 800367c:	4671      	mov	r1, lr
 800367e:	2720      	movs	r7, #32
 8003680:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 8003684:	4562      	cmp	r2, ip
 8003686:	eb04 060e 	add.w	r6, r4, lr
 800368a:	dc02      	bgt.n	8003692 <__ieee754_sqrt+0xce>
 800368c:	d113      	bne.n	80036b6 <__ieee754_sqrt+0xf2>
 800368e:	429e      	cmp	r6, r3
 8003690:	d811      	bhi.n	80036b6 <__ieee754_sqrt+0xf2>
 8003692:	2e00      	cmp	r6, #0
 8003694:	eb06 0e04 	add.w	lr, r6, r4
 8003698:	da43      	bge.n	8003722 <__ieee754_sqrt+0x15e>
 800369a:	f1be 0f00 	cmp.w	lr, #0
 800369e:	db40      	blt.n	8003722 <__ieee754_sqrt+0x15e>
 80036a0:	f10c 0801 	add.w	r8, ip, #1
 80036a4:	eba2 020c 	sub.w	r2, r2, ip
 80036a8:	429e      	cmp	r6, r3
 80036aa:	bf88      	it	hi
 80036ac:	f102 32ff 	addhi.w	r2, r2, #4294967295
 80036b0:	1b9b      	subs	r3, r3, r6
 80036b2:	4421      	add	r1, r4
 80036b4:	46c4      	mov	ip, r8
 80036b6:	0052      	lsls	r2, r2, #1
 80036b8:	3f01      	subs	r7, #1
 80036ba:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 80036be:	ea4f 0454 	mov.w	r4, r4, lsr #1
 80036c2:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80036c6:	d1dd      	bne.n	8003684 <__ieee754_sqrt+0xc0>
 80036c8:	4313      	orrs	r3, r2
 80036ca:	d006      	beq.n	80036da <__ieee754_sqrt+0x116>
 80036cc:	1c4c      	adds	r4, r1, #1
 80036ce:	bf13      	iteet	ne
 80036d0:	3101      	addne	r1, #1
 80036d2:	3001      	addeq	r0, #1
 80036d4:	4639      	moveq	r1, r7
 80036d6:	f021 0101 	bicne.w	r1, r1, #1
 80036da:	1043      	asrs	r3, r0, #1
 80036dc:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 80036e0:	0849      	lsrs	r1, r1, #1
 80036e2:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 80036e6:	07c2      	lsls	r2, r0, #31
 80036e8:	bf48      	it	mi
 80036ea:	f041 4100 	orrmi.w	r1, r1, #2147483648	; 0x80000000
 80036ee:	eb03 5705 	add.w	r7, r3, r5, lsl #20
 80036f2:	460c      	mov	r4, r1
 80036f4:	463d      	mov	r5, r7
 80036f6:	e77f      	b.n	80035f8 <__ieee754_sqrt+0x34>
 80036f8:	0ada      	lsrs	r2, r3, #11
 80036fa:	3815      	subs	r0, #21
 80036fc:	055b      	lsls	r3, r3, #21
 80036fe:	2a00      	cmp	r2, #0
 8003700:	d0fa      	beq.n	80036f8 <__ieee754_sqrt+0x134>
 8003702:	02d7      	lsls	r7, r2, #11
 8003704:	d50a      	bpl.n	800371c <__ieee754_sqrt+0x158>
 8003706:	f1c1 0420 	rsb	r4, r1, #32
 800370a:	fa23 f404 	lsr.w	r4, r3, r4
 800370e:	1e4d      	subs	r5, r1, #1
 8003710:	408b      	lsls	r3, r1
 8003712:	4322      	orrs	r2, r4
 8003714:	1b41      	subs	r1, r0, r5
 8003716:	e788      	b.n	800362a <__ieee754_sqrt+0x66>
 8003718:	4608      	mov	r0, r1
 800371a:	e7f0      	b.n	80036fe <__ieee754_sqrt+0x13a>
 800371c:	0052      	lsls	r2, r2, #1
 800371e:	3101      	adds	r1, #1
 8003720:	e7ef      	b.n	8003702 <__ieee754_sqrt+0x13e>
 8003722:	46e0      	mov	r8, ip
 8003724:	e7be      	b.n	80036a4 <__ieee754_sqrt+0xe0>
 8003726:	bf00      	nop
 8003728:	7ff00000 	.word	0x7ff00000

0800372c <__ieee754_atan2f>:
 800372c:	ee10 2a90 	vmov	r2, s1
 8003730:	f022 4100 	bic.w	r1, r2, #2147483648	; 0x80000000
 8003734:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 8003738:	b510      	push	{r4, lr}
 800373a:	eef0 7a40 	vmov.f32	s15, s0
 800373e:	dc06      	bgt.n	800374e <__ieee754_atan2f+0x22>
 8003740:	ee10 0a10 	vmov	r0, s0
 8003744:	f020 4300 	bic.w	r3, r0, #2147483648	; 0x80000000
 8003748:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 800374c:	dd04      	ble.n	8003758 <__ieee754_atan2f+0x2c>
 800374e:	ee77 7aa0 	vadd.f32	s15, s15, s1
 8003752:	eeb0 0a67 	vmov.f32	s0, s15
 8003756:	bd10      	pop	{r4, pc}
 8003758:	f1b2 5f7e 	cmp.w	r2, #1065353216	; 0x3f800000
 800375c:	d103      	bne.n	8003766 <__ieee754_atan2f+0x3a>
 800375e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003762:	f000 b883 	b.w	800386c <atanf>
 8003766:	1794      	asrs	r4, r2, #30
 8003768:	f004 0402 	and.w	r4, r4, #2
 800376c:	ea44 74d0 	orr.w	r4, r4, r0, lsr #31
 8003770:	b943      	cbnz	r3, 8003784 <__ieee754_atan2f+0x58>
 8003772:	2c02      	cmp	r4, #2
 8003774:	d05e      	beq.n	8003834 <__ieee754_atan2f+0x108>
 8003776:	ed9f 7a34 	vldr	s14, [pc, #208]	; 8003848 <__ieee754_atan2f+0x11c>
 800377a:	2c03      	cmp	r4, #3
 800377c:	bf08      	it	eq
 800377e:	eef0 7a47 	vmoveq.f32	s15, s14
 8003782:	e7e6      	b.n	8003752 <__ieee754_atan2f+0x26>
 8003784:	b941      	cbnz	r1, 8003798 <__ieee754_atan2f+0x6c>
 8003786:	eddf 7a31 	vldr	s15, [pc, #196]	; 800384c <__ieee754_atan2f+0x120>
 800378a:	ed9f 0a31 	vldr	s0, [pc, #196]	; 8003850 <__ieee754_atan2f+0x124>
 800378e:	2800      	cmp	r0, #0
 8003790:	bfb8      	it	lt
 8003792:	eef0 7a40 	vmovlt.f32	s15, s0
 8003796:	e7dc      	b.n	8003752 <__ieee754_atan2f+0x26>
 8003798:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 800379c:	d110      	bne.n	80037c0 <__ieee754_atan2f+0x94>
 800379e:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 80037a2:	f104 34ff 	add.w	r4, r4, #4294967295
 80037a6:	d107      	bne.n	80037b8 <__ieee754_atan2f+0x8c>
 80037a8:	2c02      	cmp	r4, #2
 80037aa:	d846      	bhi.n	800383a <__ieee754_atan2f+0x10e>
 80037ac:	4b29      	ldr	r3, [pc, #164]	; (8003854 <__ieee754_atan2f+0x128>)
 80037ae:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 80037b2:	edd4 7a00 	vldr	s15, [r4]
 80037b6:	e7cc      	b.n	8003752 <__ieee754_atan2f+0x26>
 80037b8:	2c02      	cmp	r4, #2
 80037ba:	d841      	bhi.n	8003840 <__ieee754_atan2f+0x114>
 80037bc:	4b26      	ldr	r3, [pc, #152]	; (8003858 <__ieee754_atan2f+0x12c>)
 80037be:	e7f6      	b.n	80037ae <__ieee754_atan2f+0x82>
 80037c0:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 80037c4:	d0df      	beq.n	8003786 <__ieee754_atan2f+0x5a>
 80037c6:	1a5b      	subs	r3, r3, r1
 80037c8:	f1b3 5ff4 	cmp.w	r3, #511705088	; 0x1e800000
 80037cc:	ea4f 51e3 	mov.w	r1, r3, asr #23
 80037d0:	da1a      	bge.n	8003808 <__ieee754_atan2f+0xdc>
 80037d2:	2a00      	cmp	r2, #0
 80037d4:	da01      	bge.n	80037da <__ieee754_atan2f+0xae>
 80037d6:	313c      	adds	r1, #60	; 0x3c
 80037d8:	db19      	blt.n	800380e <__ieee754_atan2f+0xe2>
 80037da:	ee87 0aa0 	vdiv.f32	s0, s15, s1
 80037de:	f000 f919 	bl	8003a14 <fabsf>
 80037e2:	f000 f843 	bl	800386c <atanf>
 80037e6:	eef0 7a40 	vmov.f32	s15, s0
 80037ea:	2c01      	cmp	r4, #1
 80037ec:	d012      	beq.n	8003814 <__ieee754_atan2f+0xe8>
 80037ee:	2c02      	cmp	r4, #2
 80037f0:	d017      	beq.n	8003822 <__ieee754_atan2f+0xf6>
 80037f2:	2c00      	cmp	r4, #0
 80037f4:	d0ad      	beq.n	8003752 <__ieee754_atan2f+0x26>
 80037f6:	ed9f 0a19 	vldr	s0, [pc, #100]	; 800385c <__ieee754_atan2f+0x130>
 80037fa:	ee77 7a80 	vadd.f32	s15, s15, s0
 80037fe:	ed9f 0a18 	vldr	s0, [pc, #96]	; 8003860 <__ieee754_atan2f+0x134>
 8003802:	ee77 7ac0 	vsub.f32	s15, s15, s0
 8003806:	e7a4      	b.n	8003752 <__ieee754_atan2f+0x26>
 8003808:	eddf 7a10 	vldr	s15, [pc, #64]	; 800384c <__ieee754_atan2f+0x120>
 800380c:	e7ed      	b.n	80037ea <__ieee754_atan2f+0xbe>
 800380e:	eddf 7a15 	vldr	s15, [pc, #84]	; 8003864 <__ieee754_atan2f+0x138>
 8003812:	e7ea      	b.n	80037ea <__ieee754_atan2f+0xbe>
 8003814:	ee17 3a90 	vmov	r3, s15
 8003818:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800381c:	ee07 3a90 	vmov	s15, r3
 8003820:	e797      	b.n	8003752 <__ieee754_atan2f+0x26>
 8003822:	ed9f 0a0e 	vldr	s0, [pc, #56]	; 800385c <__ieee754_atan2f+0x130>
 8003826:	ee77 7a80 	vadd.f32	s15, s15, s0
 800382a:	ed9f 0a0d 	vldr	s0, [pc, #52]	; 8003860 <__ieee754_atan2f+0x134>
 800382e:	ee70 7a67 	vsub.f32	s15, s0, s15
 8003832:	e78e      	b.n	8003752 <__ieee754_atan2f+0x26>
 8003834:	eddf 7a0a 	vldr	s15, [pc, #40]	; 8003860 <__ieee754_atan2f+0x134>
 8003838:	e78b      	b.n	8003752 <__ieee754_atan2f+0x26>
 800383a:	eddf 7a0b 	vldr	s15, [pc, #44]	; 8003868 <__ieee754_atan2f+0x13c>
 800383e:	e788      	b.n	8003752 <__ieee754_atan2f+0x26>
 8003840:	eddf 7a08 	vldr	s15, [pc, #32]	; 8003864 <__ieee754_atan2f+0x138>
 8003844:	e785      	b.n	8003752 <__ieee754_atan2f+0x26>
 8003846:	bf00      	nop
 8003848:	c0490fdb 	.word	0xc0490fdb
 800384c:	3fc90fdb 	.word	0x3fc90fdb
 8003850:	bfc90fdb 	.word	0xbfc90fdb
 8003854:	08003a7c 	.word	0x08003a7c
 8003858:	08003a88 	.word	0x08003a88
 800385c:	33bbbd2e 	.word	0x33bbbd2e
 8003860:	40490fdb 	.word	0x40490fdb
 8003864:	00000000 	.word	0x00000000
 8003868:	3f490fdb 	.word	0x3f490fdb

0800386c <atanf>:
 800386c:	b538      	push	{r3, r4, r5, lr}
 800386e:	ee10 5a10 	vmov	r5, s0
 8003872:	f025 4400 	bic.w	r4, r5, #2147483648	; 0x80000000
 8003876:	f1b4 4fa1 	cmp.w	r4, #1350565888	; 0x50800000
 800387a:	eef0 7a40 	vmov.f32	s15, s0
 800387e:	db10      	blt.n	80038a2 <atanf+0x36>
 8003880:	f1b4 4fff 	cmp.w	r4, #2139095040	; 0x7f800000
 8003884:	dd04      	ble.n	8003890 <atanf+0x24>
 8003886:	ee70 7a00 	vadd.f32	s15, s0, s0
 800388a:	eeb0 0a67 	vmov.f32	s0, s15
 800388e:	bd38      	pop	{r3, r4, r5, pc}
 8003890:	eddf 7a4d 	vldr	s15, [pc, #308]	; 80039c8 <atanf+0x15c>
 8003894:	ed9f 0a4d 	vldr	s0, [pc, #308]	; 80039cc <atanf+0x160>
 8003898:	2d00      	cmp	r5, #0
 800389a:	bfd8      	it	le
 800389c:	eef0 7a40 	vmovle.f32	s15, s0
 80038a0:	e7f3      	b.n	800388a <atanf+0x1e>
 80038a2:	4b4b      	ldr	r3, [pc, #300]	; (80039d0 <atanf+0x164>)
 80038a4:	429c      	cmp	r4, r3
 80038a6:	dc10      	bgt.n	80038ca <atanf+0x5e>
 80038a8:	f1b4 5f44 	cmp.w	r4, #822083584	; 0x31000000
 80038ac:	da0a      	bge.n	80038c4 <atanf+0x58>
 80038ae:	ed9f 7a49 	vldr	s14, [pc, #292]	; 80039d4 <atanf+0x168>
 80038b2:	ee30 7a07 	vadd.f32	s14, s0, s14
 80038b6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80038ba:	eeb4 7ae6 	vcmpe.f32	s14, s13
 80038be:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80038c2:	dce2      	bgt.n	800388a <atanf+0x1e>
 80038c4:	f04f 33ff 	mov.w	r3, #4294967295
 80038c8:	e013      	b.n	80038f2 <atanf+0x86>
 80038ca:	f000 f8a3 	bl	8003a14 <fabsf>
 80038ce:	4b42      	ldr	r3, [pc, #264]	; (80039d8 <atanf+0x16c>)
 80038d0:	429c      	cmp	r4, r3
 80038d2:	dc4f      	bgt.n	8003974 <atanf+0x108>
 80038d4:	f5a3 03d0 	sub.w	r3, r3, #6815744	; 0x680000
 80038d8:	429c      	cmp	r4, r3
 80038da:	dc41      	bgt.n	8003960 <atanf+0xf4>
 80038dc:	eef0 7a00 	vmov.f32	s15, #0	; 0x40000000  2.0
 80038e0:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 80038e4:	eea0 7a27 	vfma.f32	s14, s0, s15
 80038e8:	2300      	movs	r3, #0
 80038ea:	ee30 0a27 	vadd.f32	s0, s0, s15
 80038ee:	eec7 7a00 	vdiv.f32	s15, s14, s0
 80038f2:	1c5a      	adds	r2, r3, #1
 80038f4:	ee67 6aa7 	vmul.f32	s13, s15, s15
 80038f8:	eddf 5a38 	vldr	s11, [pc, #224]	; 80039dc <atanf+0x170>
 80038fc:	ed9f 6a38 	vldr	s12, [pc, #224]	; 80039e0 <atanf+0x174>
 8003900:	ed9f 5a38 	vldr	s10, [pc, #224]	; 80039e4 <atanf+0x178>
 8003904:	ed9f 0a38 	vldr	s0, [pc, #224]	; 80039e8 <atanf+0x17c>
 8003908:	ee26 7aa6 	vmul.f32	s14, s13, s13
 800390c:	eea7 6a25 	vfma.f32	s12, s14, s11
 8003910:	eddf 5a36 	vldr	s11, [pc, #216]	; 80039ec <atanf+0x180>
 8003914:	eee6 5a07 	vfma.f32	s11, s12, s14
 8003918:	ed9f 6a35 	vldr	s12, [pc, #212]	; 80039f0 <atanf+0x184>
 800391c:	eea5 6a87 	vfma.f32	s12, s11, s14
 8003920:	eddf 5a34 	vldr	s11, [pc, #208]	; 80039f4 <atanf+0x188>
 8003924:	eee6 5a07 	vfma.f32	s11, s12, s14
 8003928:	ed9f 6a33 	vldr	s12, [pc, #204]	; 80039f8 <atanf+0x18c>
 800392c:	eea5 6a87 	vfma.f32	s12, s11, s14
 8003930:	eddf 5a32 	vldr	s11, [pc, #200]	; 80039fc <atanf+0x190>
 8003934:	eee7 5a05 	vfma.f32	s11, s14, s10
 8003938:	ed9f 5a31 	vldr	s10, [pc, #196]	; 8003a00 <atanf+0x194>
 800393c:	eea5 5a87 	vfma.f32	s10, s11, s14
 8003940:	eddf 5a30 	vldr	s11, [pc, #192]	; 8003a04 <atanf+0x198>
 8003944:	eee5 5a07 	vfma.f32	s11, s10, s14
 8003948:	eea5 0a87 	vfma.f32	s0, s11, s14
 800394c:	ee20 0a07 	vmul.f32	s0, s0, s14
 8003950:	eea6 0a26 	vfma.f32	s0, s12, s13
 8003954:	ee27 0a80 	vmul.f32	s0, s15, s0
 8003958:	d121      	bne.n	800399e <atanf+0x132>
 800395a:	ee77 7ac0 	vsub.f32	s15, s15, s0
 800395e:	e794      	b.n	800388a <atanf+0x1e>
 8003960:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8003964:	ee30 7a67 	vsub.f32	s14, s0, s15
 8003968:	ee30 0a27 	vadd.f32	s0, s0, s15
 800396c:	2301      	movs	r3, #1
 800396e:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8003972:	e7be      	b.n	80038f2 <atanf+0x86>
 8003974:	4b24      	ldr	r3, [pc, #144]	; (8003a08 <atanf+0x19c>)
 8003976:	429c      	cmp	r4, r3
 8003978:	dc0b      	bgt.n	8003992 <atanf+0x126>
 800397a:	eef7 7a08 	vmov.f32	s15, #120	; 0x3fc00000  1.5
 800397e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003982:	eea0 7a27 	vfma.f32	s14, s0, s15
 8003986:	2302      	movs	r3, #2
 8003988:	ee70 6a67 	vsub.f32	s13, s0, s15
 800398c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003990:	e7af      	b.n	80038f2 <atanf+0x86>
 8003992:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 8003996:	eec7 7a00 	vdiv.f32	s15, s14, s0
 800399a:	2303      	movs	r3, #3
 800399c:	e7a9      	b.n	80038f2 <atanf+0x86>
 800399e:	4a1b      	ldr	r2, [pc, #108]	; (8003a0c <atanf+0x1a0>)
 80039a0:	491b      	ldr	r1, [pc, #108]	; (8003a10 <atanf+0x1a4>)
 80039a2:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 80039a6:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 80039aa:	ed93 7a00 	vldr	s14, [r3]
 80039ae:	ee30 0a47 	vsub.f32	s0, s0, s14
 80039b2:	2d00      	cmp	r5, #0
 80039b4:	ee70 7a67 	vsub.f32	s15, s0, s15
 80039b8:	ed92 0a00 	vldr	s0, [r2]
 80039bc:	ee70 7a67 	vsub.f32	s15, s0, s15
 80039c0:	bfb8      	it	lt
 80039c2:	eef1 7a67 	vneglt.f32	s15, s15
 80039c6:	e760      	b.n	800388a <atanf+0x1e>
 80039c8:	3fc90fdb 	.word	0x3fc90fdb
 80039cc:	bfc90fdb 	.word	0xbfc90fdb
 80039d0:	3edfffff 	.word	0x3edfffff
 80039d4:	7149f2ca 	.word	0x7149f2ca
 80039d8:	3f97ffff 	.word	0x3f97ffff
 80039dc:	3c8569d7 	.word	0x3c8569d7
 80039e0:	3d4bda59 	.word	0x3d4bda59
 80039e4:	bd15a221 	.word	0xbd15a221
 80039e8:	be4ccccd 	.word	0xbe4ccccd
 80039ec:	3d886b35 	.word	0x3d886b35
 80039f0:	3dba2e6e 	.word	0x3dba2e6e
 80039f4:	3e124925 	.word	0x3e124925
 80039f8:	3eaaaaab 	.word	0x3eaaaaab
 80039fc:	bd6ef16b 	.word	0xbd6ef16b
 8003a00:	bd9d8795 	.word	0xbd9d8795
 8003a04:	bde38e38 	.word	0xbde38e38
 8003a08:	401bffff 	.word	0x401bffff
 8003a0c:	08003a94 	.word	0x08003a94
 8003a10:	08003aa4 	.word	0x08003aa4

08003a14 <fabsf>:
 8003a14:	ee10 3a10 	vmov	r3, s0
 8003a18:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8003a1c:	ee00 3a10 	vmov	s0, r3
 8003a20:	4770      	bx	lr
	...

08003a24 <_init>:
 8003a24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003a26:	bf00      	nop
 8003a28:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003a2a:	bc08      	pop	{r3}
 8003a2c:	469e      	mov	lr, r3
 8003a2e:	4770      	bx	lr

08003a30 <_fini>:
 8003a30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003a32:	bf00      	nop
 8003a34:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003a36:	bc08      	pop	{r3}
 8003a38:	469e      	mov	lr, r3
 8003a3a:	4770      	bx	lr
